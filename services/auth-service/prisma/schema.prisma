datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
  output        = "../generated"
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  lastname     String?
  firstname    String?
  password     String?
  accessToken  String?   @unique @map("access_token")
  refreshToken String?   @map("refresh_token")
  salt         String
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime  @default(now()) @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  roles             UserHasRole[]
  UserHasPermission UserHasPermission[]

  @@map("user")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  users UserHasRole[]

  @@map("role")
}

model Permission {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String?
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime?           @updatedAt @map("updated_at")

  users UserHasPermission[]

  @@map("permission")
}

model UserHasRole {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @map("user_id")
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    Int       @map("role_id")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([userId, roleId])
  @@map("user_has_role")
}

model UserHasPermission {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int        @map("user_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int        @map("permission_id")
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")

  @@unique([userId, permissionId])
  @@map("user_has_permission")
}
