<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profil - AmaZup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        }
        
        body {
            background: #f8fafc;
            min-height: 100vh;
            padding: 20px;
            color: #1e293b;
        }
        
        .profile-container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem 0;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid rgba(30, 41, 59, 0.1);
        }
        
        .logo {
            display: flex;
            align-items: center;
        }
        
        .logo-icon {
            width: 2.8rem;
            height: 2.8rem;
            background: linear-gradient(135deg, #0ea5e9 0%, #1e40af 100%);
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: white;
        }
        
        .logo-text {
            font-size: 1.6rem;
            font-weight: 700;
            color: #1e293b;
        }
        
        .user-info {
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #0ea5e9 0%, #1e40af 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .profile-content {
            display: flex;
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .profile-sidebar {
            flex: 1;
            max-width: 300px;
        }
        
        .profile-card {
            background: white;
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
            border: 1px solid #e2e8f0;
        }
        
        .card-header {
            background: linear-gradient(135deg, #0ea5e9 0%, #1e40af 100%);
            padding: 1.5rem;
            text-align: center;
            color: white;
        }
        
        .profile-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            border: 3px solid white;
            margin: 0 auto 1rem;
            background: linear-gradient(135deg, #0ea5e9 0%, #1e40af 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 2.5rem;
        }
        
        .profile-name {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }
        
        .profile-role {
            font-size: 0.95rem;
            opacity: 0.9;
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        .info-group {
            margin-bottom: 1.2rem;
            padding-bottom: 1.2rem;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .info-group:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }
        
        .info-label {
            font-size: 0.85rem;
            color: #64748b;
            margin-bottom: 0.25rem;
        }
        
        .info-value {
            font-size: 1rem;
            color: #1e293b;
            font-weight: 500;
        }
        
        .logout-btn {
            width: 100%;
            padding: 0.8rem 1rem;
            background: #ef4444;
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 1.5rem;
        }
        
        .logout-btn:hover {
            background: #dc2626;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .main-content {
            flex: 2;
        }
        
        .section {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05);
            border: 1px solid #e2e8f0;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e293b;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .section-title i {
            color: #0ea5e9;
        }
        
        .btn {
            padding: 0.6rem 1.2rem;
            background: #0ea5e9;
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn:hover {
            background: #0284c7;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .form-group {
            margin-bottom: 1.2rem;
        }
        
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #1e293b;
        }
        
        .form-input {
            width: 100%;
            padding: 0.9rem 1rem;
            border: 1px solid #cbd5e1;
            border-radius: 0.5rem;
            font-size: 1rem;
            transition: all 0.2s;
            background: white;
            color: #1e293b;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #0ea5e9;
            box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.2);
        }
        
        .grid-cols-2 {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
        
        .security-alert {
            background: #fffbeb;
            border-left: 4px solid #f59e0b;
            padding: 1rem;
            border-radius: 0.5rem;
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .alert-icon {
            color: #f59e0b;
            font-size: 1.2rem;
        }
        
        /* Toast Notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #10b981;
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            z-index: 1000;
            transform: translateX(400px);
            opacity: 0;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .toast.show {
            transform: translateX(0);
            opacity: 1;
        }
        
        .toast.hide {
            transform: translateX(400px);
            opacity: 0;
        }
        
        /* Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        
        .modal {
            background: white;
            border-radius: 1rem;
            padding: 2rem;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
            transform: scale(0.9) translateY(-20px);
            transition: transform 0.3s ease;
        }
        
        .modal-overlay.show .modal {
            transform: scale(1) translateY(0);
        }
        
        .modal-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }
        
        .modal-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1e293b;
        }
        
        .modal-content {
            color: #64748b;
            margin-bottom: 2rem;
            line-height: 1.6;
        }
        
        .modal-actions {
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
        }
        
        .btn-cancel {
            padding: 0.6rem 1.2rem;
            background: #e2e8f0;
            color: #64748b;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-cancel:hover {
            background: #cbd5e1;
        }
        
        .btn-danger {
            padding: 0.6rem 1.2rem;
            background: #ef4444;
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-danger:hover {
            background: #dc2626;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .error-message {
            font-size: 0.85rem;
            margin-top: 0.4rem;
            padding: 0.5rem;
            border-radius: 0.375rem;
            display: none;
            color: #ef4444;
            background: #fef2f2;
            border: 1px solid #fecaca;
        }
        
        .password-strength {
            height: 5px;
            background: #e2e8f0;
            border-radius: 3px;
            margin-top: 0.4rem;
            overflow: hidden;
        }
        
        .strength-meter {
            height: 100%;
            width: 0;
            background: #ef4444;
            transition: width 0.3s, background 0.3s;
        }
        
        .password-requirements {
            margin-top: 0.4rem;
            color: #64748b;
            font-size: 0.75rem;
        }
        
        .requirement {
            display: flex;
            align-items: center;
            margin-bottom: 0.2rem;
        }
        
        .requirement i {
            margin-right: 0.4rem;
            font-size: 0.65rem;
            width: 12px;
            color: #64748b;
            transition: color 0.3s ease;
        }
        
        .requirement.met i {
            color: #10b981;
        }
        
        @media (max-width: 768px) {
            .profile-content {
                flex-direction: column;
            }
            
            .profile-sidebar {
                max-width: 100%;
            }
            
            .grid-cols-2 {
                grid-template-columns: 1fr;
            }
            
            .header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .user-info {
                justify-content: center;
            }
            
            .toast {
                right: 10px;
                left: 10px;
                transform: translateY(-100px);
            }
            
            .toast.show {
                transform: translateY(0);
            }
            
            .toast.hide {
                transform: translateY(-100px);
            }
            
            .modal {
                margin: 1rem;
                padding: 1.5rem;
            }
            
            .modal-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <%
        // Génération de données aléatoires pour les informations manquantes
        const phoneNumbers = [
            '+33 1 23 45 67 89',
            '+33 1 42 56 78 90',
            '+33 1 56 78 90 12',
            '+33 1 67 89 01 23',
            '+33 1 78 90 12 34',
            '+33 1 89 01 23 45',
            '+33 1 90 12 34 56',
            '+33 1 01 23 45 67'
        ];
        
        const companies = [
            'TechCorp Solutions',
            'Retail Innovations SAS',
            'Digital Commerce SA',
            'E-Store Systems',
            'StoreFlow Technologies',
            'SmartRetail Group',
            'Commerce Plus SARL',
            'RetailTech France'
        ];
        
        const positions = [
            'Administrateur système',
            'Responsable IT',
            'Chef de projet digital',
            'Directeur technique',
            'Consultant e-commerce',
            'Responsable infrastructure',
            'Architecte logiciel',
            'Lead développeur'
        ];
        
        // Sélection aléatoire basée sur l'ID utilisateur pour cohérence
        const phoneIndex = user.id % phoneNumbers.length;
        const companyIndex = user.id % companies.length;
        const positionIndex = user.id % positions.length;
        
        const randomPhone = phoneNumbers[phoneIndex];
        const randomCompany = companies[companyIndex];
        const randomPosition = positions[positionIndex];
        
        // Génération des initiales
        const initials = user.firstname.charAt(0).toUpperCase() + user.lastname.charAt(0).toUpperCase();
        
        // Formatage de la date de membre depuis
        const memberSinceDate = new Date(user.createdAt).toLocaleDateString('fr-FR', {
            day: 'numeric',
            month: 'long', 
            year: 'numeric'
        });
        
        // Calcul des jours depuis la dernière connexion
        const lastLoginDays = Math.floor((new Date() - new Date(user.lastLogin)) / (1000 * 60 * 60 * 24));
        %>
        
        <!-- En-tête simplifiée -->
        <div class="header">
            <div class="logo">
                <div class="logo-icon">
                    <i data-lucide="store"></i>
                </div>
                <div class="logo-text">AmaZup</div>
            </div>
            
            <div class="user-info">
                <div class="user-avatar"><%= initials %></div>
                <div>
                    <div class="info-value" style="color: #1e293b; font-weight: 600;"><%= user.firstname %> <%= user.lastname %></div>
                    <div class="info-label" style="color: #64748b;"><%= user.roles?.includes("admin") ? "Administrateur" : "Utilisateur" %></div>
                </div>
            </div>
        </div>
        
        <!-- Contenu principal -->
        <div class="profile-content">
            <!-- Barre latérale -->
            <div class="profile-sidebar">
                <!-- Carte de profil -->
                <div class="profile-card">
                    <div class="card-header">
                        <div class="profile-avatar"><%= initials %></div>
                        <div class="profile-name"><%= user.firstname %> <%= user.lastname %></div>
                        <div class="profile-role"><%= randomPosition %></div>
                    </div>
                    <div class="card-body">
                        <div class="info-group">
                            <div class="info-label">Email</div>
                            <div class="info-value"><%= user.email %></div>
                        </div>
                        
                        <div class="info-group">
                            <div class="info-label">Téléphone</div>
                            <div class="info-value"><%= randomPhone %></div>
                        </div>
                        
                        <div class="info-group">
                            <div class="info-label">Société</div>
                            <div class="info-value"><%= randomCompany %></div>
                        </div>
                        
                        <div class="info-group">
                            <div class="info-label">Membre depuis</div>
                            <div class="info-value"><%= memberSinceDate %></div>
                        </div>
                        
                        <!-- Bouton de déconnexion -->
                        <button class="logout-btn">
                            <i data-lucide="log-out"></i>
                            Déconnexion
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Contenu principal -->
            <div class="main-content">
                <!-- Section d'édition de profil -->
                <div class="section">
                    <div class="section-header">
                        <h2 class="section-title">
                            <i data-lucide="user-pen"></i>
                            Informations du profil
                        </h2>
                        <button class="btn" id="saveProfileBtn">
                            <i data-lucide="save"></i>
                            Enregistrer
                        </button>
                    </div>
                    
                    <div class="security-alert">
                        <div class="alert-icon">
                            <i data-lucide="alert-circle"></i>
                        </div>
                        <div class="alert-content">
                            <h4>Votre compte est sécurisé</h4>
                            <p>Dernière connexion: <%= lastLoginDays === 0 ? 'aujourd\'hui' : 'il y a ' + lastLoginDays + ' jour' + (lastLoginDays > 1 ? 's' : '') %></p>
                        </div>
                    </div>
                    
                    <form id="profileForm">
                        <div class="grid-cols-2">
                            <div class="form-group">
                                <label class="form-label" for="firstName">Prénom</label>
                                <input type="text" class="form-input" id="firstName" value="<%= user.firstname %>">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="lastName">Nom</label>
                                <input type="text" class="form-input" id="lastName" value="<%= user.lastname %>">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" for="email">Adresse email</label>
                            <input type="email" class="form-input" id="email" value="<%= user.email %>">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" for="phone">Téléphone</label>
                            <input type="text" class="form-input" id="phone" value="<%= randomPhone %>">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" for="company">Société</label>
                            <input type="text" class="form-input" id="company" value="<%= randomCompany %>">
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" for="position">Poste</label>
                            <input type="text" class="form-input" id="position" value="<%= randomPosition %>">
                        </div>
                    </form>
                </div>
                
                <!-- Section de sécurité -->
                <div class="section">
                    <div class="section-header">
                        <h2 class="section-title">
                            <i data-lucide="shield"></i>
                            Sécurité du compte
                        </h2>
                        <button class="btn" id="updatePasswordBtn">
                            <i data-lucide="lock"></i>
                            Mettre à jour
                        </button>
                    </div>
                    
                    <form id="passwordForm">
                        <div class="grid-cols-2">
                            <div class="form-group">
                                <label class="form-label" for="currentPassword">Mot de passe actuel</label>
                                <div style="position: relative;">
                                    <input type="password" class="form-input" id="currentPassword" required style="padding-right: 3rem;">
                                    <span style="position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); cursor: pointer; color: #64748b; transition: color 0.2s;" onclick="togglePasswordVisibility('currentPassword', this)">
                                        <i data-lucide="eye"></i>
                                    </span>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="newPassword">Nouveau mot de passe</label>
                                <div style="position: relative;">
                                    <input type="password" class="form-input" id="newPassword" required style="padding-right: 3rem;">
                                    <span style="position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); cursor: pointer; color: #64748b; transition: color 0.2s;" onclick="togglePasswordVisibility('newPassword', this)">
                                        <i data-lucide="eye"></i>
                                    </span>
                                </div>
                                <div class="password-strength">
                                    <div class="strength-meter" id="passwordStrength"></div>
                                </div>
                                <div class="password-requirements">
                                    <div class="requirement" id="reqLength"><i data-lucide="circle"></i> 8 caractères minimum</div>
                                    <div class="requirement" id="reqNumber"><i data-lucide="circle"></i> Au moins un chiffre</div>
                                    <div class="requirement" id="reqUpper"><i data-lucide="circle"></i> Au moins une majuscule</div>
                                    <div class="requirement" id="reqSpecial"><i data-lucide="circle"></i> Au moins un caractère spécial</div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="confirmPassword">Confirmer le mot de passe</label>
                                <div style="position: relative;">
                                    <input type="password" class="form-input" id="confirmPassword" required style="padding-right: 3rem;">
                                    <span style="position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); cursor: pointer; color: #64748b; transition: color 0.2s;" onclick="togglePasswordVisibility('confirmPassword', this)">
                                        <i data-lucide="eye"></i>
                                    </span>
                                </div>
                                <div class="error-message" id="passwordError"></div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" style="margin-top: 1rem;">Authentification à deux facteurs</label>
                            <p style="color: #64748b; font-size: 0.9rem; margin-top: 0.25rem;">
                                <% if (user.isActive) { %>
                                    <i data-lucide="check-circle" style="color: #10b981; width: 16px; height: 16px; vertical-align: text-bottom;"></i>
                                    Activée
                                <% } else { %>
                                    <i data-lucide="x-circle" style="color: #ef4444; width: 16px; height: 16px; vertical-align: text-bottom;"></i>
                                    Désactivée
                                <% } %>
                            </p>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer"></div>
    
    <!-- Modal de confirmation de déconnexion -->
    <div class="modal-overlay" id="logoutModal">
        <div class="modal">
            <div class="modal-header">
                <i data-lucide="alert-triangle" style="color: #f59e0b;"></i>
                <h3 class="modal-title">Confirmer la déconnexion</h3>
            </div>
            <div class="modal-content">
                Êtes-vous sûr de vouloir vous déconnecter ? Vous devrez vous reconnecter pour accéder à votre compte.
            </div>
            <div class="modal-actions">
                <button class="btn-cancel" id="cancelLogout">
                    <i data-lucide="x"></i>
                    Annuler
                </button>
                <button class="btn-danger" id="confirmLogout">
                    <i data-lucide="log-out"></i>
                    Se déconnecter
                </button>
            </div>
        </div>
    </div>

    <script>
        // Variables globales pour stocker les données de changement de mot de passe
        let passwordChangeData = {
            email: '<%= user.email %>',
            oldPassword: '',
            newPassword: '',
            confirmNewPassword: '',
            hashOldPassword: '',
            hashNewPassword: '',
            hashNewConfirmPassword: '',
            newSalt: '',
            errorMessage: ''
        };

        // Initialiser les icônes Lucide
        document.addEventListener('DOMContentLoaded', function() {
            try {
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            } catch (error) {
                console.log('Lucide initialization failed');
            }
            
            // Initialiser les écouteurs de mot de passe
            initPasswordListeners();
            
            // Vérifier s'il y a une erreur de déconnexion à afficher
            if (sessionStorage.getItem('logoutError') === 'true') {
                sessionStorage.removeItem('logoutError');
                showToast('Erreur lors de la déconnexion', 'error');
            }
        });
        
        // Fonction pour initialiser les écouteurs de changement de mot de passe
        function initPasswordListeners() {
            const newPasswordField = document.getElementById('newPassword');
            if (newPasswordField) {
                newPasswordField.addEventListener('input', checkPasswordStrength);
            }
        }
        
        // Fonction pour vérifier la force du mot de passe (reprise de change-password)
        function checkPasswordStrength() {
            const password = document.getElementById('newPassword').value;
            const strengthBar = document.getElementById('passwordStrength');
            const requirements = {
                reqLength: password.length >= 8,
                reqNumber: /\d/.test(password),
                reqUpper: /[A-Z]/.test(password),
                reqSpecial: /[!@#$%^&*(),.?":{}|<>]/.test(password)
            };
            
            let strength = 0;
            
            // Update requirements and calculate strength
            Object.keys(requirements).forEach(reqId => {
                const element = document.getElementById(reqId);
                if (element) {
                    element.classList.toggle('met', requirements[reqId]);
                    if (requirements[reqId]) strength += 25;
                }
            });
            
            // Update strength bar
            if (strengthBar) {
                strengthBar.style.width = strength + '%';
                
                if (strength < 50) {
                    strengthBar.style.background = '#ef4444';
                } else if (strength < 75) {
                    strengthBar.style.background = '#f59e0b';
                } else {
                    strengthBar.style.background = '#10b981';
                }
            }
        }
        
        // Fonction pour afficher les erreurs de mot de passe
        function showPasswordError(message) {
            passwordChangeData.errorMessage = message;
            const errorElement = document.getElementById('passwordError');
            if (!errorElement) return;
            
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            
            // Aussi afficher un toast d'erreur
            showToast('Erreur lors du changement de mot de passe', 'error');
            
            setTimeout(() => {
                errorElement.style.display = 'none';
            }, 5000);
        }
        
        // Fonction pour basculer la visibilité du mot de passe
        function togglePasswordVisibility(fieldId, toggleElement) {
            const passwordField = document.getElementById(fieldId);
            const eyeIcon = toggleElement.querySelector('i');
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                eyeIcon.setAttribute('data-lucide', 'eye-off');
                toggleElement.style.color = '#0ea5e9';
            } else {
                passwordField.type = 'password';
                eyeIcon.setAttribute('data-lucide', 'eye');
                toggleElement.style.color = '#64748b';
            }
            
            // Réinitialiser les icônes Lucide
            lucide.createIcons();
        }
        
        // Fonction pour mettre à jour les informations de base du profil
        async function handleProfileUpdate() {
            const firstNameField = document.getElementById('firstName');
            const lastNameField = document.getElementById('lastName');
            const emailField = document.getElementById('email');
            
            // Récupération des valeurs
            const firstName = firstNameField.value.trim();
            const lastName = lastNameField.value.trim();
            const email = emailField.value.trim();
            
            // Validation basique
            if (!firstName || !lastName || !email) {
                showToast('Veuillez remplir tous les champs obligatoires', 'error');
                return false;
            }
            
            // Validation email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                showToast('Veuillez saisir une adresse email valide', 'error');
                return false;
            }
            
            try {
                // Appel de l'API PUT /api/v1/user/:id
                const response = await fetch(`/api/v1/user/<%= user.id %>`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        firstname: firstName,
                        lastname: lastName,
                        email: email
                    })
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Erreur lors de la mise à jour du profil');
                }
                
                // Succès - afficher le toast de succès
                showToast('Profil mis à jour avec succès !', 'success');
                return true;
                
            } catch (error) {
                console.error('Erreur:', error);
                showToast('Erreur lors de la mise à jour du profil', 'error');
                return false;
            }
        }
        
        // Fonction pour gérer le changement de mot de passe (reprise de change-password)
        async function handlePasswordChange() {
            const currentPasswordField = document.getElementById('currentPassword');
            const newPasswordField = document.getElementById('newPassword');
            const confirmPasswordField = document.getElementById('confirmPassword');
            
            // Récupération des valeurs
            passwordChangeData.oldPassword = currentPasswordField.value;
            passwordChangeData.newPassword = newPasswordField.value;
            passwordChangeData.confirmNewPassword = confirmPasswordField.value;
            
            // Validation basique
            if (!passwordChangeData.oldPassword || !passwordChangeData.newPassword || !passwordChangeData.confirmNewPassword) {
                // showPasswordError('Veuillez remplir tous les champs');
                showToast('Veuillez remplir tous les champs', 'error');
                return false;
            }
            
            if (passwordChangeData.newPassword !== passwordChangeData.confirmNewPassword) {
                // showPasswordError('Les nouveaux mots de passe ne correspondent pas');
                showToast('Les nouveaux mots de passe ne correspondent pas', 'error');
                return false;
            }
            
            // Vérification de la force du mot de passe
            const strengthBar = document.getElementById('passwordStrength');
            if (strengthBar && strengthBar.style.width !== '100%') {
                // showPasswordError('Veuillez créer un mot de passe plus fort');
                showToast('Veuillez créer un mot de passe plus fort', 'error');
                return false;
            }
            
            try {
                // Étape 1: Appel de l'API signin
                const signinResponse = await fetch('/api/v1/auth/signin', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email: passwordChangeData.email })
                });
                
                if (!signinResponse.ok) {
                    throw new Error('Erreur lors de la récupération des données utilisateur');
                }
                
                const { salt, pow } = await signinResponse.json();
                
                // Étape 2: Calculer le proof of work
                const proof = (() => {
                    let proof = 0;
                    const prefix = "0".repeat(parseInt(pow.difficulty));
                    while (true) {
                        const hash = CryptoJS.SHA256(pow.challenge + proof).toString(CryptoJS.enc.Hex);
                        if (hash.startsWith(prefix)) {
                            return proof;
                        }
                        proof++;
                    }
                })();
                
                // Étape 3: Générer un nouveau salt et hasher les mots de passe
                passwordChangeData.newSalt = CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Hex);
                passwordChangeData.hashOldPassword = CryptoJS.SHA256(passwordChangeData.oldPassword + salt).toString(CryptoJS.enc.Hex);
                passwordChangeData.hashNewPassword = CryptoJS.SHA256(passwordChangeData.newPassword + passwordChangeData.newSalt).toString(CryptoJS.enc.Hex);
                passwordChangeData.hashNewConfirmPassword = CryptoJS.SHA256(passwordChangeData.confirmNewPassword + passwordChangeData.newSalt).toString(CryptoJS.enc.Hex);
                
                // Vérification que les mots de passe hachés correspondent
                if (passwordChangeData.hashNewPassword !== passwordChangeData.hashNewConfirmPassword) {
                    // showPasswordError('Erreur lors du hachage des mots de passe');
                    showToast('Erreur lors du hachage des mots de passe', 'error');
                    return false;
                }
                
                // Étape 4: Appel de l'API changePassword
                const changePasswordResponse = await fetch('/api/v1/auth/changePassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: passwordChangeData.email,
                        hashOldPassword: passwordChangeData.hashOldPassword,
                        hashNewPassword: passwordChangeData.hashNewPassword,
                        hashNewConfirmPassword: passwordChangeData.hashNewConfirmPassword,
                        newSalt: passwordChangeData.newSalt,
                        signature: pow.signature,
                        challenge: pow.challenge,
                        proof: proof
                    })
                });
                
                if (!changePasswordResponse.ok) {
                    const errorData = await changePasswordResponse.json();
                    throw new Error(errorData.message || 'Erreur lors du changement de mot de passe');
                }
                
                // Succès - vider les champs et afficher le toast
                document.getElementById('passwordForm').reset();
                showToast('Mot de passe mis à jour avec succès !', 'success');
                return true;
                
            } catch (error) {
                console.error('Erreur:', error);
                passwordChangeData.errorMessage = error.message;
                // showPasswordError('Erreur lors du changement de mot de passe: ' + error.message);
                showToast('Erreur lors du changement de mot de passe', 'error');
                return false;
            }
        }
        
        // Fonction pour afficher un toast
        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer');
            
            const toast = document.createElement('div');
            toast.className = 'toast';
            
            const iconMap = {
                success: 'check-circle',
                error: 'x-circle',
                warning: 'alert-triangle',
                info: 'info'
            };
            
            const colorMap = {
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b',
                info: '#0ea5e9'
            };
            
            toast.style.background = colorMap[type];
            toast.innerHTML = `
                <i data-lucide="${iconMap[type]}"></i>
                <span>${message}</span>
            `;
            
            toastContainer.appendChild(toast);
            
            // Initialiser l'icône
            lucide.createIcons();
            
            // Afficher le toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Masquer et supprimer le toast après 4 secondes
            setTimeout(() => {
                toast.classList.add('hide');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 4000);
        }
        
        // Fonction pour afficher la modal de déconnexion
        function showLogoutModal() {
            const modal = document.getElementById('logoutModal');
            modal.classList.add('show');
            lucide.createIcons();
        }
        
        // Fonction pour masquer la modal de déconnexion
        function hideLogoutModal() {
            const modal = document.getElementById('logoutModal');
            modal.classList.remove('show');
        }
        
        // Fonction pour définir l'état de chargement des boutons
        function setButtonLoadingState(button, loading, originalText) {
            if (loading) {
                button.disabled = true;
                button.innerHTML = '<i data-lucide="loader-2" style="animation: spin 1s linear infinite;"></i> En cours...';
                setTimeout(() => {
                    lucide.createIcons();
                }, 100);
            } else {
                button.disabled = false;
                button.innerHTML = originalText;
                lucide.createIcons();
            }
        }
        
        // Gestion du bouton de sauvegarde du profil
        document.getElementById('saveProfileBtn').addEventListener('click', async function(e) {
            e.preventDefault();
            const originalHTML = this.innerHTML;
            
            setButtonLoadingState(this, true, originalHTML);
            
            const success = await handleProfileUpdate();
            
            setButtonLoadingState(this, false, originalHTML);
            
            if (!success) {
                console.log('Échec de la mise à jour du profil');
            }
        });
        
        // Gestion du bouton de mise à jour du mot de passe
        document.getElementById('updatePasswordBtn').addEventListener('click', async function(e) {
            e.preventDefault();
            const originalHTML = this.innerHTML;
            
            setButtonLoadingState(this, true, originalHTML);
            
            const success = await handlePasswordChange();
            
            setButtonLoadingState(this, false, originalHTML);
            
            if (!success) {
                // L'erreur est déjà affichée dans handlePasswordChange
                console.log('Échec du changement de mot de passe');
            }
        });
        
        // Gestion de la déconnexion
        document.querySelector('.logout-btn').addEventListener('click', function() {
            showLogoutModal();
        });
        
        // Gestion des boutons de la modal
        document.getElementById('cancelLogout').addEventListener('click', function() {
            hideLogoutModal();
        });
        
        document.getElementById('confirmLogout').addEventListener('click', async function() {
            hideLogoutModal();
            
            // Afficher l'état de chargement
            document.body.innerHTML = `
                <div style="display:flex; justify-content:center; align-items:center; height:100vh; flex-direction:column; gap:2rem; background:#f8fafc;">
                    <div>
                        <i data-lucide="loader-2" style="font-size:3rem; color:#0ea5e9; animation: spin 1s linear infinite;"></i>
                    </div>
                    <h2 style="font-size:1.5rem; color:#1e293b;">Déconnexion en cours...</h2>
                </div>
            `;
            
            // Réinitialiser les icônes pour le loader
            setTimeout(() => {
                lucide.createIcons();
            }, 100);
            
            try {
                // Appel de l'API de déconnexion
                const response = await fetch('/api/v1/auth/logout', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Erreur lors de la déconnexion');
                }
                
                // Succès - rediriger vers la page d'accueil
                window.location.href = '/';
                
            } catch (error) {
                console.error('Erreur:', error);
                
                // Restaurer la page et afficher un toast d'erreur
                location.reload();
                
                // Le toast sera affiché après le rechargement via sessionStorage
                sessionStorage.setItem('logoutError', 'true');
            }
        });
        
        // Fermer la modal en cliquant sur l'overlay
        document.getElementById('logoutModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideLogoutModal();
            }
        });
        
        // Fermer la modal avec Escape
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                hideLogoutModal();
            }
        });
        
        // Animation de rotation pour le loader
        const style = document.createElement('style');
        style.innerHTML = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>