<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Produits - AmaZup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        border: "hsl(214.3 31.8% 91.4%)",
                        input: "hsl(214.3 31.8% 91.4%)",
                        ring: "hsl(222.2 84% 4.9%)",
                        background: "hsl(0 0% 100%)",
                        foreground: "hsl(222.2 84% 4.9%)",
                        primary: {
                            DEFAULT: "hsl(222.2 47.4% 11.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        secondary: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84.2% 60.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        muted: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(215.4 16.3% 46.9%)",
                        },
                        accent: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        success: {
                            DEFAULT: "hsl(142 76% 36%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        warning: {
                            DEFAULT: "hsl(45 93% 47%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        info: {
                            DEFAULT: "hsl(204 94% 49%)",
                            foreground: "hsl(210 40% 98%)",
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        
        .card {
            border-radius: 0.5rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            color: hsl(222.2 84% 4.9%);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        
        .card-header {
            display: flex;
            flex-direction: column;
            space-y: 1.5rem;
            padding: 1.5rem;
        }
        
        .card-content {
            padding: 1.5rem;
            padding-top: 0;
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
            padding: 0.5rem 1rem;
            height: 2.5rem;
            border: none;
        }
        
        .btn-primary {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-primary:hover {
            background: hsl(222.2 47.4% 11.2% / 0.9);
        }
        
        .btn-secondary {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .btn-secondary:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .btn-outline {
            background: transparent;
            color: hsl(222.2 84% 4.9%);
            border: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        .btn-outline:hover {
            background: hsl(210 40% 96%);
        }
        
        .btn-destructive {
            background: hsl(0 84.2% 60.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-destructive:hover {
            background: hsl(0 84.2% 60.2% / 0.9);
        }
        
        .btn-sm {
            height: 2rem;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
        }
        
        .input {
            display: flex;
            height: 2.5rem;
            width: 100%;
            border-radius: 0.375rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            transition: all 0.2s;
        }
        
        .input:focus {
            outline: none;
            border-color: hsl(222.2 84% 4.9%);
            box-shadow: 0 0 0 2px hsl(222.2 84% 4.9% / 0.2);
        }
        
        .textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            color: hsl(215.4 16.3% 46.9%);
            transition: all 0.2s;
            cursor: pointer;
            text-decoration: none;
        }
        
        .sidebar-item:hover {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .sidebar-item.active {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .badge {
            display: inline-flex;
            align-items: center;
            border-radius: 9999px;
            padding: 0.25rem 0.625rem;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-success {
            background: hsl(142 76% 36% / 0.1);
            color: hsl(142 76% 36%);
        }
        
        .badge-warning {
            background: hsl(45 93% 47% / 0.1);
            color: hsl(45 93% 47%);
        }
        
        .badge-destructive {
            background: hsl(0 84.2% 60.2% / 0.1);
            color: hsl(0 84.2% 60.2%);
        }
        
        .badge-info {
            background: hsl(204 94% 49% / 0.1);
            color: hsl(204 94% 49%);
        }
        
        .badge-secondary {
            background: hsl(210 40% 96%);
            color: hsl(215.4 16.3% 46.9%);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        th {
            background: hsl(210 40% 96%);
            font-weight: 600;
            font-size: 0.875rem;
            color: hsl(222.2 84% 4.9%);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        tbody tr:hover {
            background: hsl(210 40% 96% / 0.5);
        }
        
        .sortable {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            width: 100%;
            max-width: 600px;
            margin: 1rem;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9) translateY(-20px);
            transition: transform 0.3s ease;
        }
        
        .modal-overlay.show .modal-content {
            transform: scale(1) translateY(0);
        }
        
        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 0.375rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(210 40% 96%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }
    </style>
</head>
<body class="bg-muted/30">
    <!-- Sidebar -->
    <aside class="fixed left-0 top-0 h-full w-64 bg-background border-r border-border sidebar-transition z-50">
      <!-- Logo -->
      <div class="flex items-center px-6 py-4 border-b border-border">
          <div class="flex items-center justify-center w-8 h-8 bg-primary rounded-md mr-3">
              <i data-lucide="store" class="w-4 h-4 text-primary-foreground"></i>
          </div>
          <span class="text-xl font-bold text-foreground">AmaZup</span>
      </div>
      
      <!-- User Profile -->
      <div class="px-6 py-4 border-b border-border">
          <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
                  <i data-lucide="user" class="w-5 h-5 text-primary"></i>
              </div>
              <div>
                  <p class="font-medium text-foreground">Admin</p>
                  <p class="text-sm text-muted-foreground">admin@amazup.shop</p>
              </div>
          </div>
      </div>
      
      <!-- Navigation -->
      <nav class="px-4 py-4">
          <div class="space-y-2">
              <a href="/admin" class="sidebar-item" data-page="dashboard">
                  <i data-lucide="layout-dashboard" class="w-4 h-4 mr-3"></i>
                  Tableau de bord
              </a>
              
              <a href="/admin/stores" class="sidebar-item" data-page="stores">
                  <i data-lucide="store" class="w-4 h-4 mr-3"></i>
                  Magasins
              </a>
              
              <a href="#" class="sidebar-item active" data-page="products">
                  <i data-lucide="package" class="w-4 h-4 mr-3"></i>
                  Produits
              </a>
              
              <a href="/admin/categories" class="sidebar-item" data-page="categories">
                  <i data-lucide="tag" class="w-4 h-4 mr-3"></i>
                  Catégories
              </a>
              
              <a href="/admin/stocks" class="sidebar-item" data-page="inventory">
                  <i data-lucide="warehouse" class="w-4 h-4 mr-3"></i>
                  Stocks
              </a>
              
              <a href="/admin/transfers" class="sidebar-item" data-page="transfers">
                  <i data-lucide="truck" class="w-4 h-4 mr-3"></i>
                  Transferts
              </a>
              
              <a href="/admin/users" class="sidebar-item" data-page="users">
                  <i data-lucide="users" class="w-4 h-4 mr-3"></i>
                  Utilisateurs
              </a>
          </div>
          
          <div class="mt-8 pt-4 border-t border-border">
              <a href="/logout" class="sidebar-item text-destructive hover:bg-destructive/10 hover:text-destructive">
                  <i data-lucide="log-out" class="w-4 h-4 mr-3"></i>
                  Se déconnecter
              </a>
          </div>
      </nav>
  </aside>

    <!-- Main Content -->
    <main class="ml-64 min-h-screen">
        <!-- Header -->
        <header class="bg-background border-b border-border px-6 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-foreground">Gestion des Produits</h1>
                    <p class="text-muted-foreground">Gérez votre catalogue de produits</p>
                </div>
                
                <div class="flex items-center space-x-4">
                    <button class="btn btn-primary" onclick="openProductModal()">
                        <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                        Ajouter un produit
                    </button>
                    
                    <div class="relative">
                        <button class="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                            <i data-lucide="bell" class="w-4 h-4 text-muted-foreground"></i>
                        </button>
                        <span class="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full"></span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Products Management Content -->
        <div class="p-6">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Total Produits</p>
                                <p class="text-2xl font-bold" id="totalProducts"><%= productCount %></p>
                            </div>
                            <div class="w-12 h-12 bg-info/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="package" class="w-6 h-6 text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Catégories</p>
                                <p class="text-2xl font-bold" id="totalCategories"><%= categoryCount %></p>
                            </div>
                            <div class="w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="tag" class="w-6 h-6 text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Prix Moyen</p>
                                <p class="text-2xl font-bold" id="avgPrice">
                                    <% 
                                    const avgPrice = aggregatedProducts.length > 0 ? 
                                        aggregatedProducts.reduce((sum, p) => sum + p.price, 0) / aggregatedProducts.length : 0;
                                    %>
                                    <%= avgPrice.toFixed(2) %>€
                                </p>
                            </div>
                            <div class="w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="euro" class="w-6 h-6 text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Produit le Plus Cher</p>
                                <p class="text-sm font-bold" id="mostExpensive">
                                    <% 
                                    const mostExpensive = aggregatedProducts.reduce((max, p) => 
                                        p.price > (max?.price || 0) ? p : max, 
                                        aggregatedProducts[0] || null
                                    );
                                    %>
                                    <%= mostExpensive ? mostExpensive.name : '-' %>
                                </p>
                            </div>
                            <div class="w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="trending-up" class="w-6 h-6 text-destructive"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Filters and Search -->
            <div class="card mb-6">
                <div class="card-content" style="padding: 1.5rem;">
                    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
                        <div class="flex flex-col sm:flex-row gap-4 flex-1">
                            <!-- Search -->
                            <div class="relative flex-1 max-w-md">
                                <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground"></i>
                                <input type="text" class="input pl-10" placeholder="Rechercher un produit..." id="searchInput">
                            </div>
                            
                            <!-- Category Filter -->
                            <select class="input select w-48" id="categoryFilter">
                                <option value="">Toutes les catégories</option>
                                <!-- Categories will be populated by JavaScript -->
                            </select>
                        </div>
                        
                        <div class="flex items-center gap-4">
                            <!-- Results per page -->
                            <div class="flex items-center gap-2">
                                <span class="text-sm text-muted-foreground">Afficher:</span>
                                <select class="input select w-20" id="perPageSelect">
                                    <option value="5">5</option>
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            
                            <!-- Export -->
                            <button class="btn btn-outline">
                                <i data-lucide="download" class="w-4 h-4 mr-2"></i>
                                Exporter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Products Table -->
            <div class="card">
                <div class="overflow-x-auto">
                    <table id="productsTable">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th class="sortable" data-sort="name">
                                    <div class="flex items-center gap-2">
                                        Nom du produit
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="category">
                                    <div class="flex items-center gap-2">
                                        Catégorie
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="price">
                                    <div class="flex items-center gap-2">
                                        Prix
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="productsTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="flex items-center justify-between p-4 border-t border-border">
                    <div class="text-sm text-muted-foreground">
                        Affichage de <span id="showingFrom">1</span> à <span id="showingTo">10</span> sur <span id="totalResults">0</span> résultats
                    </div>
                    
                    <div class="flex items-center gap-2">
                        <button class="btn btn-outline btn-sm" id="prevPage" disabled>
                            <i data-lucide="chevron-left" class="w-4 h-4"></i>
                        </button>
                        
                        <div class="flex items-center gap-1" id="paginationNumbers">
                            <!-- Pagination numbers will be generated by JavaScript -->
                        </div>
                        
                        <button class="btn btn-outline btn-sm" id="nextPage">
                            <i data-lucide="chevron-right" class="w-4 h-4"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Product Modal (Add/Edit) -->
    <div class="modal-overlay" id="productModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground" id="modalTitle">Ajouter un produit</h2>
                <button class="btn btn-outline btn-sm" onclick="closeProductModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <form id="productForm">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Nom du produit</label>
                        <input type="text" class="input" id="productName" required>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Description</label>
                        <textarea class="input textarea" id="productDescription" rows="3" placeholder="Description du produit"></textarea>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Prix (€)</label>
                            <input type="number" class="input" id="productPrice" step="0.01" min="0" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Catégorie</label>
                            <select class="input select" id="productCategory" required>
                                <option value="">Sélectionner une catégorie</option>
                                <!-- Categories will be populated by JavaScript -->
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" class="btn btn-outline" onclick="closeProductModal()">Annuler</button>
                    <button type="submit" class="btn btn-primary" id="submitButton">
                        <i data-lucide="plus" class="w-4 h-4 mr-2" id="submitIcon"></i>
                        <span id="submitButtonText">Ajouter</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- View Product Modal -->
    <div class="modal-overlay" id="viewProductModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground">Détails du produit</h2>
                <button class="btn btn-outline btn-sm" onclick="closeViewProductModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <div class="space-y-6">
                <div class="flex items-center gap-4">
                    <div class="product-image" id="viewProductImage">📦</div>
                    <div>
                        <h3 class="text-lg font-semibold" id="viewProductName"></h3>
                        <p class="text-muted-foreground" id="viewProductCategory"></p>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Prix</label>
                        <p class="text-lg font-bold text-success" id="viewProductPrice"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">ID</label>
                        <p class="text-sm font-mono" id="viewProductId"></p>
                    </div>
                    
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Description</label>
                        <p class="text-sm" id="viewProductDescription"></p>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3">
                    <button type="button" class="btn btn-outline" onclick="closeViewProductModal()">Fermer</button>
                    <button type="button" class="btn btn-secondary" onclick="editProductFromView()">
                        <i data-lucide="edit" class="w-4 h-4 mr-2"></i>
                        Modifier
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal-overlay" id="deleteModal">
        <div class="modal-content max-w-md">
            <div class="flex items-center gap-3 mb-4">
                <div class="w-12 h-12 bg-destructive/10 rounded-full flex items-center justify-center">
                    <i data-lucide="alert-triangle" class="w-6 h-6 text-destructive"></i>
                </div>
                <div>
                    <h2 class="text-lg font-bold text-foreground">Confirmer la suppression</h2>
                    <p class="text-sm text-muted-foreground">Cette action est irréversible</p>
                </div>
            </div>
            
            <div class="mb-6">
                <p class="text-sm text-foreground">
                    Êtes-vous sûr de vouloir supprimer le produit <span class="font-semibold" id="deleteProductName"></span> ?
                </p>
                <p class="text-sm text-muted-foreground mt-2">
                    Toutes les données associées à ce produit seront définitivement supprimées.
                </p>
            </div>
            
            <div class="flex justify-end gap-3">
                <button type="button" class="btn btn-outline" onclick="closeDeleteModal()">Annuler</button>
                <button type="button" class="btn btn-destructive" onclick="confirmDelete()" id="deleteButton">
                    <i data-lucide="trash-2" class="w-4 h-4 mr-2"></i>
                    Supprimer
                </button>
            </div>
        </div>
    </div>

    <!-- Include Toast Partials -->
    <%- include('../partials/toasts') %>

    <script>
        // Configuration de l'API
        const API_BASE_URL = 'http://localhost/api/v1';
        
        // Données produits provenant du serveur
        const productsData = <%- JSON.stringify(aggregatedProducts) %>;
        
        // Extraire les catégories uniques des produits
        const categoriesData = {};
        const categoryColors = ['info', 'success', 'warning', 'destructive', 'secondary'];
        
        productsData.forEach((product, index) => {
            if (product.category && !categoriesData[product.category.id]) {
                const colorIndex = Object.keys(categoriesData).length % categoryColors.length;
                categoriesData[product.category.id] = {
                    id: product.category.id,
                    name: product.category.name,
                    description: product.category.description,
                    color: categoryColors[colorIndex]
                };
            }
        });

        // Enrichir les données des produits avec des informations aléatoirement générées
        productsData.forEach((product, index) => {
            // Ajouter des champs manquants si nécessaire
            product.sku = `SKU-${String(product.id).padStart(4, '0')}`;
            product.brand = ['Apple', 'Samsung', 'Nike', 'Adidas', 'Sony', 'LG', 'Bosch', 'Generic'][Math.floor(Math.random() * 8)];
            product.status = 'disponible'; // Par défaut, tous disponibles
            product.stock = Math.floor(Math.random() * 100) + 1;
            product.minStock = Math.floor(Math.random() * 10) + 1;
            product.createdAt = new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString();
            product.updatedAt = new Date().toISOString();
        });

        let currentPage = 1;
        let itemsPerPage = 10;
        let sortField = null;
        let sortDirection = 'asc';
        let filteredData = [...productsData];
        let editingProductId = null;
        let deletingProductId = null;
        let viewingProductId = null;

        // Service Product
        class ProductService {
            constructor() {
                this.baseUrl = API_BASE_URL;
            }
            
            async createProduct(data) {
                try {
                    const response = await fetch(`${this.baseUrl}/products`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la création');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async updateProduct(productId, data) {
                try {
                    const response = await fetch(`${this.baseUrl}/products/${productId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la modification');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async deleteProduct(productId) {
                try {
                    const response = await fetch(`${this.baseUrl}/products/${productId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la suppression');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }
        }

        const productService = new ProductService();

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing products page...');
            
            // Initialize Lucide icons
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
                console.log('Lucide icons initialized');
            }

            populateCategorySelects();
            renderTable();
            setupEventListeners();
            console.log('Products page initialized successfully');
        });

        function populateCategorySelects() {
            const categoryFilter = document.getElementById('categoryFilter');
            const productCategory = document.getElementById('productCategory');
            
            // Populate category filter
            Object.values(categoriesData).forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                categoryFilter.appendChild(option);
            });
            
            // Populate product category select
            Object.values(categoriesData).forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                productCategory.appendChild(option);
            });
        }

        function formatPrice(price) {
            return new Intl.NumberFormat('fr-FR', {
                style: 'currency',
                currency: 'EUR'
            }).format(price);
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }

        function setupEventListeners() {
            // Search
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(filterData, 300));
            }
            
            // Filters
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter) {
                categoryFilter.addEventListener('change', filterData);
            }
            
            const perPageSelect = document.getElementById('perPageSelect');
            if (perPageSelect) {
                perPageSelect.addEventListener('change', changeItemsPerPage);
            }
            
            // Sorting
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', () => sortTable(header.dataset.sort));
            });
            
            // Pagination
            const prevPage = document.getElementById('prevPage');
            if (prevPage) {
                prevPage.addEventListener('click', () => changePage(currentPage - 1));
            }
            
            const nextPage = document.getElementById('nextPage');
            if (nextPage) {
                nextPage.addEventListener('click', () => changePage(currentPage + 1));
            }
            
            // Form submission
            const productForm = document.getElementById('productForm');
            if (productForm) {
                productForm.addEventListener('submit', handleFormSubmit);
            }
            
            // Sidebar navigation
            document.querySelectorAll('.sidebar-item').forEach(item => {
                if (!item.getAttribute('href') || item.getAttribute('href') === '#') {
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));
                        this.classList.add('active');
                    });
                }
            });

            // Close modals when clicking outside
            document.querySelectorAll('.modal-overlay').forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeAllModals();
                    }
                });
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeAllModals();
                }
                if (e.ctrlKey && e.key === 'n') {
                    e.preventDefault();
                    openProductModal();
                }
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function filterData() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;

            filteredData = productsData.filter(product => {
                const matchesSearch = !searchTerm || 
                    product.name.toLowerCase().includes(searchTerm) ||
                    (product.description && product.description.toLowerCase().includes(searchTerm)) ||
                    (product.sku && product.sku.toLowerCase().includes(searchTerm)) ||
                    (product.brand && product.brand.toLowerCase().includes(searchTerm));
                
                const matchesCategory = !categoryFilter || product.categoryId.toString() === categoryFilter;

                return matchesSearch && matchesCategory;
            });

            currentPage = 1;
            renderTable();
        }

        function sortTable(field) {
            if (sortField === field) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortField = field;
                sortDirection = 'asc';
            }

            filteredData.sort((a, b) => {
                let aValue = a[field];
                let bValue = b[field];

                if (field === 'price') {
                    aValue = parseFloat(aValue) || 0;
                    bValue = parseFloat(bValue) || 0;
                } else if (field === 'category') {
                    aValue = a.category?.name || '';
                    bValue = b.category?.name || '';
                    aValue = aValue.toLowerCase();
                    bValue = bValue.toLowerCase();
                } else if (field === 'createdAt') {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                } else {
                    aValue = aValue ? aValue.toString().toLowerCase() : '';
                    bValue = bValue ? bValue.toString().toLowerCase() : '';
                }

                if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
                if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            renderTable();
            updateSortIcons();
        }

        function updateSortIcons() {
            document.querySelectorAll('.sortable i').forEach(icon => {
                icon.setAttribute('data-lucide', 'arrow-up-down');
            });

            if (sortField) {
                const activeHeader = document.querySelector(`[data-sort="${sortField}"] i`);
                if (activeHeader) {
                    activeHeader.setAttribute('data-lucide', sortDirection === 'asc' ? 'arrow-up' : 'arrow-down');
                }
            }

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function changeItemsPerPage() {
            itemsPerPage = parseInt(document.getElementById('perPageSelect').value);
            currentPage = 1;
            renderTable();
        }

        function changePage(page) {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (page >= 1 && page <= totalPages) {
                currentPage = page;
                renderTable();
            }
        }

        function renderTable() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);

            const tbody = document.getElementById('productsTableBody');
            tbody.innerHTML = '';

            pageData.forEach(product => {
                const category = categoriesData[product.categoryId] || product.category;
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="product-image">
                            📦
                        </div>
                    </td>
                    <td>
                        <div>
                            <div class="font-medium">${product.name}</div>
                            <div class="text-sm text-muted-foreground">SKU: ${product.sku || 'N/A'}</div>
                        </div>
                    </td>
                    <td>
                        <span class="badge badge-${category?.color || 'secondary'}">
                            ${category?.name || 'Sans catégorie'}
                        </span>
                    </td>
                    <td class="font-mono font-medium text-success">${formatPrice(product.price)}</td>
                    <td>
                        <div class="text-sm ${product.description ? '' : 'text-muted-foreground italic'}">
                            ${product.description ? 
                                (product.description.length > 50 ? 
                                    product.description.substring(0, 50) + '...' : 
                                    product.description
                                ) : 'Aucune description'
                            }
                        </div>
                    </td>
                    <td>
                        <div class="flex items-center gap-2">
                            <button class="btn btn-outline btn-sm" onclick="viewProduct(${product.id})" title="Voir">
                                <i data-lucide="eye" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-secondary btn-sm" onclick="editProduct(${product.id})" title="Modifier">
                                <i data-lucide="edit" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-destructive btn-sm" onclick="deleteProduct(${product.id})" title="Supprimer">
                                <i data-lucide="trash-2" class="w-3 h-3"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
            updatePagination();
        }

        function updatePagination() {
            const totalItems = filteredData.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage + 1;
            const endIndex = Math.min(startIndex + itemsPerPage - 1, totalItems);

            // Update showing text
            document.getElementById('showingFrom').textContent = totalItems > 0 ? startIndex : 0;
            document.getElementById('showingTo').textContent = totalItems > 0 ? endIndex : 0;
            document.getElementById('totalResults').textContent = totalItems;

            // Update pagination buttons
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;

            // Generate pagination numbers
            const paginationContainer = document.getElementById('paginationNumbers');
            paginationContainer.innerHTML = '';

            if (totalPages <= 7) {
                for (let i = 1; i <= totalPages; i++) {
                    createPageButton(i, paginationContainer);
                }
            } else {
                createPageButton(1, paginationContainer);

                if (currentPage > 4) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                const start = Math.max(2, currentPage - 2);
                const end = Math.min(totalPages - 1, currentPage + 2);

                for (let i = start; i <= end; i++) {
                    createPageButton(i, paginationContainer);
                }

                if (currentPage < totalPages - 3) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                if (totalPages > 1) {
                    createPageButton(totalPages, paginationContainer);
                }
            }
        }

        function createPageButton(pageNumber, container) {
            const button = document.createElement('button');
            button.className = `btn btn-sm ${pageNumber === currentPage ? 'btn-primary' : 'btn-outline'}`;
            button.textContent = pageNumber;
            button.onclick = () => changePage(pageNumber);
            container.appendChild(button);
        }

        function openProductModal(productId = null) {
            editingProductId = productId;
            const modal = document.getElementById('productModal');
            const modalTitle = document.getElementById('modalTitle');
            const submitButton = document.getElementById('submitButtonText');
            const submitIcon = document.getElementById('submitIcon');
            const form = document.getElementById('productForm');

            if (productId) {
                const product = productsData.find(p => p.id === productId);
                if (product) {
                    modalTitle.textContent = 'Modifier le produit';
                    submitButton.textContent = 'Modifier';
                    submitIcon.setAttribute('data-lucide', 'save');
                    
                    // Fill form with product data
                    document.getElementById('productName').value = product.name;
                    document.getElementById('productDescription').value = product.description || '';
                    document.getElementById('productPrice').value = product.price;
                    document.getElementById('productCategory').value = product.categoryId;
                }
            } else {
                modalTitle.textContent = 'Ajouter un produit';
                submitButton.textContent = 'Ajouter';
                submitIcon.setAttribute('data-lucide', 'plus');
                form.reset();
            }

            modal.classList.add('show');
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function closeProductModal() {
            document.getElementById('productModal').classList.remove('show');
            editingProductId = null;
        }

        function viewProduct(productId) {
            viewingProductId = productId;
            const product = productsData.find(p => p.id === productId);
            if (product) {
                const category = categoriesData[product.categoryId] || product.category;
                
                document.getElementById('viewProductImage').textContent = '📦';
                document.getElementById('viewProductName').textContent = product.name;
                document.getElementById('viewProductCategory').textContent = category?.name || 'Sans catégorie';
                document.getElementById('viewProductPrice').textContent = formatPrice(product.price);
                document.getElementById('viewProductId').textContent = product.id;
                document.getElementById('viewProductDescription').textContent = product.description || 'Aucune description';
                
                document.getElementById('viewProductModal').classList.add('show');
            }
        }

        function closeViewProductModal() {
            document.getElementById('viewProductModal').classList.remove('show');
            viewingProductId = null;
        }

        function editProductFromView() {
            closeViewProductModal();
            openProductModal(viewingProductId);
        }

        function deleteProduct(productId) {
            deletingProductId = productId;
            const product = productsData.find(p => p.id === productId);
            if (product) {
                document.getElementById('deleteProductName').textContent = product.name;
                document.getElementById('deleteModal').classList.add('show');
            }
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.remove('show');
            deletingProductId = null;
        }

        async function confirmDelete() {
            if (!deletingProductId) return;
            
            const deleteButton = document.getElementById('deleteButton');
            const originalContent = deleteButton.innerHTML;
            
            // Set loading state
            deleteButton.disabled = true;
            deleteButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Suppression...';
            
            try {
                await productService.deleteProduct(deletingProductId);
                
                // Remove from local data
                const index = productsData.findIndex(p => p.id === deletingProductId);
                if (index !== -1) {
                    productsData.splice(index, 1);
                }
                
                showToast('Produit supprimé avec succès', 'success');
                updateStats();
                filterData();
                closeDeleteModal();
                
            } catch (error) {
                console.error('Erreur lors de la suppression:', error);
                showToast('Erreur lors de la suppression du produit', 'error');
            } finally {
                deleteButton.disabled = false;
                deleteButton.innerHTML = originalContent;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        }

        function closeAllModals() {
            closeProductModal();
            closeViewProductModal();
            closeDeleteModal();
        }

        async function handleFormSubmit(event) {
            event.preventDefault();
            
            const submitButton = document.getElementById('submitButton');
            const originalContent = submitButton.innerHTML;
            
            const name = document.getElementById('productName').value;
            const description = document.getElementById('productDescription').value;
            const price = parseFloat(document.getElementById('productPrice').value);
            const categoryId = parseInt(document.getElementById('productCategory').value);
            
            // Validate price
            if (price <= 0) {
                showToast('Le prix doit être supérieur à 0', 'error');
                return;
            }
            
            // Set loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Traitement...';
            
            try {
                if (editingProductId) {
                    // Update existing product
                    const productData = {
                        name: name,
                        description: description,
                        price: price,
                        categoryId: categoryId
                    };
                    
                    await productService.updateProduct(editingProductId, productData);
                    
                    // Update local data
                    const productIndex = productsData.findIndex(p => p.id === editingProductId);
                    if (productIndex !== -1) {
                        productsData[productIndex] = {
                            ...productsData[productIndex],
                            ...productData,
                            category: categoriesData[categoryId],
                            updatedAt: new Date().toISOString()
                        };
                    }
                    
                    showToast('Produit modifié avec succès', 'success');
                    
                } else {
                    // Create new product
                    const productData = {
                        name: name,
                        description: description,
                        price: price,
                        categoryId: categoryId
                    };
                    
                    const newProduct = await productService.createProduct(productData);
                    
                    // Add to local data
                    const productToAdd = {
                        id: newProduct.data.id,
                        name: name,
                        description: description,
                        price: price,
                        categoryId: categoryId,
                        category: categoriesData[categoryId],
                        sku: `SKU-${String(newProduct.data.id).padStart(4, '0')}`,
                        brand: 'Generic',
                        status: 'disponible',
                        stock: 0,
                        minStock: 1,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    };
                    
                    productsData.push(productToAdd);
                    showToast('Produit ajouté avec succès', 'success');
                }
                
                updateStats();
                filterData();
                closeProductModal();
                
            } catch (error) {
                console.error('Erreur lors de l\'opération:', error);
                showToast(error.message || 'Erreur lors de l\'opération', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalContent;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        }

        function updateStats() {
            document.getElementById('totalProducts').textContent = productsData.length;
            document.getElementById('totalCategories').textContent = Object.keys(categoriesData).length;
            
            // Calculate average price
            const avgPrice = productsData.length > 0 ? 
                productsData.reduce((sum, p) => sum + p.price, 0) / productsData.length : 0;
            document.getElementById('avgPrice').textContent = avgPrice.toFixed(2) + '€';
            
            // Find most expensive product
            const mostExpensive = productsData.reduce((max, p) => 
                p.price > (max?.price || 0) ? p : max, 
                productsData[0] || null
            );
            document.getElementById('mostExpensive').textContent = mostExpensive ? mostExpensive.name : '-';
        }

        function editProduct(productId) {
            openProductModal(productId);
        }
    </script>
</body>
</html>