<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Transferts - AmaZup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        border: "hsl(214.3 31.8% 91.4%)",
                        input: "hsl(214.3 31.8% 91.4%)",
                        ring: "hsl(222.2 84% 4.9%)",
                        background: "hsl(0 0% 100%)",
                        foreground: "hsl(222.2 84% 4.9%)",
                        primary: {
                            DEFAULT: "hsl(222.2 47.4% 11.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        secondary: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84.2% 60.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        muted: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(215.4 16.3% 46.9%)",
                        },
                        accent: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        success: {
                            DEFAULT: "hsl(142 76% 36%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        warning: {
                            DEFAULT: "hsl(45 93% 47%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        info: {
                            DEFAULT: "hsl(204 94% 49%)",
                            foreground: "hsl(210 40% 98%)",
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        
        .card {
            border-radius: 0.5rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            color: hsl(222.2 84% 4.9%);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        
        .card-header {
            display: flex;
            flex-direction: column;
            space-y: 1.5rem;
            padding: 1.5rem;
        }
        
        .card-content {
            padding: 1.5rem;
            padding-top: 0;
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
            padding: 0.5rem 1rem;
            height: 2.5rem;
            border: none;
        }
        
        .btn-primary {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-primary:hover {
            background: hsl(222.2 47.4% 11.2% / 0.9);
        }
        
        .btn-secondary {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .btn-secondary:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .btn-outline {
            background: transparent;
            color: hsl(222.2 84% 4.9%);
            border: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        .btn-outline:hover {
            background: hsl(210 40% 96%);
        }
        
        .btn-destructive {
            background: hsl(0 84.2% 60.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-destructive:hover {
            background: hsl(0 84.2% 60.2% / 0.9);
        }
        
        .btn-sm {
            height: 2rem;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
        }
        
        .input {
            display: flex;
            height: 2.5rem;
            width: 100%;
            border-radius: 0.375rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            transition: all 0.2s;
        }
        
        .input:focus {
            outline: none;
            border-color: hsl(222.2 84% 4.9%);
            box-shadow: 0 0 0 2px hsl(222.2 84% 4.9% / 0.2);
        }
        
        .textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            color: hsl(215.4 16.3% 46.9%);
            transition: all 0.2s;
            cursor: pointer;
            text-decoration: none;
        }
        
        .sidebar-item:hover {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .sidebar-item.active {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        th {
            background: hsl(210 40% 96%);
            font-weight: 600;
            font-size: 0.875rem;
            color: hsl(222.2 84% 4.9%);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        tbody tr:hover {
            background: hsl(210 40% 96% / 0.5);
        }
        
        .sortable {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            width: 100%;
            max-width: 800px;
            margin: 1rem;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9) translateY(-20px);
            transition: transform 0.3s ease;
        }
        
        .modal-overlay.show .modal-content {
            transform: scale(1) translateY(0);
        }

        .badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .badge-success {
            background: hsl(142 76% 36% / 0.1);
            color: hsl(142 76% 36%);
        }

        .badge-warning {
            background: hsl(45 93% 47% / 0.1);
            color: hsl(45 93% 47%);
        }

        .badge-destructive {
            background: hsl(0 84.2% 60.2% / 0.1);
            color: hsl(0 84.2% 60.2%);
        }

        .badge-info {
            background: hsl(204 94% 49% / 0.1);
            color: hsl(204 94% 49%);
        }

        .badge-secondary {
            background: hsl(210 40% 96%);
            color: hsl(215.4 16.3% 46.9%);
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .status-completed {
            background-color: hsl(142 76% 36%);
        }

        .status-pending {
            background-color: hsl(45 93% 47%);
        }

        .status-cancelled {
            background-color: hsl(0 84.2% 60.2%);
        }
    </style>
</head>
<body class="bg-muted/30">
    <!-- Sidebar -->
    <aside class="fixed left-0 top-0 h-full w-64 bg-background border-r border-border sidebar-transition z-50">
      <!-- Logo -->
      <div class="flex items-center px-6 py-4 border-b border-border">
          <div class="flex items-center justify-center w-8 h-8 bg-primary rounded-md mr-3">
              <i data-lucide="store" class="w-4 h-4 text-primary-foreground"></i>
          </div>
          <span class="text-xl font-bold text-foreground">AmaZup</span>
      </div>
      
      <!-- User Profile -->
      <div class="px-6 py-4 border-b border-border">
          <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
                  <i data-lucide="user" class="w-5 h-5 text-primary"></i>
              </div>
              <div>
                  <p class="font-medium text-foreground">Admin</p>
                  <p class="text-sm text-muted-foreground">admin@amazup.shop</p>
              </div>
          </div>
      </div>
      
      <!-- Navigation -->
      <nav class="px-4 py-4">
          <div class="space-y-2">
              <a href="/admin" class="sidebar-item" data-page="dashboard">
                  <i data-lucide="layout-dashboard" class="w-4 h-4 mr-3"></i>
                  Tableau de bord
              </a>
              
              <a href="/admin/stores" class="sidebar-item" data-page="stores">
                  <i data-lucide="store" class="w-4 h-4 mr-3"></i>
                  Magasins
              </a>
              
              <a href="/admin/products" class="sidebar-item" data-page="products">
                  <i data-lucide="package" class="w-4 h-4 mr-3"></i>
                  Produits
              </a>
              
              <a href="/admin/categories" class="sidebar-item" data-page="categories">
                  <i data-lucide="tag" class="w-4 h-4 mr-3"></i>
                  Catégories
              </a>
              
              <a href="/admin/stocks" class="sidebar-item" data-page="inventory">
                  <i data-lucide="warehouse" class="w-4 h-4 mr-3"></i>
                  Stocks
              </a>
              
              <a href="#" class="sidebar-item active" data-page="transfers">
                  <i data-lucide="truck" class="w-4 h-4 mr-3"></i>
                  Transferts
              </a>
              
              <a href="/admin/users" class="sidebar-item" data-page="users">
                  <i data-lucide="users" class="w-4 h-4 mr-3"></i>
                  Utilisateurs
              </a>
          </div>
          
          <div class="mt-8 pt-4 border-t border-border">
              <a href="/logout" class="sidebar-item text-destructive hover:bg-destructive/10 hover:text-destructive">
                  <i data-lucide="log-out" class="w-4 h-4 mr-3"></i>
                  Se déconnecter
              </a>
          </div>
      </nav>
  </aside>

    <!-- Main Content -->
    <main class="ml-64 min-h-screen">
        <!-- Header -->
        <header class="bg-background border-b border-border px-6 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-foreground">Historique des Transferts</h1>
                    <p class="text-muted-foreground">Consultez l'historique des transferts de stock entre magasins</p>
                </div>
                
                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <button class="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                            <i data-lucide="bell" class="w-4 h-4 text-muted-foreground"></i>
                        </button>
                        <span class="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full"></span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Transfers Management Content -->
        <div class="p-6">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Total Transferts</p>
                                <p class="text-2xl font-bold" id="totalTransfers"><%= transferCount %></p>
                            </div>
                            <div class="w-12 h-12 bg-info/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="truck" class="w-6 h-6 text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">En attente</p>
                                <p class="text-2xl font-bold" id="pendingTransfers">
                                    <% 
                                    const pendingTransfers = aggregatedTransfers.filter(t => t.status === 'pending').length;
                                    %>
                                    <%= pendingTransfers %>
                                </p>
                            </div>
                            <div class="w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="clock" class="w-6 h-6 text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Complétés</p>
                                <p class="text-2xl font-bold" id="completedTransfers">
                                    <% 
                                    const completedTransfers = aggregatedTransfers.filter(t => t.status === 'completed').length;
                                    %>
                                    <%= completedTransfers %>
                                </p>
                            </div>
                            <div class="w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="check-circle" class="w-6 h-6 text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Annulés</p>
                                <p class="text-2xl font-bold" id="cancelledTransfers">
                                    <% 
                                    const cancelledTransfers = aggregatedTransfers.filter(t => t.status === 'cancelled').length;
                                    %>
                                    <%= cancelledTransfers %>
                                </p>
                            </div>
                            <div class="w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="x-circle" class="w-6 h-6 text-destructive"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Filters and Search -->
            <div class="card mb-6">
                <div class="card-content" style="padding: 1.5rem;">
                    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
                        <div class="flex flex-col sm:flex-row gap-4 flex-1">
                            <!-- Search -->
                            <div class="relative flex-1 max-w-md">
                                <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground"></i>
                                <input type="text" class="input pl-10" placeholder="Rechercher un produit..." id="searchInput">
                            </div>
                            
                            <!-- Status Filter -->
                            <select class="input select w-48" id="statusFilter">
                                <option value="">Tous les statuts</option>
                                <option value="pending">En attente</option>
                                <option value="completed">Complété</option>
                                <option value="cancelled">Annulé</option>
                            </select>
                        </div>
                        
                        <div class="flex items-center gap-4">
                            <!-- Results per page -->
                            <div class="flex items-center gap-2">
                                <span class="text-sm text-muted-foreground">Afficher:</span>
                                <select class="input select w-20" id="perPageSelect">
                                    <option value="5">5</option>
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            
                            <!-- Export -->
                            <button class="btn btn-outline">
                                <i data-lucide="download" class="w-4 h-4 mr-2"></i>
                                Exporter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Transfers Table -->
            <div class="card">
                <div class="overflow-x-auto">
                    <table id="transfersTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th class="sortable" data-sort="product">
                                    <div class="flex items-center gap-2">
                                        Produit
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Magasin source</th>
                                <th>Magasin destination</th>
                                <th class="sortable" data-sort="quantity">
                                    <div class="flex items-center gap-2">
                                        Quantité
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="createdAt">
                                    <div class="flex items-center gap-2">
                                        Date création
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="status">
                                    <div class="flex items-center gap-2">
                                        Statut
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="transfersTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="flex items-center justify-between p-4 border-t border-border">
                    <div class="text-sm text-muted-foreground">
                        Affichage de <span id="showingFrom">1</span> à <span id="showingTo">10</span> sur <span id="totalResults">0</span> résultats
                    </div>
                    
                    <div class="flex items-center gap-2">
                        <button class="btn btn-outline btn-sm" id="prevPage" disabled>
                            <i data-lucide="chevron-left" class="w-4 h-4"></i>
                        </button>
                        
                        <div class="flex items-center gap-1" id="paginationNumbers">
                            <!-- Pagination numbers will be generated by JavaScript -->
                        </div>
                        
                        <button class="btn btn-outline btn-sm" id="nextPage">
                            <i data-lucide="chevron-right" class="w-4 h-4"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- View Transfer Modal -->
    <div class="modal-overlay" id="viewTransferModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground">Détails du transfert</h2>
                <button class="btn btn-outline btn-sm" onclick="closeViewTransferModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <div class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">ID Transfert</label>
                        <p class="text-lg font-bold" id="viewTransferId"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Statut</label>
                        <div id="viewTransferStatus"></div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Produit</label>
                        <p class="text-sm font-medium" id="viewTransferProduct"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Quantité</label>
                        <p class="text-lg font-bold text-info" id="viewTransferQuantity"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Magasin source</label>
                        <p class="text-sm" id="viewTransferSource"></p>
                    </div>
                    
                    <div>
                      <label class="block text-sm font-medium text-muted-foreground mb-1">Magasin destination</label>
                      <p class="text-sm" id="viewTransferDestination"></p>
                  </div>
                  
                  <div>
                      <label class="block text-sm font-medium text-muted-foreground mb-1">Date de création</label>
                      <p class="text-sm" id="viewTransferCreated"></p>
                  </div>
                  
                  <div>
                      <label class="block text-sm font-medium text-muted-foreground mb-1">Dernière mise à jour</label>
                      <p class="text-sm" id="viewTransferUpdated"></p>
                  </div>
                  
                  <div class="md:col-span-2">
                      <label class="block text-sm font-medium text-muted-foreground mb-1">Commentaire</label>
                      <p class="text-sm" id="viewTransferComment"></p>
                  </div>
              </div>
              
              <div class="flex justify-end gap-3">
                  <button type="button" class="btn btn-outline" onclick="closeViewTransferModal()">Fermer</button>
                  <button type="button" class="btn btn-secondary" onclick="editTransferFromView()" id="editFromViewBtn">
                      <i data-lucide="edit" class="w-4 h-4 mr-2"></i>
                      Modifier
                  </button>
                  <button type="button" class="btn btn-success" onclick="completeTransferFromView()" id="completeFromViewBtn">
                      <i data-lucide="check" class="w-4 h-4 mr-2"></i>
                      Compléter
                  </button>
                  <button type="button" class="btn btn-destructive" onclick="cancelTransferFromView()" id="cancelFromViewBtn">
                      <i data-lucide="x" class="w-4 h-4 mr-2"></i>
                      Annuler
                  </button>
              </div>
          </div>
      </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div class="modal-overlay" id="deleteModal">
      <div class="modal-content max-w-md">
          <div class="flex items-center gap-3 mb-4">
              <div class="w-12 h-12 bg-destructive/10 rounded-full flex items-center justify-center">
                  <i data-lucide="alert-triangle" class="w-6 h-6 text-destructive"></i>
              </div>
              <div>
                  <h2 class="text-lg font-bold text-foreground">Confirmer la suppression</h2>
                  <p class="text-sm text-muted-foreground">Cette action est irréversible</p>
              </div>
          </div>
          
          <div class="mb-6">
              <p class="text-sm text-foreground">
                  Êtes-vous sûr de vouloir supprimer le transfert <span class="font-semibold" id="deleteTransferId"></span> ?
              </p>
              <p class="text-sm text-muted-foreground mt-2">
                  Toutes les données associées à ce transfert seront définitivement supprimées.
              </p>
          </div>
          
          <div class="flex justify-end gap-3">
              <button type="button" class="btn btn-outline" onclick="closeDeleteModal()">Annuler</button>
              <button type="button" class="btn btn-destructive" onclick="confirmDelete()" id="deleteButton">
                  <i data-lucide="trash-2" class="w-4 h-4 mr-2"></i>
                  Supprimer
              </button>
          </div>
      </div>
  </div>

  <!-- Include Toast Partials -->
  <%- include('../partials/toasts') %>

  <script>
      // Configuration de l'API
      const API_BASE_URL = '/api/v1';
      
      // Données transferts provenant du serveur
      const transfersData = <%- JSON.stringify(aggregatedTransfers) %>;
      
      // Extraire les données uniques
      const productsData = {};
      const storesData = {};
      const categoriesData = {};
      
      transfersData.forEach(transfer => {
          // Extraire les produits
          if (transfer.product && !productsData[transfer.product.id]) {
              productsData[transfer.product.id] = transfer.product;
          }
          
          // Extraire les magasins sources
          if (transfer.sourceStore && !storesData[transfer.sourceStore.id]) {
              storesData[transfer.sourceStore.id] = transfer.sourceStore;
          }
          
          // Extraire les magasins destinations
          if (transfer.destinationStore && !storesData[transfer.destinationStore.id]) {
              storesData[transfer.destinationStore.id] = transfer.destinationStore;
          }
          
          // Extraire les catégories
          if (transfer.product && transfer.product.category && !categoriesData[transfer.product.category.id]) {
              categoriesData[transfer.product.category.id] = transfer.product.category;
          }
      });

      let currentPage = 1;
      let itemsPerPage = 10;
      let sortField = null;
      let sortDirection = 'asc';
      let filteredData = [...transfersData];
      let editingTransferId = null;
      let deletingTransferId = null;
      let viewingTransferId = null;

      // Service Transfer
      class TransferService {
          constructor() {
              this.baseUrl = API_BASE_URL;
          }
          
          async createTransfer(data) {
              try {
                  const response = await fetch(`${this.baseUrl}/transfers`, {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data)
                  });
                  
                  if (!response.ok) {
                      const errorData = await response.json();
                      throw new Error(errorData.message || 'Erreur lors de la création');
                  }
                  
                  return await response.json();
              } catch (error) {
                  throw error;
              }
          }

          async updateTransfer(transferId, data) {
              try {
                  const response = await fetch(`${this.baseUrl}/transfers/${transferId}`, {
                      method: 'PUT',
                      headers: {
                          'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data)
                  });
                  
                  if (!response.ok) {
                      const errorData = await response.json();
                      throw new Error(errorData.message || 'Erreur lors de la modification');
                  }
                  
                  return await response.json();
              } catch (error) {
                  throw error;
              }
          }

          async deleteTransfer(transferId) {
              try {
                  const response = await fetch(`${this.baseUrl}/transfers/${transferId}`, {
                      method: 'DELETE',
                      headers: {
                          'Content-Type': 'application/json',
                      }
                  });
                  
                  if (!response.ok) {
                      const errorData = await response.json();
                      throw new Error(errorData.message || 'Erreur lors de la suppression');
                  }
                  
                  return await response.json();
              } catch (error) {
                  throw error;
              }
          }

          async updateTransferStatus(transferId, status) {
              try {
                  const response = await fetch(`${this.baseUrl}/transfers/${transferId}/status`, {
                      method: 'PATCH',
                      headers: {
                          'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({ status })
                  });
                  
                  if (!response.ok) {
                      const errorData = await response.json();
                      throw new Error(errorData.message || 'Erreur lors de la mise à jour du statut');
                  }
                  
                  return await response.json();
              } catch (error) {
                  throw error;
              }
          }
      }

      const transferService = new TransferService();

      // Initialize
      document.addEventListener('DOMContentLoaded', function() {
          console.log('DOM loaded, initializing transfers page...');
          
          // Initialize Lucide icons
          if (typeof lucide !== 'undefined') {
              lucide.createIcons();
              console.log('Lucide icons initialized');
          }

          renderTable();
          setupEventListeners();
          console.log('Transfers page initialized successfully');
      });

      function formatDate(dateString) {
          if (!dateString) return '-';
          const date = new Date(dateString);
          return date.toLocaleDateString('fr-FR', {
              day: '2-digit',
              month: '2-digit',
              year: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
          });
      }

      function getStatusText(status) {
          switch (status) {
              case 'pending': return 'En attente';
              case 'completed': return 'Complété';
              case 'cancelled': return 'Annulé';
              default: return status;
          }
      }

      function getStatusBadgeClass(status) {
          switch (status) {
              case 'pending': return 'badge-warning';
              case 'completed': return 'badge-success';
              case 'cancelled': return 'badge-destructive';
              default: return 'badge-secondary';
          }
      }

      function setupEventListeners() {
          // Search
          const searchInput = document.getElementById('searchInput');
          if (searchInput) {
              searchInput.addEventListener('input', debounce(filterData, 300));
          }
          
          const statusFilter = document.getElementById('statusFilter');
          if (statusFilter) {
              statusFilter.addEventListener('change', filterData);
          }
          
          const perPageSelect = document.getElementById('perPageSelect');
          if (perPageSelect) {
              perPageSelect.addEventListener('change', changeItemsPerPage);
          }
          
          // Sorting
          document.querySelectorAll('.sortable').forEach(header => {
              header.addEventListener('click', () => sortTable(header.dataset.sort));
          });
          
          // Pagination
          const prevPage = document.getElementById('prevPage');
          if (prevPage) {
              prevPage.addEventListener('click', () => changePage(currentPage - 1));
          }
          
          const nextPage = document.getElementById('nextPage');
          if (nextPage) {
              nextPage.addEventListener('click', () => changePage(currentPage + 1));
          }
          
          // Form submissions
          const transferForm = document.getElementById('transferForm');
          if (transferForm) {
              transferForm.addEventListener('submit', handleTransferSubmit);
          }
          
          // Sidebar navigation
          document.querySelectorAll('.sidebar-item').forEach(item => {
                if (!item.getAttribute('href') || item.getAttribute('href') === '#') {
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));
                        this.classList.add('active');
                    });
                }
            });

          // Close modals when clicking outside
          document.querySelectorAll('.modal-overlay').forEach(modal => {
              modal.addEventListener('click', function(e) {
                  if (e.target === this) {
                      closeAllModals();
                  }
              });
          });

          // Keyboard shortcuts
          document.addEventListener('keydown', function(e) {
              if (e.key === 'Escape') {
                  closeAllModals();
              }
              if (e.ctrlKey && e.key === 'n') {
                  e.preventDefault();
                  openTransferModal();
              }
          });
      }

      function debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
              const later = () => {
                  clearTimeout(timeout);
                  func(...args);
              };
              clearTimeout(timeout);
              timeout = setTimeout(later, wait);
          };
      }

      function filterData() {
          const searchTerm = document.getElementById('searchInput').value.toLowerCase();
          const statusFilter = document.getElementById('statusFilter').value;

          filteredData = transfersData.filter(transfer => {
              const product = transfer.product;
              const sourceStore = transfer.sourceStore;
              const destinationStore = transfer.destinationStore;
              
              const matchesSearch = !searchTerm || 
                  (product && product.name.toLowerCase().includes(searchTerm)) ||
                  (sourceStore && sourceStore.name.toLowerCase().includes(searchTerm)) ||
                  (destinationStore && destinationStore.name.toLowerCase().includes(searchTerm)) ||
                  (transfer.comment && transfer.comment.toLowerCase().includes(searchTerm));
                  
              const matchesStatus = !statusFilter || transfer.status === statusFilter;

              return matchesSearch && matchesStatus;
          });

          currentPage = 1;
          renderTable();
      }

      function sortTable(field) {
          if (sortField === field) {
              sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
          } else {
              sortField = field;
              sortDirection = 'asc';
          }

          filteredData.sort((a, b) => {
              let aValue = a[field];
              let bValue = b[field];

              if (field === 'product') {
                  aValue = a.product ? a.product.name.toLowerCase() : '';
                  bValue = b.product ? b.product.name.toLowerCase() : '';
              } else if (field === 'quantity') {
                  aValue = parseInt(aValue) || 0;
                  bValue = parseInt(bValue) || 0;
              } else if (field === 'createdAt') {
                  aValue = new Date(aValue);
                  bValue = new Date(bValue);
              } else if (field === 'status') {
                  aValue = aValue ? aValue.toString().toLowerCase() : '';
                  bValue = bValue ? bValue.toString().toLowerCase() : '';
              } else {
                  aValue = aValue ? aValue.toString().toLowerCase() : '';
                  bValue = bValue ? bValue.toString().toLowerCase() : '';
              }

              if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
              if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
              return 0;
          });

          renderTable();
          updateSortIcons();
      }

      function updateSortIcons() {
          document.querySelectorAll('.sortable i').forEach(icon => {
              icon.setAttribute('data-lucide', 'arrow-up-down');
          });

          if (sortField) {
              const activeHeader = document.querySelector(`[data-sort="${sortField}"] i`);
              if (activeHeader) {
                  activeHeader.setAttribute('data-lucide', sortDirection === 'asc' ? 'arrow-up' : 'arrow-down');
              }
          }

          if (typeof lucide !== 'undefined') {
              lucide.createIcons();
          }
      }

      function changeItemsPerPage() {
          itemsPerPage = parseInt(document.getElementById('perPageSelect').value);
          currentPage = 1;
          renderTable();
      }

      function changePage(page) {
          const totalPages = Math.ceil(filteredData.length / itemsPerPage);
          if (page >= 1 && page <= totalPages) {
              currentPage = page;
              renderTable();
          }
      }

      function renderTable() {
          const startIndex = (currentPage - 1) * itemsPerPage;
          const endIndex = startIndex + itemsPerPage;
          const pageData = filteredData.slice(startIndex, endIndex);

          const tbody = document.getElementById('transfersTableBody');
          tbody.innerHTML = '';

          pageData.forEach(transfer => {
              const product = transfer.product;
              const sourceStore = transfer.sourceStore;
              const destinationStore = transfer.destinationStore;
              
              const row = document.createElement('tr');
              
              row.innerHTML = `
                  <td>
                      <div class="font-mono font-medium">#${transfer.id}</div>
                  </td>
                  <td>
                      <div class="font-medium">${product ? product.name : 'Produit inconnu'}</div>
                      <div class="text-sm text-muted-foreground">${product ? product.description || 'Aucune description' : ''}</div>
                  </td>
                  <td>
                      <div class="text-sm font-medium">${sourceStore ? sourceStore.name : 'Magasin inconnu'}</div>
                      <div class="text-xs text-muted-foreground">${sourceStore ? sourceStore.description || '' : ''}</div>
                  </td>
                  <td>
                      <div class="text-sm font-medium">${destinationStore ? destinationStore.name : 'Magasin inconnu'}</div>
                      <div class="text-xs text-muted-foreground">${destinationStore ? destinationStore.description || '' : ''}</div>
                  </td>
                  <td>
                      <div class="font-mono font-bold text-lg">${transfer.quantity}</div>
                  </td>
                  <td>${formatDate(transfer.createdAt)}</td>
                  <td>
                      <span class="badge ${getStatusBadgeClass(transfer.status)}">
                          <span class="status-indicator status-${transfer.status}"></span>
                          ${getStatusText(transfer.status)}
                      </span>
                  </td>
                  <td>
                      <div class="flex items-center gap-2">
                          <button class="btn btn-outline btn-sm" onclick="viewTransfer(${transfer.id})" title="Voir">
                              <i data-lucide="eye" class="w-3 h-3"></i>
                          </button>
                          ${transfer.status === 'pending' ? `
                              <button class="btn btn-secondary btn-sm" onclick="editTransfer(${transfer.id})" title="Modifier">
                                  <i data-lucide="edit" class="w-3 h-3"></i>
                              </button>
                              <button class="btn btn-success btn-sm" onclick="completeTransfer(${transfer.id})" title="Compléter">
                                  <i data-lucide="check" class="w-3 h-3"></i>
                              </button>
                              <button class="btn btn-destructive btn-sm" onclick="cancelTransfer(${transfer.id})" title="Annuler">
                                  <i data-lucide="x" class="w-3 h-3"></i>
                              </button>
                          ` : `
                              <button class="btn btn-destructive btn-sm" onclick="deleteTransfer(${transfer.id})" title="Supprimer">
                                  <i data-lucide="trash-2" class="w-3 h-3"></i>
                              </button>
                          `}
                      </div>
                  </td>
              `;
              tbody.appendChild(row);
          });

          if (typeof lucide !== 'undefined') {
              lucide.createIcons();
          }
          updatePagination();
      }

      function updatePagination() {
          const totalItems = filteredData.length;
          const totalPages = Math.ceil(totalItems / itemsPerPage);
          const startIndex = (currentPage - 1) * itemsPerPage + 1;
          const endIndex = Math.min(startIndex + itemsPerPage - 1, totalItems);

          // Update showing text
          document.getElementById('showingFrom').textContent = totalItems > 0 ? startIndex : 0;
          document.getElementById('showingTo').textContent = totalItems > 0 ? endIndex : 0;
          document.getElementById('totalResults').textContent = totalItems;

          // Update pagination buttons
          document.getElementById('prevPage').disabled = currentPage === 1;
          document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;

          // Generate pagination numbers
          const paginationContainer = document.getElementById('paginationNumbers');
          paginationContainer.innerHTML = '';

          if (totalPages <= 7) {
              for (let i = 1; i <= totalPages; i++) {
                  createPageButton(i, paginationContainer);
              }
          } else {
              createPageButton(1, paginationContainer);

              if (currentPage > 4) {
                  const ellipsis = document.createElement('span');
                  ellipsis.className = 'px-2 text-muted-foreground';
                  ellipsis.textContent = '...';
                  paginationContainer.appendChild(ellipsis);
              }

              const start = Math.max(2, currentPage - 2);
              const end = Math.min(totalPages - 1, currentPage + 2);

              for (let i = start; i <= end; i++) {
                  createPageButton(i, paginationContainer);
              }

              if (currentPage < totalPages - 3) {
                  const ellipsis = document.createElement('span');
                  ellipsis.className = 'px-2 text-muted-foreground';
                  ellipsis.textContent = '...';
                  paginationContainer.appendChild(ellipsis);
              }

              if (totalPages > 1) {
                  createPageButton(totalPages, paginationContainer);
              }
          }
      }

      function createPageButton(pageNumber, container) {
          const button = document.createElement('button');
          button.className = `btn btn-sm ${pageNumber === currentPage ? 'btn-primary' : 'btn-outline'}`;
          button.textContent = pageNumber;
          button.onclick = () => changePage(pageNumber);
          container.appendChild(button);
      }

      // Modal functions
      function openTransferModal(transferId = null) {
          editingTransferId = transferId;
          const modal = document.getElementById('transferModal');
          const modalTitle = document.getElementById('transferModalTitle');
          const submitButton = document.getElementById('transferSubmitButtonText');
          const submitIcon = document.getElementById('transferSubmitIcon');
          const form = document.getElementById('transferForm');

          if (transferId) {
              const transfer = transfersData.find(t => t.id === transferId);
              if (transfer) {
                  modalTitle.textContent = 'Modifier le transfert';
                  submitButton.textContent = 'Modifier';
                  submitIcon.setAttribute('data-lucide', 'save');
                  
                  // Fill form with transfer data
                  document.getElementById('transferProduct').value = transfer.productId;
                  document.getElementById('sourceStore').value = transfer.sourceStoreId;
                  document.getElementById('destinationStore').value = transfer.destinationStoreId;
                  document.getElementById('transferQuantity').value = transfer.quantity;
                  document.getElementById('transferComment').value = transfer.comment || '';
              }
          } else {
              modalTitle.textContent = 'Nouveau transfert';
              submitButton.textContent = 'Créer le transfert';
              submitIcon.setAttribute('data-lucide', 'plus');
              form.reset();
          }

          modal.classList.add('show');
          if (typeof lucide !== 'undefined') {
              lucide.createIcons();
          }
      }

      function closeTransferModal() {
          document.getElementById('transferModal').classList.remove('show');
          editingTransferId = null;
      }

      function viewTransfer(transferId) {
          viewingTransferId = transferId;
          const transfer = transfersData.find(t => t.id === transferId);
          if (transfer) {
              const product = transfer.product;
              const sourceStore = transfer.sourceStore;
              const destinationStore = transfer.destinationStore;
              
              document.getElementById('viewTransferId').textContent = `#${transfer.id}`;
              document.getElementById('viewTransferStatus').innerHTML = `<span class="badge ${getStatusBadgeClass(transfer.status)}">${getStatusText(transfer.status)}</span>`;
              document.getElementById('viewTransferProduct').textContent = product ? product.name : 'Produit inconnu';
              document.getElementById('viewTransferQuantity').textContent = transfer.quantity;
              document.getElementById('viewTransferSource').textContent = sourceStore ? sourceStore.name : 'Magasin inconnu';
              document.getElementById('viewTransferDestination').textContent = destinationStore ? destinationStore.name : 'Magasin inconnu';
              document.getElementById('viewTransferCreated').textContent = formatDate(transfer.createdAt);
              document.getElementById('viewTransferUpdated').textContent = formatDate(transfer.updatedAt);
              document.getElementById('viewTransferComment').textContent = transfer.comment || 'Aucun commentaire';
              
              // Show/hide action buttons based on status
              const editBtn = document.getElementById('editFromViewBtn');
              const completeBtn = document.getElementById('completeFromViewBtn');
              const cancelBtn = document.getElementById('cancelFromViewBtn');
              
              if (transfer.status === 'pending') {
                  editBtn.style.display = 'inline-flex';
                  completeBtn.style.display = 'inline-flex';
                  cancelBtn.style.display = 'inline-flex';
              } else {
                  editBtn.style.display = 'none';
                  completeBtn.style.display = 'none';
                  cancelBtn.style.display = 'none';
              }
              
              document.getElementById('viewTransferModal').classList.add('show');
          }
      }

      function closeViewTransferModal() {
          document.getElementById('viewTransferModal').classList.remove('show');
          viewingTransferId = null;
      }

      function editTransferFromView() {
          closeViewTransferModal();
          openTransferModal(viewingTransferId);
      }

      function completeTransferFromView() {
          closeViewTransferModal();
          completeTransfer(viewingTransferId);
      }

      function cancelTransferFromView() {
          closeViewTransferModal();
          cancelTransfer(viewingTransferId);
      }

      function editTransfer(transferId) {
          openTransferModal(transferId);
      }

      async function completeTransfer(transferId) {
          try {
              await transferService.updateTransferStatus(transferId, 'completed');
              
              // Update local data
              const transferIndex = transfersData.findIndex(t => t.id === transferId);
              if (transferIndex !== -1) {
                  transfersData[transferIndex].status = 'completed';
                  transfersData[transferIndex].updatedAt = new Date().toISOString();
              }
              
              showToast('Transfert complété avec succès', 'success');
              updateStats();
              filterData();
              
          } catch (error) {
              console.error('Erreur lors de la completion:', error);
              showToast(error.message || 'Erreur lors de la completion du transfert', 'error');
          }
      }

      async function cancelTransfer(transferId) {
          try {
              await transferService.updateTransferStatus(transferId, 'cancelled');
              
              // Update local data
              const transferIndex = transfersData.findIndex(t => t.id === transferId);
              if (transferIndex !== -1) {
                  transfersData[transferIndex].status = 'cancelled';
                  transfersData[transferIndex].updatedAt = new Date().toISOString();
              }
              
              showToast('Transfert annulé avec succès', 'success');
              updateStats();
              filterData();
              
          } catch (error) {
              console.error('Erreur lors de l\'annulation:', error);
              showToast(error.message || 'Erreur lors de l\'annulation du transfert', 'error');
          }
      }

      function deleteTransfer(transferId) {
          deletingTransferId = transferId;
          const transfer = transfersData.find(t => t.id === transferId);
          if (transfer) {
              document.getElementById('deleteTransferId').textContent = `#${transfer.id}`;
              document.getElementById('deleteModal').classList.add('show');
          }
      }

      function closeDeleteModal() {
          document.getElementById('deleteModal').classList.remove('show');
          deletingTransferId = null;
      }

      function closeAllModals() {
          closeTransferModal();
          closeViewTransferModal();
          closeDeleteModal();
      }

      // Form submission handlers
      async function handleTransferSubmit(event) {
          event.preventDefault();
          
          const submitButton = document.getElementById('transferSubmitButton');
          const originalContent = submitButton.innerHTML;
          
          const productId = parseInt(document.getElementById('transferProduct').value);
          const sourceStoreId = parseInt(document.getElementById('sourceStore').value);
          const destinationStoreId = parseInt(document.getElementById('destinationStore').value);
          const quantity = parseInt(document.getElementById('transferQuantity').value);
          const comment = document.getElementById('transferComment').value;
          
          // Validation
          if (!productId || !sourceStoreId || !destinationStoreId || !quantity) {
              showToast('Veuillez remplir tous les champs obligatoires', 'error');
              return;
          }
          
          if (sourceStoreId === destinationStoreId) {
              showToast('Les magasins source et destination doivent être différents', 'error');
              return;
          }
          
          if (quantity <= 0) {
              showToast('La quantité doit être supérieure à 0', 'error');
              return;
          }
          
          // Set loading state
          submitButton.disabled = true;
          submitButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Traitement...';
          
          try {
              if (editingTransferId) {
                  // Update existing transfer (only if pending)
                  const transfer = transfersData.find(t => t.id === editingTransferId);
                  if (transfer && transfer.status !== 'pending') {
                      showToast('Seuls les transferts en attente peuvent être modifiés', 'error');
                      return;
                  }
                  
                  const transferData = {
                      productId: productId,
                      sourceStoreId: sourceStoreId,
                      destinationStoreId: destinationStoreId,
                      quantity: quantity,
                      comment: comment
                  };
                  
                  await transferService.updateTransfer(editingTransferId, transferData);
                  
                  // Update local data
                  const transferIndex = transfersData.findIndex(t => t.id === editingTransferId);
                  if (transferIndex !== -1) {
                      transfersData[transferIndex] = {
                          ...transfersData[transferIndex],
                          ...transferData,
                          product: productsData[productId],
                          sourceStore: storesData[sourceStoreId],
                          destinationStore: storesData[destinationStoreId],
                          updatedAt: new Date().toISOString()
                      };
                  }
                  
                  showToast('Transfert modifié avec succès', 'success');
                  
              } else {
                  // Create new transfer
                  const transferData = {
                      productId: productId,
                      sourceStoreId: sourceStoreId,
                      destinationStoreId: destinationStoreId,
                      quantity: quantity,
                      comment: comment
                  };
                  
                  const newTransfer = await transferService.createTransfer(transferData);
                  
                  // Add to local data
                  const transferToAdd = {
                      id: newTransfer.data.id,
                      productId: productId,
                      sourceStoreId: sourceStoreId,
                      destinationStoreId: destinationStoreId,
                      quantity: quantity,
                      comment: comment,
                      status: 'pending',
                      product: productsData[productId],
                      sourceStore: storesData[sourceStoreId],
                      destinationStore: storesData[destinationStoreId],
                      createdAt: new Date().toISOString(),
                      updatedAt: null
                  };
                  
                  transfersData.push(transferToAdd);
                  showToast('Transfert créé avec succès', 'success');
              }
              
              updateStats();
              filterData();
              closeTransferModal();
              
          } catch (error) {
              console.error('Erreur lors de l\'opération:', error);
              showToast(error.message || 'Erreur lors de l\'opération', 'error');
          } finally {
              submitButton.disabled = false;
              submitButton.innerHTML = originalContent;
              if (typeof lucide !== 'undefined') {
                  lucide.createIcons();
              }
          }
      }

      async function confirmDelete() {
          if (!deletingTransferId) return;
          
          const deleteButton = document.getElementById('deleteButton');
          const originalContent = deleteButton.innerHTML;
          
          // Set loading state
          deleteButton.disabled = true;
          deleteButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Suppression...';
          
          try {
              await transferService.deleteTransfer(deletingTransferId);
              
              // Remove from local data
              const index = transfersData.findIndex(t => t.id === deletingTransferId);
              if (index !== -1) {
                  transfersData.splice(index, 1);
              }
              
              showToast('Transfert supprimé avec succès', 'success');
              updateStats();
              filterData();
              closeDeleteModal();
              
          } catch (error) {
              console.error('Erreur lors de la suppression:', error);
              showToast('Erreur lors de la suppression du transfert', 'error');
          } finally {
              deleteButton.disabled = false;
              deleteButton.innerHTML = originalContent;
              if (typeof lucide !== 'undefined') {
                  lucide.createIcons();
              }
          }
      }

      function updateStats() {
          // Update total transfers count
          document.getElementById('totalTransfers').textContent = transfersData.length;
          
          // Update pending transfers
          const pendingTransfers = transfersData.filter(t => t.status === 'pending').length;
          document.getElementById('pendingTransfers').textContent = pendingTransfers;
          
          // Update completed transfers
          const completedTransfers = transfersData.filter(t => t.status === 'completed').length;
          document.getElementById('completedTransfers').textContent = completedTransfers;
          
          // Update cancelled transfers
          const cancelledTransfers = transfersData.filter(t => t.status === 'cancelled').length;
          document.getElementById('cancelledTransfers').textContent = cancelledTransfers;
      }

      function showToast(message, type = 'info') {
          // Create notification element
          const notification = document.createElement('div');
          notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-full`;
          
          switch (type) {
              case 'success':
                  notification.className += ' bg-success text-success-foreground';
                  break;
              case 'error':
                  notification.className += ' bg-destructive text-destructive-foreground';
                  break;
              default:
                  notification.className += ' bg-info text-info-foreground';
          }

          notification.innerHTML = `
              <div class="flex items-center gap-2">
                  <i data-lucide="${type === 'success' ? 'check-circle' : type === 'error' ? 'x-circle' : 'info'}" class="w-4 h-4"></i>
                  <span>${message}</span>
                  <button onclick="this.parentElement.parentElement.remove()" class="ml-2">
                      <i data-lucide="x" class="w-4 h-4"></i>
                  </button>
              </div>
          `;

          document.body.appendChild(notification);
          if (typeof lucide !== 'undefined') {
              lucide.createIcons();
          }

          // Animate in
          setTimeout(() => {
              notification.classList.remove('translate-x-full');
          }, 100);

          // Auto remove after 5 seconds
          setTimeout(() => {
              notification.classList.add('translate-x-full');
              setTimeout(() => {
                  if (notification.parentElement) {
                      notification.remove();
                  }
              }, 300);
          }, 5000);
      }
  </script>
</body>
</html>