<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Magasins - AmaZup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        border: "hsl(214.3 31.8% 91.4%)",
                        input: "hsl(214.3 31.8% 91.4%)",
                        ring: "hsl(222.2 84% 4.9%)",
                        background: "hsl(0 0% 100%)",
                        foreground: "hsl(222.2 84% 4.9%)",
                        primary: {
                            DEFAULT: "hsl(222.2 47.4% 11.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        secondary: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84.2% 60.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        muted: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(215.4 16.3% 46.9%)",
                        },
                        accent: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        success: {
                            DEFAULT: "hsl(142 76% 36%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        warning: {
                            DEFAULT: "hsl(45 93% 47%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        info: {
                            DEFAULT: "hsl(204 94% 49%)",
                            foreground: "hsl(210 40% 98%)",
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        
        .card {
            border-radius: 0.5rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            color: hsl(222.2 84% 4.9%);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        
        .card-header {
            display: flex;
            flex-direction: column;
            space-y: 1.5rem;
            padding: 1.5rem;
        }
        
        .card-content {
            padding: 1.5rem;
            padding-top: 0;
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
            padding: 0.5rem 1rem;
            height: 2.5rem;
            border: none;
        }
        
        .btn-primary {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-primary:hover {
            background: hsl(222.2 47.4% 11.2% / 0.9);
        }
        
        .btn-secondary {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .btn-secondary:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .btn-outline {
            background: transparent;
            color: hsl(222.2 84% 4.9%);
            border: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        .btn-outline:hover {
            background: hsl(210 40% 96%);
        }
        
        .btn-destructive {
            background: hsl(0 84.2% 60.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-destructive:hover {
            background: hsl(0 84.2% 60.2% / 0.9);
        }
        
        .btn-sm {
            height: 2rem;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
        }
        
        .input {
            display: flex;
            height: 2.5rem;
            width: 100%;
            border-radius: 0.375rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            transition: all 0.2s;
        }
        
        .input:focus {
            outline: none;
            border-color: hsl(222.2 84% 4.9%);
            box-shadow: 0 0 0 2px hsl(222.2 84% 4.9% / 0.2);
        }
        
        .textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            color: hsl(215.4 16.3% 46.9%);
            transition: all 0.2s;
            cursor: pointer;
            text-decoration: none;
        }
        
        .sidebar-item:hover {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .sidebar-item.active {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .badge {
            display: inline-flex;
            align-items: center;
            border-radius: 9999px;
            padding: 0.25rem 0.625rem;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-success {
            background: hsl(142 76% 36% / 0.1);
            color: hsl(142 76% 36%);
        }
        
        .badge-warning {
            background: hsl(45 93% 47% / 0.1);
            color: hsl(45 93% 47%);
        }
        
        .badge-destructive {
            background: hsl(0 84.2% 60.2% / 0.1);
            color: hsl(0 84.2% 60.2%);
        }
        
        .badge-info {
            background: hsl(204 94% 49% / 0.1);
            color: hsl(204 94% 49%);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        th {
            background: hsl(210 40% 96%);
            font-weight: 600;
            font-size: 0.875rem;
            color: hsl(222.2 84% 4.9%);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        tbody tr:hover {
            background: hsl(210 40% 96% / 0.5);
        }
        
        .sortable {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            width: 100%;
            max-width: 600px;
            margin: 1rem;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9) translateY(-20px);
            transition: transform 0.3s ease;
        }
        
        .modal-overlay.show .modal-content {
            transform: scale(1) translateY(0);
        }

        .store-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #0ea5e9 0%, #1e293b 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: white;
            font-size: 1.2rem;
        }
    </style>
</head>
<body class="bg-muted/30">
    <!-- Sidebar -->
    <aside class="fixed left-0 top-0 h-full w-64 bg-background border-r border-border sidebar-transition z-50">
      <!-- Logo -->
      <div class="flex items-center px-6 py-4 border-b border-border">
          <div class="flex items-center justify-center w-8 h-8 bg-primary rounded-md mr-3">
              <i data-lucide="store" class="w-4 h-4 text-primary-foreground"></i>
          </div>
          <span class="text-xl font-bold text-foreground">AmaZup</span>
      </div>
      
      <!-- User Profile -->
      <div class="px-6 py-4 border-b border-border">
          <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
                  <i data-lucide="user" class="w-5 h-5 text-primary"></i>
              </div>
              <div>
                  <p class="font-medium text-foreground">Admin</p>
                  <p class="text-sm text-muted-foreground">admin@amazup.shop</p>
              </div>
          </div>
      </div>
      
      <!-- Navigation -->
      <nav class="px-4 py-4">
          <div class="space-y-2">
              <a href="/admin" class="sidebar-item" data-page="dashboard">
                  <i data-lucide="layout-dashboard" class="w-4 h-4 mr-3"></i>
                  Tableau de bord
              </a>
              
              <a href="#" class="sidebar-item active" data-page="stores">
                  <i data-lucide="store" class="w-4 h-4 mr-3"></i>
                  Magasins
              </a>
              
              <a href="/admin/products" class="sidebar-item" data-page="products">
                  <i data-lucide="package" class="w-4 h-4 mr-3"></i>
                  Produits
              </a>
              
              <a href="/admin/categories" class="sidebar-item" data-page="categories">
                  <i data-lucide="tag" class="w-4 h-4 mr-3"></i>
                  Catégories
              </a>
              
              <a href="/admin/stocks" class="sidebar-item" data-page="inventory">
                  <i data-lucide="warehouse" class="w-4 h-4 mr-3"></i>
                  Stocks
              </a>
              
              <a href="/admin/transfers" class="sidebar-item" data-page="transfers">
                  <i data-lucide="truck" class="w-4 h-4 mr-3"></i>
                  Transferts
              </a>
              
              <a href="/admin/users" class="sidebar-item" data-page="users">
                  <i data-lucide="users" class="w-4 h-4 mr-3"></i>
                  Utilisateurs
              </a>
          </div>
          
          <div class="mt-8 pt-4 border-t border-border">
              <a href="/logout" class="sidebar-item text-destructive hover:bg-destructive/10 hover:text-destructive">
                  <i data-lucide="log-out" class="w-4 h-4 mr-3"></i>
                  Se déconnecter
              </a>
          </div>
      </nav>
  </aside>

    <!-- Main Content -->
    <main class="ml-64 min-h-screen">
        <!-- Header -->
        <header class="bg-background border-b border-border px-6 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-foreground">Gestion des Magasins</h1>
                    <p class="text-muted-foreground">Gérez votre réseau de magasins</p>
                </div>
                
                <div class="flex items-center space-x-4">
                    <button class="btn btn-primary" onclick="openStoreModal()">
                        <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                        Ajouter un magasin
                    </button>
                    
                    <div class="relative">
                        <button class="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                            <i data-lucide="bell" class="w-4 h-4 text-muted-foreground"></i>
                        </button>
                        <span class="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full"></span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Stores Management Content -->
        <div class="p-6">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Total Magasins</p>
                                <p class="text-2xl font-bold" id="totalStores"><%= stores.length %></p>
                            </div>
                            <div class="w-12 h-12 bg-info/10 rounded-full flex items-center justify-center">
                                <i data-lucide="store" class="w-6 h-6 text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Produits Total</p>
                                <p class="text-2xl font-bold" id="totalProducts"><%= stores.reduce((sum, store) => sum + store.productsCount, 0) %></p>
                            </div>
                            <div class="w-12 h-12 bg-success/10 rounded-full flex items-center justify-center">
                                <i data-lucide="package" class="w-6 h-6 text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Catégories Total</p>
                                <p class="text-2xl font-bold" id="totalCategories"><%= stores.reduce((sum, store) => sum + store.categoriesCount, 0) %></p>
                            </div>
                            <div class="w-12 h-12 bg-warning/10 rounded-full flex items-center justify-center">
                                <i data-lucide="tag" class="w-6 h-6 text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Stock Total</p>
                                <p class="text-2xl font-bold" id="totalStock"><%= stores.reduce((sum, store) => sum + store.stocks.reduce((stockSum, stock) => stockSum + stock.quantityAvailable, 0), 0) %></p>
                            </div>
                            <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                                <i data-lucide="warehouse" class="w-6 h-6 text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Filters and Search -->
            <div class="card mb-6">
                <div class="card-content" style="padding: 1.5rem;">
                    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
                        <div class="flex flex-col sm:flex-row gap-4 flex-1">
                            <!-- Search -->
                            <div class="relative flex-1 max-w-md">
                                <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground"></i>
                                <input type="text" class="input pl-10" placeholder="Rechercher un magasin..." id="searchInput">
                            </div>
                        </div>
                        
                        <div class="flex items-center gap-4">
                            <!-- Results per page -->
                            <div class="flex items-center gap-2">
                                <span class="text-sm text-muted-foreground">Afficher:</span>
                                <select class="input select w-20" id="perPageSelect">
                                    <option value="5">5</option>
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            
                            <!-- Export -->
                            <button class="btn btn-outline">
                                <i data-lucide="download" class="w-4 h-4 mr-2"></i>
                                Exporter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Stores Table -->
            <div class="card">
                <div class="overflow-x-auto">
                    <table id="storesTable">
                        <thead>
                            <tr>
                                <th class="sortable" data-sort="name">
                                    <div class="flex items-center gap-2">
                                        Magasin
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Localisation</th>
                                <th class="sortable" data-sort="productsCount">
                                    <div class="flex items-center gap-2">
                                        Produits
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="categoriesCount">
                                    <div class="flex items-center gap-2">
                                        Catégories
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Stock Total</th>
                                <th>Responsable</th>
                                <th class="sortable" data-sort="createdAt">
                                    <div class="flex items-center gap-2">
                                        Créé le
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="storesTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="flex items-center justify-between p-4 border-t border-border">
                    <div class="text-sm text-muted-foreground">
                        Affichage de <span id="showingFrom">1</span> à <span id="showingTo">10</span> sur <span id="totalResults">0</span> résultats
                    </div>
                    
                    <div class="flex items-center gap-2">
                        <button class="btn btn-outline btn-sm" id="prevPage" disabled>
                            <i data-lucide="chevron-left" class="w-4 h-4"></i>
                        </button>
                        
                        <div class="flex items-center gap-1" id="paginationNumbers">
                            <!-- Pagination numbers will be generated by JavaScript -->
                        </div>
                        
                        <button class="btn btn-outline btn-sm" id="nextPage">
                            <i data-lucide="chevron-right" class="w-4 h-4"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Store Modal (Add/Edit) -->
    <div class="modal-overlay" id="storeModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground" id="modalTitle">Ajouter un magasin</h2>
                <button class="btn btn-outline btn-sm" onclick="closeStoreModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <form id="storeForm">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Nom du magasin</label>
                        <input type="text" class="input" id="storeName" required>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Description</label>
                        <textarea class="input textarea" id="storeDescription" rows="3" placeholder="Description du magasin..."></textarea>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Ville</label>
                            <input type="text" class="input" id="storeCity">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Code postal</label>
                            <input type="text" class="input" id="storeZipCode">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Adresse</label>
                        <input type="text" class="input" id="storeAddress">
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Responsable</label>
                            <input type="text" class="input" id="AmaZup">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Téléphone</label>
                            <input type="tel" class="input" id="storePhone">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Email</label>
                        <input type="email" class="input" id="storeEmail">
                    </div>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" class="btn btn-outline" onclick="closeStoreModal()">Annuler</button>
                    <button type="submit" class="btn btn-primary" id="submitButton">
                        <i data-lucide="plus" class="w-4 h-4 mr-2" id="submitIcon"></i>
                        <span id="submitButtonText">Ajouter</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- View Store Modal -->
    <div class="modal-overlay" id="viewStoreModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground">Détails du magasin</h2>
                <button class="btn btn-outline btn-sm" onclick="closeViewStoreModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <div class="space-y-6">
                <div class="flex items-center gap-4">
                    <div class="store-avatar" id="viewStoreAvatar"></div>
                    <div>
                        <h3 class="text-lg font-semibold" id="viewStoreName"></h3>
                        <p class="text-muted-foreground" id="viewStoreLocation"></p>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Description</label>
                        <p class="text-sm" id="viewStoreDescription"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Responsable</label>
                        <p class="text-sm" id="viewAmaZup"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Produits</label>
                        <p class="text-sm font-semibold" id="viewStoreProducts"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Catégories</label>
                        <p class="text-sm font-semibold" id="viewStoreCategories"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Stock total</label>
                        <p class="text-sm font-semibold" id="viewStoreStock"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Date de création</label>
                        <p class="text-sm" id="viewStoreCreated"></p>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-muted-foreground mb-2">Stocks par produit</label>
                    <div class="bg-muted/50 rounded-lg p-3">
                        <div id="viewStoreStocks" class="space-y-2">
                            <!-- Stocks details will be populated -->
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3">
                    <button type="button" class="btn btn-outline" onclick="closeViewStoreModal()">Fermer</button>
                    <button type="button" class="btn btn-secondary" onclick="editStoreFromView()">
                        <i data-lucide="edit" class="w-4 h-4 mr-2"></i>
                        Modifier
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal-overlay" id="deleteModal">
        <div class="modal-content max-w-md">
            <div class="flex items-center gap-3 mb-4">
                <div class="w-12 h-12 bg-destructive/10 rounded-full flex items-center justify-center">
                    <i data-lucide="alert-triangle" class="w-6 h-6 text-destructive"></i>
                </div>
                <div>
                    <h2 class="text-lg font-bold text-foreground">Confirmer la suppression</h2>
                    <p class="text-sm text-muted-foreground">Cette action est irréversible</p>
                </div>
            </div>
            
            <div class="mb-6">
                <p class="text-sm text-foreground">
                    Êtes-vous sûr de vouloir supprimer le magasin <span class="font-semibold" id="deleteStoreName"></span> ?
                </p>
                <p class="text-sm text-muted-foreground mt-2">
                    Toutes les données associées à ce magasin seront définitivement supprimées.
                </p>
            </div>
            
            <div class="flex justify-end gap-3">
                <button type="button" class="btn btn-outline" onclick="closeDeleteModal()">Annuler</button>
                <button type="button" class="btn btn-destructive" onclick="confirmDelete()" id="deleteButton">
                    <i data-lucide="trash-2" class="w-4 h-4 mr-2"></i>
                    Supprimer
                </button>
            </div>
        </div>
    </div>

    <!-- Include Toast Partials -->
    <%- include('../partials/toasts') %>

    <script>
        // Configuration de l'API
        const API_BASE_URL = 'http://localhost/api/v1';
        
        // Données magasins provenant du serveur
        const storesData = <%- JSON.stringify(stores) %>;
        
        // Données générées aléatoirement pour les champs manquants
        const cities = ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 'Bordeaux', 'Lille'];
        const addresses = [
            '123 Rue de la République', '45 Avenue des Champs', '67 Boulevard Saint-Michel',
            '89 Place de la Bastille', '12 Rue du Commerce', '34 Avenue Montaigne',
            '56 Boulevard Haussmann', '78 Rue de Rivoli', '90 Place Vendôme', '11 Rue du Faubourg'
        ];
        const managers = [
            'Marie Dubois', 'Jean Martin', 'Sophie Leroux', 'Pierre Durand', 'Laura Blanc',
            'Thomas Petit', 'Anne Moreau', 'Marc Garcia', 'Claire Lefevre', 'Lucie Bernard'
        ];

        // Enrichir les données des magasins avec des informations aléatoires
        storesData.forEach((store, index) => {
            const cityIndex = index % cities.length;
            const addressIndex = index % addresses.length;
            const managerIndex = index % managers.length;
            
            store.city = cities[cityIndex];
            store.address = addresses[addressIndex];
            store.zipCode = `${69000 + index}`;
            store.manager = managers[managerIndex];
            store.phone = `0${1 + Math.floor(Math.random() * 5)} ${Math.floor(Math.random() * 90) + 10} ${Math.floor(Math.random() * 90) + 10} ${Math.floor(Math.random() * 90) + 10} ${Math.floor(Math.random() * 90) + 10}`;
            store.email = `${store.name.toLowerCase().replace(/\s+/g, '.')}@AmaZup.com`;
            store.totalStock = store.stocks.reduce((sum, stock) => sum + stock.quantityAvailable, 0);
        });

        let currentPage = 1;
        let itemsPerPage = 10;
        let sortField = null;
        let sortDirection = 'asc';
        let filteredData = [...storesData];
        let editingStoreId = null;
        let deletingStoreId = null;
        let viewingStoreId = null;

        // Service Store
        class StoreService {
            constructor() {
                this.baseUrl = API_BASE_URL;
            }
            
            async createStore(data) {
                try {
                    const response = await fetch(`${this.baseUrl}/stores`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la création');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async updateStore(storeId, data) {
                try {
                    const response = await fetch(`${this.baseUrl}/stores/${storeId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la modification');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async deleteStore(storeId) {
                try {
                    const response = await fetch(`${this.baseUrl}/stores/${storeId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la suppression');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }
        }

        const storeService = new StoreService();

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing stores page...');
            
            // Initialize Lucide icons
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
                console.log('Lucide icons initialized');
            }

            renderTable();
            setupEventListeners();
            console.log('Stores page initialized successfully');
        });

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }

        function setupEventListeners() {
            // Search
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(filterData, 300));
            }
            
            const perPageSelect = document.getElementById('perPageSelect');
            if (perPageSelect) {
                perPageSelect.addEventListener('change', changeItemsPerPage);
            }
            
            // Sorting
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', () => sortTable(header.dataset.sort));
            });
            
            // Pagination
            const prevPage = document.getElementById('prevPage');
            if (prevPage) {
                prevPage.addEventListener('click', () => changePage(currentPage - 1));
            }
            
            const nextPage = document.getElementById('nextPage');
            if (nextPage) {
                nextPage.addEventListener('click', () => changePage(currentPage + 1));
            }
            
            // Form submission
            const storeForm = document.getElementById('storeForm');
            if (storeForm) {
                storeForm.addEventListener('submit', handleFormSubmit);
            }
            
            // Sidebar navigation
            document.querySelectorAll('.sidebar-item').forEach(item => {
                if (!item.getAttribute('href') || item.getAttribute('href') === '#') {
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));
                        this.classList.add('active');
                    });
                }
            });

            // Close modals when clicking outside
            document.querySelectorAll('.modal-overlay').forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeAllModals();
                    }
                });
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeAllModals();
                }
                if (e.ctrlKey && e.key === 'n') {
                    e.preventDefault();
                    openStoreModal();
                }
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function filterData() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            filteredData = storesData.filter(store => {
                const matchesSearch = !searchTerm || 
                    store.name.toLowerCase().includes(searchTerm) ||
                    store.description.toLowerCase().includes(searchTerm) ||
                    (store.manager && store.manager.toLowerCase().includes(searchTerm)) ||
                    (store.city && store.city.toLowerCase().includes(searchTerm));

                return matchesSearch;
            });

            currentPage = 1;
            renderTable();
        }

        function sortTable(field) {
            if (sortField === field) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortField = field;
                sortDirection = 'asc';
            }

            filteredData.sort((a, b) => {
                let aValue = a[field];
                let bValue = b[field];

                if (field === 'productsCount' || field === 'categoriesCount') {
                    aValue = parseInt(aValue) || 0;
                    bValue = parseInt(bValue) || 0;
                } else if (field === 'createdAt') {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                } else {
                    aValue = aValue ? aValue.toString().toLowerCase() : '';
                    bValue = bValue ? bValue.toString().toLowerCase() : '';
                }

                if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
                if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            renderTable();
            updateSortIcons();
        }

        function updateSortIcons() {
            document.querySelectorAll('.sortable i').forEach(icon => {
                icon.setAttribute('data-lucide', 'arrow-up-down');
            });

            if (sortField) {
                const activeHeader = document.querySelector(`[data-sort="${sortField}"] i`);
                if (activeHeader) {
                    activeHeader.setAttribute('data-lucide', sortDirection === 'asc' ? 'arrow-up' : 'arrow-down');
                }
            }

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function changeItemsPerPage() {
            itemsPerPage = parseInt(document.getElementById('perPageSelect').value);
            currentPage = 1;
            renderTable();
        }

        function changePage(page) {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (page >= 1 && page <= totalPages) {
                currentPage = page;
                renderTable();
            }
        }

        function renderTable() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);

            const tbody = document.getElementById('storesTableBody');
            tbody.innerHTML = '';

            pageData.forEach(store => {
                const initials = store.name.split(' ').map(word => word.charAt(0)).join('').substring(0, 2);
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="flex items-center gap-3">
                            <div class="store-avatar">${initials}</div>
                            <div>
                                <div class="font-medium">${store.name}</div>
                                <div class="text-xs text-muted-foreground">ID: ${store.id}</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div>
                            <div class="font-medium">${store.city || 'Non défini'}</div>
                            <div class="text-xs text-muted-foreground">${store.address || 'Adresse non définie'}</div>
                        </div>
                    </td>
                    <td class="font-semibold">${store.productsCount}</td>
                    <td class="font-semibold">${store.categoriesCount}</td>
                    <td class="font-semibold">${store.totalStock}</td>
                    <td>${store.manager || 'Non assigné'}</td>
                    <td>${formatDate(store.createdAt)}</td>
                    <td>
                        <div class="flex items-center gap-2">
                            <button class="btn btn-outline btn-sm" onclick="viewStore(${store.id})" title="Voir">
                                <i data-lucide="eye" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-secondary btn-sm" onclick="editStore(${store.id})" title="Modifier">
                                <i data-lucide="edit" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-destructive btn-sm" onclick="deleteStore(${store.id})" title="Supprimer">
                                <i data-lucide="trash-2" class="w-3 h-3"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
            updatePagination();
        }

        function updatePagination() {
            const totalItems = filteredData.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage + 1;
            const endIndex = Math.min(startIndex + itemsPerPage - 1, totalItems);

            // Update showing text
            document.getElementById('showingFrom').textContent = totalItems > 0 ? startIndex : 0;
            document.getElementById('showingTo').textContent = totalItems > 0 ? endIndex : 0;
            document.getElementById('totalResults').textContent = totalItems;

            // Update pagination buttons
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;

            // Generate pagination numbers
            const paginationContainer = document.getElementById('paginationNumbers');
            paginationContainer.innerHTML = '';

            if (totalPages <= 7) {
                for (let i = 1; i <= totalPages; i++) {
                    createPageButton(i, paginationContainer);
                }
            } else {
                createPageButton(1, paginationContainer);

                if (currentPage > 4) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                const start = Math.max(2, currentPage - 2);
                const end = Math.min(totalPages - 1, currentPage + 2);

                for (let i = start; i <= end; i++) {
                    createPageButton(i, paginationContainer);
                }

                if (currentPage < totalPages - 3) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                if (totalPages > 1) {
                    createPageButton(totalPages, paginationContainer);
                }
            }
        }

        function createPageButton(pageNumber, container) {
            const button = document.createElement('button');
            button.className = `btn btn-sm ${pageNumber === currentPage ? 'btn-primary' : 'btn-outline'}`;
            button.textContent = pageNumber;
            button.onclick = () => changePage(pageNumber);
            container.appendChild(button);
        }

        function openStoreModal(storeId = null) {
            editingStoreId = storeId;
            const modal = document.getElementById('storeModal');
            const modalTitle = document.getElementById('modalTitle');
            const submitButton = document.getElementById('submitButtonText');
            const submitIcon = document.getElementById('submitIcon');
            const form = document.getElementById('storeForm');
            
            if (storeId) {
                const store = storesData.find(s => s.id === storeId);
                if (store) {
                    modalTitle.textContent = 'Modifier le magasin';
                    submitButton.textContent = 'Modifier';
                    submitIcon.setAttribute('data-lucide', 'save');
                    
                    // Fill form with store data
                    document.getElementById('storeName').value = store.name;
                    document.getElementById('storeDescription').value = store.description;
                    document.getElementById('storeCity').value = store.city || '';
                    document.getElementById('storeZipCode').value = store.zipCode || '';
                    document.getElementById('storeAddress').value = store.address || '';
                    document.getElementById('AmaZup').value = store.manager || '';
                    document.getElementById('storePhone').value = store.phone || '';
                    document.getElementById('storeEmail').value = store.email || '';
                }
            } else {
                modalTitle.textContent = 'Ajouter un magasin';
                submitButton.textContent = 'Ajouter';
                submitIcon.setAttribute('data-lucide', 'plus');
                form.reset();
            }
            
            modal.classList.add('show');
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function closeStoreModal() {
            document.getElementById('storeModal').classList.remove('show');
            editingStoreId = null;
        }

        function viewStore(storeId) {
            viewingStoreId = storeId;
            const store = storesData.find(s => s.id === storeId);
            if (store) {
                const initials = store.name.split(' ').map(word => word.charAt(0)).join('').substring(0, 2);
                
                document.getElementById('viewStoreAvatar').textContent = initials;
                document.getElementById('viewStoreName').textContent = store.name;
                document.getElementById('viewStoreLocation').textContent = `${store.city || 'Ville non définie'} - ${store.address || 'Adresse non définie'}`;
                document.getElementById('viewStoreDescription').textContent = store.description || 'Aucune description';
                document.getElementById('viewAmaZup').textContent = store.manager || 'Non assigné';
                document.getElementById('viewStoreProducts').textContent = store.productsCount;
                document.getElementById('viewStoreCategories').textContent = store.categoriesCount;
                document.getElementById('viewStoreStock').textContent = store.totalStock;
                document.getElementById('viewStoreCreated').textContent = formatDate(store.createdAt);
                
                // Populate stocks details
                const stocksContainer = document.getElementById('viewStoreStocks');
                stocksContainer.innerHTML = '';
                
                if (store.stocks && store.stocks.length > 0) {
                    store.stocks.forEach(stock => {
                        const stockItem = document.createElement('div');
                        stockItem.className = 'flex justify-between items-center text-sm';
                        stockItem.innerHTML = `
                            <span>Produit ID: ${stock.productId}</span>
                            <div class="flex gap-4">
                                <span class="text-muted-foreground">Stock: ${stock.quantityAvailable}</span>
                                <span class="text-warning">Seuil: ${stock.criticalThreshold}</span>
                                ${stock.quantityAvailable <= stock.criticalThreshold ? 
                                    '<span class="badge badge-warning">Critique</span>' : 
                                    '<span class="badge badge-success">OK</span>'
                                }
                            </div>
                        `;
                        stocksContainer.appendChild(stockItem);
                    });
                } else {
                    stocksContainer.innerHTML = '<p class="text-muted-foreground text-sm">Aucun stock enregistré</p>';
                }
                
                document.getElementById('viewStoreModal').classList.add('show');
            }
        }

        function closeViewStoreModal() {
            document.getElementById('viewStoreModal').classList.remove('show');
            viewingStoreId = null;
        }

        function editStoreFromView() {
            closeViewStoreModal();
            openStoreModal(viewingStoreId);
        }

        function deleteStore(storeId) {
            deletingStoreId = storeId;
            const store = storesData.find(s => s.id === storeId);
            if (store) {
                document.getElementById('deleteStoreName').textContent = store.name;
                document.getElementById('deleteModal').classList.add('show');
            }
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.remove('show');
            deletingStoreId = null;
        }

        async function confirmDelete() {
            if (!deletingStoreId) return;
            
            const deleteButton = document.getElementById('deleteButton');
            const originalContent = deleteButton.innerHTML;
            
            // Set loading state
            deleteButton.disabled = true;
            deleteButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Suppression...';
            
            try {
                await storeService.deleteStore(deletingStoreId);
                
                // Remove from local data
                const index = storesData.findIndex(s => s.id === deletingStoreId);
                if (index !== -1) {
                    storesData.splice(index, 1);
                }
                
                showToast('Magasin supprimé avec succès', 'success');
                updateStats();
                filterData();
                closeDeleteModal();
                
            } catch (error) {
                console.error('Erreur lors de la suppression:', error);
                showToast('Erreur lors de la suppression du magasin', 'error');
            } finally {
                deleteButton.disabled = false;
                deleteButton.innerHTML = originalContent;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        }

        function closeAllModals() {
            closeStoreModal();
            closeViewStoreModal();
            closeDeleteModal();
        }

        async function handleFormSubmit(event) {
            event.preventDefault();
            
            const submitButton = document.getElementById('submitButton');
            const originalContent = submitButton.innerHTML;
            
            const name = document.getElementById('storeName').value;
            const description = document.getElementById('storeDescription').value;
            const city = document.getElementById('storeCity').value;
            const zipCode = document.getElementById('storeZipCode').value;
            const address = document.getElementById('storeAddress').value;
            const manager = document.getElementById('AmaZup').value;
            const phone = document.getElementById('storePhone').value;
            const email = document.getElementById('storeEmail').value;
            
            // Validate email format if provided
            if (email) {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    showToast('Veuillez entrer une adresse email valide', 'error');
                    return;
                }
            }
            
            // Set loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Traitement...';
            
            try {
                if (editingStoreId) {
                    // Update existing store
                    const storeData = {
                        name: name,
                        description: description
                    };
                    
                    await storeService.updateStore(editingStoreId, storeData);
                    
                    // Update local data
                    const storeIndex = storesData.findIndex(s => s.id === editingStoreId);
                    if (storeIndex !== -1) {
                        storesData[storeIndex] = {
                            ...storesData[storeIndex],
                            ...storeData,
                            city,
                            zipCode,
                            address,
                            manager,
                            phone,
                            email,
                            updatedAt: new Date().toISOString()
                        };
                    }
                    
                    showToast('Magasin modifié avec succès', 'success');
                    
                } else {
                    // Create new store
                    const storeData = {
                        name: name,
                        description: description
                    };
                    
                    const newStore = await storeService.createStore(storeData);
                    
                    // Add to local data
                    const storeToAdd = {
                        id: newStore.id || Math.max(...storesData.map(s => s.id)) + 1,
                        name: name,
                        description: description,
                        city,
                        zipCode,
                        address,
                        manager,
                        phone,
                        email,
                        productsCount: 0,
                        categoriesCount: 0,
                        stocks: [],
                        totalStock: 0,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    };
                    
                    storesData.push(storeToAdd);
                    showToast('Magasin ajouté avec succès', 'success');
                }
                
                updateStats();
                filterData();
                closeStoreModal();
                
            } catch (error) {
                console.error('Erreur lors de l\'opération:', error);
                showToast(error.message || 'Erreur lors de l\'opération', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalContent;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        }

        function updateStats() {
            document.getElementById('totalStores').textContent = storesData.length;
            document.getElementById('totalProducts').textContent = storesData.reduce((sum, store) => sum + store.productsCount, 0);
            document.getElementById('totalCategories').textContent = storesData.reduce((sum, store) => sum + store.categoriesCount, 0);
            document.getElementById('totalStock').textContent = storesData.reduce((sum, store) => sum + store.totalStock, 0);
        }

        function editStore(storeId) {
            openStoreModal(storeId);
        }
    </script>
</body>
</html>