<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Utilisateurs - AmaZup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        border: "hsl(214.3 31.8% 91.4%)",
                        input: "hsl(214.3 31.8% 91.4%)",
                        ring: "hsl(222.2 84% 4.9%)",
                        background: "hsl(0 0% 100%)",
                        foreground: "hsl(222.2 84% 4.9%)",
                        primary: {
                            DEFAULT: "hsl(222.2 47.4% 11.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        secondary: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84.2% 60.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        muted: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(215.4 16.3% 46.9%)",
                        },
                        accent: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        success: {
                            DEFAULT: "hsl(142 76% 36%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        warning: {
                            DEFAULT: "hsl(45 93% 47%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        info: {
                            DEFAULT: "hsl(204 94% 49%)",
                            foreground: "hsl(210 40% 98%)",
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        
        .card {
            border-radius: 0.5rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            color: hsl(222.2 84% 4.9%);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        
        .card-header {
            display: flex;
            flex-direction: column;
            space-y: 1.5rem;
            padding: 1.5rem;
        }
        
        .card-content {
            padding: 1.5rem;
            padding-top: 0;
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
            padding: 0.5rem 1rem;
            height: 2.5rem;
            border: none;
        }
        
        .btn-primary {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-primary:hover {
            background: hsl(222.2 47.4% 11.2% / 0.9);
        }
        
        .btn-secondary {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .btn-secondary:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .btn-outline {
            background: transparent;
            color: hsl(222.2 84% 4.9%);
            border: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        .btn-outline:hover {
            background: hsl(210 40% 96%);
        }
        
        .btn-destructive {
            background: hsl(0 84.2% 60.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-destructive:hover {
            background: hsl(0 84.2% 60.2% / 0.9);
        }
        
        .btn-sm {
            height: 2rem;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
        }
        
        .input {
            display: flex;
            height: 2.5rem;
            width: 100%;
            border-radius: 0.375rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            transition: all 0.2s;
        }
        
        .input:focus {
            outline: none;
            border-color: hsl(222.2 84% 4.9%);
            box-shadow: 0 0 0 2px hsl(222.2 84% 4.9% / 0.2);
        }
        
        .textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            color: hsl(215.4 16.3% 46.9%);
            transition: all 0.2s;
            cursor: pointer;
            text-decoration: none;
        }
        
        .sidebar-item:hover {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .sidebar-item.active {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        th {
            background: hsl(210 40% 96%);
            font-weight: 600;
            font-size: 0.875rem;
            color: hsl(222.2 84% 4.9%);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        tbody tr:hover {
            background: hsl(210 40% 96% / 0.5);
        }
        
        .sortable {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            width: 100%;
            max-width: 600px;
            margin: 1rem;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9) translateY(-20px);
            transition: transform 0.3s ease;
        }
        
        .modal-overlay.show .modal-content {
            transform: scale(1) translateY(0);
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: hsl(210 40% 96%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: hsl(222.2 47.4% 11.2%);
        }
        
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
        }
        
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .badge-success {
            background: hsl(142 76% 36% / 0.1);
            color: hsl(142 76% 36%);
        }
        
        .badge-destructive {
            background: hsl(0 84.2% 60.2% / 0.1);
            color: hsl(0 84.2% 60.2%);
        }
        
        .badge-secondary {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .password-strength {
            height: 4px;
            background: #e2e8f0;
            border-radius: 3px;
            margin-top: 0.3rem;
            overflow: hidden;
        }
        
        .strength-meter {
            height: 100%;
            width: 0;
            background: #ef4444;
            transition: width 0.3s, background 0.3s;
        }
        
        .password-requirements {
            margin-top: 0.3rem;
            color: #64748b;
            font-size: 0.7rem;
        }
        
        .requirement {
            display: flex;
            align-items: center;
            margin-bottom: 0.15rem;
        }
        
        .requirement i {
            margin-right: 0.3rem;
            font-size: 0.6rem;
            width: 10px;
            color: #64748b;
            transition: color 0.3s ease;
        }
        
        .requirement.met i {
            color: #10b981;
        }
    </style>
</head>
<body class="bg-muted/30">
    <!-- Sidebar -->
    <aside class="fixed left-0 top-0 h-full w-64 bg-background border-r border-border sidebar-transition z-50">
      <!-- Logo -->
      <div class="flex items-center px-6 py-4 border-b border-border">
          <div class="flex items-center justify-center w-8 h-8 bg-primary rounded-md mr-3">
              <i data-lucide="store" class="w-4 h-4 text-primary-foreground"></i>
          </div>
          <span class="text-xl font-bold text-foreground">AmaZup</span>
      </div>
      
      <!-- User Profile -->
      <div class="px-6 py-4 border-b border-border">
          <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
                  <i data-lucide="user" class="w-5 h-5 text-primary"></i>
              </div>
              <div>
                  <p class="font-medium text-foreground">Admin</p>
                  <p class="text-sm text-muted-foreground">admin@amazup.shop</p>
              </div>
          </div>
      </div>
      
      <!-- Navigation -->
      <nav class="px-4 py-4">
          <div class="space-y-2">
              <a href="/admin" class="sidebar-item" data-page="dashboard">
                  <i data-lucide="layout-dashboard" class="w-4 h-4 mr-3"></i>
                  Tableau de bord
              </a>
              
              <a href="/admin/stores" class="sidebar-item" data-page="stores">
                  <i data-lucide="store" class="w-4 h-4 mr-3"></i>
                  Magasins
              </a>
              
              <a href="/admin/products" class="sidebar-item" data-page="products">
                  <i data-lucide="package" class="w-4 h-4 mr-3"></i>
                  Produits
              </a>
              
              <a href="/admin/categories" class="sidebar-item" data-page="categories">
                  <i data-lucide="tag" class="w-4 h-4 mr-3"></i>
                  Catégories
              </a>
              
              <a href="/admin/stocks" class="sidebar-item" data-page="inventory">
                  <i data-lucide="warehouse" class="w-4 h-4 mr-3"></i>
                  Stocks
              </a>
              
              <a href="/admin/transfers" class="sidebar-item" data-page="transfers">
                  <i data-lucide="truck" class="w-4 h-4 mr-3"></i>
                  Transferts
              </a>
              
              <a href="#" class="sidebar-item active" data-page="users">
                  <i data-lucide="users" class="w-4 h-4 mr-3"></i>
                  Utilisateurs
              </a>
          </div>
          
          <div class="mt-8 pt-4 border-t border-border">
              <a href="/logout" class="sidebar-item text-destructive hover:bg-destructive/10 hover:text-destructive">
                  <i data-lucide="log-out" class="w-4 h-4 mr-3"></i>
                  Se déconnecter
              </a>
          </div>
      </nav>
  </aside>

    <!-- Main Content -->
    <main class="ml-64 min-h-screen">
        <!-- Header -->
        <header class="bg-background border-b border-border px-6 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-foreground">Gestion des Utilisateurs</h1>
                    <p class="text-muted-foreground">Administrez les accès et permissions</p>
                </div>
                
                <div class="flex items-center space-x-4">
                    <button class="btn btn-primary" onclick="openUserModal()">
                        <i data-lucide="user-plus" class="w-4 h-4 mr-2"></i>
                        Ajouter un utilisateur
                    </button>
                    
                    <div class="relative">
                        <button class="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                            <i data-lucide="bell" class="w-4 h-4 text-muted-foreground"></i>
                        </button>
                        <span class="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full"></span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Users Management Content -->
        <div class="p-6">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Total Utilisateurs</p>
                                <p class="text-2xl font-bold" id="totalUsers"><%= userCount %></p>
                            </div>
                            <div class="w-12 h-12 bg-info/10 rounded-full flex items-center justify-center">
                                <i data-lucide="users" class="w-6 h-6 text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Utilisateurs Actifs</p>
                                <p class="text-2xl font-bold" id="activeUsers"><%= users.filter(u => u.isActive).length %></p>
                            </div>
                            <div class="w-12 h-12 bg-success/10 rounded-full flex items-center justify-center">
                                <i data-lucide="user-check" class="w-6 h-6 text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Utilisateurs Inactifs</p>
                                <p class="text-2xl font-bold" id="inactiveUsers"><%= users.filter(u => !u.isActive).length %></p>
                            </div>
                            <div class="w-12 h-12 bg-warning/10 rounded-full flex items-center justify-center">
                                <i data-lucide="user-x" class="w-6 h-6 text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Dernières connexions</p>
                                <p class="text-2xl font-bold" id="recentLogins"><%= users.filter(u => u.lastLogin && new Date(u.lastLogin) > new Date(Date.now() - 7*24*60*60*1000)).length %></p>
                            </div>
                            <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                                <i data-lucide="clock" class="w-6 h-6 text-primary"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Filters and Search -->
            <div class="card mb-6">
                <div class="card-content" style="padding: 1.5rem;">
                    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
                        <div class="flex flex-col sm:flex-row gap-4 flex-1">
                            <!-- Search -->
                            <div class="relative flex-1 max-w-md">
                                <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground"></i>
                                <input type="text" class="input pl-10" placeholder="Rechercher un utilisateur..." id="searchInput">
                            </div>
                            
                            <!-- Status Filter -->
                            <select class="input select w-48" id="statusFilter">
                                <option value="">Tous les statuts</option>
                                <option value="active">Actif</option>
                                <option value="inactive">Inactif</option>
                            </select>
                        </div>
                        
                        <div class="flex items-center gap-4">
                            <!-- Results per page -->
                            <div class="flex items-center gap-2">
                                <span class="text-sm text-muted-foreground">Afficher:</span>
                                <select class="input select w-20" id="perPageSelect">
                                    <option value="5">5</option>
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            
                            <!-- Export -->
                            <button class="btn btn-outline">
                                <i data-lucide="download" class="w-4 h-4 mr-2"></i>
                                Exporter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Users Table -->
            <div class="card">
                <div class="overflow-x-auto">
                    <table id="usersTable">
                        <thead>
                            <tr>
                                <th>Utilisateur</th>
                                <th class="sortable" data-sort="email">
                                    <div class="flex items-center gap-2">
                                        Email
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="lastLogin">
                                    <div class="flex items-center gap-2">
                                        Dernière connexion
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="isActive">
                                    <div class="flex items-center gap-2">
                                        Statut
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="createdAt">
                                    <div class="flex items-center gap-2">
                                        Date de création
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="flex items-center justify-between p-4 border-t border-border">
                    <div class="text-sm text-muted-foreground">
                        Affichage de <span id="showingFrom">1</span> à <span id="showingTo">10</span> sur <span id="totalResults">0</span> résultats
                    </div>
                    
                    <div class="flex items-center gap-2">
                        <button class="btn btn-outline btn-sm" id="prevPage" disabled>
                            <i data-lucide="chevron-left" class="w-4 h-4"></i>
                        </button>
                        
                        <div class="flex items-center gap-1" id="paginationNumbers">
                            <!-- Pagination numbers will be generated by JavaScript -->
                        </div>
                        
                        <button class="btn btn-outline btn-sm" id="nextPage">
                            <i data-lucide="chevron-right" class="w-4 h-4"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- User Modal (Add/Edit) -->
    <div class="modal-overlay" id="userModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground" id="modalTitle">Ajouter un utilisateur</h2>
                <button class="btn btn-outline btn-sm" onclick="closeUserModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <form id="userForm">
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Prénom</label>
                            <input type="text" class="input" id="firstName" required>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Nom</label>
                            <input type="text" class="input" id="lastName" required>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Email</label>
                        <input type="email" class="input" id="email" required>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Statut</label>
                        <select class="input select" id="userStatus" required>
                            <option value="true">Actif</option>
                            <option value="false">Inactif</option>
                        </select>
                    </div>
                    
                    <div id="passwordSection">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Mot de passe</label>
                            <div class="relative">
                                <input type="password" class="input w-full" id="password" required>
                                <span class="password-toggle" onclick="togglePasswordVisibility('password')">
                                    <i data-lucide="eye" class="w-4 h-4 text-muted-foreground"></i>
                                </span>
                            </div>
                            <div class="password-strength">
                                <div class="strength-meter" id="passwordStrength"></div>
                            </div>
                            <div class="password-requirements">
                                <div class="requirement" id="reqLength"><i data-lucide="circle" class="w-3 h-3"></i> 8 caractères minimum</div>
                                <div class="requirement" id="reqNumber"><i data-lucide="circle" class="w-3 h-3"></i> Au moins un chiffre</div>
                                <div class="requirement" id="reqUpper"><i data-lucide="circle" class="w-3 h-3"></i> Au moins une majuscule</div>
                                <div class="requirement" id="reqSpecial"><i data-lucide="circle" class="w-3 h-3"></i> Au moins un caractère spécial</div>
                            </div>
                        </div>
                        
                        <div class="mt-4">
                            <label class="block text-sm font-medium text-foreground mb-2">Confirmer le mot de passe</label>
                            <div class="relative">
                                <input type="password" class="input w-full" id="confirmPassword" required>
                                <span class="password-toggle" onclick="togglePasswordVisibility('confirmPassword')">
                                    <i data-lucide="eye" class="w-4 h-4 text-muted-foreground"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" class="btn btn-outline" onclick="closeUserModal()">Annuler</button>
                    <button type="submit" class="btn btn-primary" id="submitButton">
                        <i data-lucide="plus" class="w-4 h-4 mr-2" id="submitIcon"></i>
                        <span id="submitButtonText">Ajouter</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- View User Modal -->
    <div class="modal-overlay" id="viewUserModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground">Détails de l'utilisateur</h2>
                <button class="btn btn-outline btn-sm" onclick="closeViewUserModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
                <div class="space-y-6">
                  <div class="flex items-center gap-4">
                      <div class="user-avatar text-lg" id="viewUserAvatar"></div>
                      <div>
                          <h3 class="text-lg font-semibold" id="viewUserName"></h3>
                          <p class="text-muted-foreground" id="viewUserEmail"></p>
                      </div>
                  </div>
                  
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                          <label class="block text-sm font-medium text-muted-foreground mb-1">Statut</label>
                          <div id="viewUserStatus"></div>
                      </div>
                      
                      <div>
                          <label class="block text-sm font-medium text-muted-foreground mb-1">ID</label>
                          <p class="text-sm" id="viewUserId"></p>
                      </div>
                      
                      <div>
                          <label class="block text-sm font-medium text-muted-foreground mb-1">Dernière connexion</label>
                          <p class="text-sm" id="viewUserLastLogin"></p>
                      </div>
                      
                      <div>
                          <label class="block text-sm font-medium text-muted-foreground mb-1">Date de création</label>
                          <p class="text-sm" id="viewUserCreatedAt"></p>
                      </div>
                      
                      <div class="md:col-span-2">
                          <label class="block text-sm font-medium text-muted-foreground mb-1">Dernière modification</label>
                          <p class="text-sm" id="viewUserUpdatedAt"></p>
                      </div>
                  </div>
                  
                  <div class="flex justify-end gap-3">
                      <button type="button" class="btn btn-outline" onclick="closeViewUserModal()">Fermer</button>
                      <button type="button" class="btn btn-secondary" onclick="editUserFromView()">
                          <i data-lucide="edit" class="w-4 h-4 mr-2"></i>
                          Modifier
                      </button>
                  </div>
              </div>
          </div>
      </div>
  
      <!-- Delete Confirmation Modal -->
      <div class="modal-overlay" id="deleteModal">
          <div class="modal-content max-w-md">
              <div class="flex items-center gap-3 mb-4">
                  <div class="w-12 h-12 bg-destructive/10 rounded-full flex items-center justify-center">
                      <i data-lucide="alert-triangle" class="w-6 h-6 text-destructive"></i>
                  </div>
                  <div>
                      <h2 class="text-lg font-bold text-foreground">Confirmer la suppression</h2>
                      <p class="text-sm text-muted-foreground">Cette action est irréversible</p>
                  </div>
              </div>
              
              <div class="mb-6">
                  <p class="text-sm text-foreground">
                      Êtes-vous sûr de vouloir supprimer l'utilisateur <span class="font-semibold" id="deleteUserName"></span> ?
                  </p>
                  <p class="text-sm text-muted-foreground mt-2">
                      Toutes les données associées à cet utilisateur seront définitivement supprimées.
                  </p>
              </div>
              
              <div class="flex justify-end gap-3">
                  <button type="button" class="btn btn-outline" onclick="closeDeleteModal()">Annuler</button>
                  <button type="button" class="btn btn-destructive" onclick="confirmDelete()" id="deleteButton">
                      <i data-lucide="trash-2" class="w-4 h-4 mr-2"></i>
                      Supprimer
                  </button>
              </div>
          </div>
      </div>
  
      <!-- Include Toast Partials -->
      <%- include('../partials/toasts') %>
  
      <script>
          // Configuration de l'API
          const API_BASE_URL = '/api/v1';
          
          // Données utilisateurs provenant du serveur
          const usersData = <%- JSON.stringify(users) %>;
          const originalUsersData = [...usersData];
  
          let currentPage = 1;
          let itemsPerPage = 10;
          let sortField = null;
          let sortDirection = 'asc';
          let filteredData = [...usersData];
          let editingUserId = null;
          let deletingUserId = null;
          let viewingUserId = null;
  
          // Initialize
          document.addEventListener('DOMContentLoaded', function() {
              console.log('DOM loaded, initializing users page...');
              
              // Initialize Lucide icons
              if (typeof lucide !== 'undefined') {
                  lucide.createIcons();
                  console.log('Lucide icons initialized');
              }
  
              renderTable();
              setupEventListeners();
              console.log('Users page initialized successfully');
          });
  
          // Service d'authentification
          class UserService {
              constructor() {
                  this.baseUrl = API_BASE_URL;
              }
              
              async signup(email) {
                  try {
                      const response = await fetch(`${this.baseUrl}/auth/signup`, {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json',
                          },
                          body: JSON.stringify({ email })
                      });
                      
                      if (!response.ok) {
                          const errorData = await response.json();
                          throw new Error(errorData.message || 'Erreur lors de la récupération des informations');
                      }
                      
                      return await response.json();
                  } catch (error) {
                      throw error;
                  }
              }
              
              async signupValidate(data) {
                  try {
                      const response = await fetch(`${this.baseUrl}/auth/signupValidate`, {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(data)
                      });
                      
                      if (!response.ok) {
                          const errorData = await response.json();
                          throw new Error(errorData.message || 'Erreur lors de la création');
                      }
                      
                      return await response.json();
                  } catch (error) {
                      throw error;
                  }
              }
  
              async updateUser(userId, data) {
                  try {
                      const response = await fetch(`${this.baseUrl}/users/${userId}`, {
                          method: 'PUT',
                          headers: {
                              'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(data)
                      });
                      
                      if (!response.ok) {
                          const errorData = await response.json();
                          throw new Error(errorData.message || 'Erreur lors de la modification');
                      }
                      
                      return await response.json();
                  } catch (error) {
                      throw error;
                  }
              }
  
              async deleteUser(userId) {
                  try {
                      const response = await fetch(`${this.baseUrl}/users/${userId}`, {
                          method: 'DELETE',
                          headers: {
                              'Content-Type': 'application/json',
                          }
                      });
                      
                      if (!response.ok) {
                          const errorData = await response.json();
                          throw new Error(errorData.message || 'Erreur lors de la suppression');
                      }
                      
                      return await response.json();
                  } catch (error) {
                      throw error;
                  }
              }
          }
  
          const userService = new UserService();
  
          // Fonction de proof of work
          function calculateProofOfWork(challenge, difficulty) {
              let proof = 0;
              const prefix = "0".repeat(parseInt(difficulty));
              
              while (true) {
                  const hash = CryptoJS.SHA256(challenge + proof).toString(CryptoJS.enc.Hex);
                  if (hash.startsWith(prefix)) {
                      return proof;
                  }
                  proof++;
              }
          }
  
          function getStatusText(isActive) {
              return isActive ? 'Actif' : 'Inactif';
          }
  
          function getStatusBadgeClass(isActive) {
              return isActive ? 'badge-success' : 'badge-destructive';
          }
  
          function formatDate(dateString) {
              if (!dateString) return '-';
              const date = new Date(dateString);
              return date.toLocaleDateString('fr-FR', {
                  day: '2-digit',
                  month: '2-digit',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
              });
          }
  
          function checkPasswordStrength() {
              const password = document.getElementById('password').value;
              const strengthBar = document.getElementById('passwordStrength');
              const requirements = {
                  reqLength: password.length >= 8,
                  reqNumber: /\d/.test(password),
                  reqUpper: /[A-Z]/.test(password),
                  reqSpecial: /[!@#$%^&*(),.?":{}|<>]/.test(password)
              };
              
              let strength = 0;
              
              // Update requirements and calculate strength
              Object.keys(requirements).forEach(reqId => {
                  const element = document.getElementById(reqId);
                  if (element) {
                      element.classList.toggle('met', requirements[reqId]);
                      if (requirements[reqId]) strength += 25;
                  }
              });
              
              // Update strength bar
              if (strengthBar) {
                  strengthBar.style.width = strength + '%';
                  
                  if (strength < 50) {
                      strengthBar.style.background = '#ef4444';
                  } else if (strength < 75) {
                      strengthBar.style.background = '#f59e0b';
                  } else {
                      strengthBar.style.background = '#10b981';
                  }
              }
          }
  
          function setupEventListeners() {
              console.log('Setting up event listeners...');
              
              // Search
              const searchInput = document.getElementById('searchInput');
              if (searchInput) {
                  searchInput.addEventListener('input', debounce(filterData, 300));
              }
              
              // Filters
              const statusFilter = document.getElementById('statusFilter');
              if (statusFilter) {
                  statusFilter.addEventListener('change', filterData);
              }
              
              const perPageSelect = document.getElementById('perPageSelect');
              if (perPageSelect) {
                  perPageSelect.addEventListener('change', changeItemsPerPage);
              }
              
              // Sorting
              document.querySelectorAll('.sortable').forEach(header => {
                  header.addEventListener('click', () => sortTable(header.dataset.sort));
              });
              
              // Pagination
              const prevPage = document.getElementById('prevPage');
              if (prevPage) {
                  prevPage.addEventListener('click', () => changePage(currentPage - 1));
              }
              
              const nextPage = document.getElementById('nextPage');
              if (nextPage) {
                  nextPage.addEventListener('click', () => changePage(currentPage + 1));
              }
              
              // Form submission
              const userForm = document.getElementById('userForm');
              if (userForm) {
                  userForm.addEventListener('submit', handleFormSubmit);
              }
  
              // Password strength check
              const passwordField = document.getElementById('password');
              if (passwordField) {
                  passwordField.addEventListener('input', checkPasswordStrength);
              }
              
              // Sidebar navigation
              document.querySelectorAll('.sidebar-item').forEach(item => {
                if (!item.getAttribute('href') || item.getAttribute('href') === '#') {
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));
                        this.classList.add('active');
                    });
                }
            });
  
              // Close modals when clicking outside
              document.querySelectorAll('.modal-overlay').forEach(modal => {
                  modal.addEventListener('click', function(e) {
                      if (e.target === this) {
                          closeAllModals();
                      }
                  });
              });
  
              // Keyboard shortcuts
              document.addEventListener('keydown', function(e) {
                  if (e.key === 'Escape') {
                      closeAllModals();
                  }
                  if (e.ctrlKey && e.key === 'n') {
                      e.preventDefault();
                      openUserModal();
                  }
              });
              
              console.log('All event listeners set up successfully');
          }
  
          function debounce(func, wait) {
              let timeout;
              return function executedFunction(...args) {
                  const later = () => {
                      clearTimeout(timeout);
                      func(...args);
                  };
                  clearTimeout(timeout);
                  timeout = setTimeout(later, wait);
              };
          }
  
          function filterData() {
              const searchTerm = document.getElementById('searchInput').value.toLowerCase();
              const statusFilter = document.getElementById('statusFilter').value;
  
              filteredData = usersData.filter(user => {
                  const fullName = `${user.firstname} ${user.lastname}`.toLowerCase();
                  const matchesSearch = !searchTerm || 
                      fullName.includes(searchTerm) ||
                      user.email.toLowerCase().includes(searchTerm);
                  
                  let matchesStatus = true;
                  if (statusFilter === 'active') {
                      matchesStatus = user.isActive === true;
                  } else if (statusFilter === 'inactive') {
                      matchesStatus = user.isActive === false;
                  }
  
                  return matchesSearch && matchesStatus;
              });
  
              currentPage = 1;
              renderTable();
          }
  
          function sortTable(field) {
              if (sortField === field) {
                  sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
              } else {
                  sortField = field;
                  sortDirection = 'asc';
              }
  
              filteredData.sort((a, b) => {
                  let aValue = a[field];
                  let bValue = b[field];
  
                  if (field === 'lastLogin' || field === 'createdAt') {
                      aValue = aValue ? new Date(aValue) : new Date(0);
                      bValue = bValue ? new Date(bValue) : new Date(0);
                  } else if (field === 'isActive') {
                      aValue = aValue ? 1 : 0;
                      bValue = bValue ? 1 : 0;
                  } else {
                      aValue = aValue ? aValue.toString().toLowerCase() : '';
                      bValue = bValue ? bValue.toString().toLowerCase() : '';
                  }
  
                  if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
                  if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
                  return 0;
              });
  
              renderTable();
              updateSortIcons();
          }
  
          function updateSortIcons() {
              document.querySelectorAll('.sortable i').forEach(icon => {
                  icon.setAttribute('data-lucide', 'arrow-up-down');
              });
  
              if (sortField) {
                  const activeHeader = document.querySelector(`[data-sort="${sortField}"] i`);
                  if (activeHeader) {
                      activeHeader.setAttribute('data-lucide', sortDirection === 'asc' ? 'arrow-up' : 'arrow-down');
                  }
              }
  
              if (typeof lucide !== 'undefined') {
                  lucide.createIcons();
              }
          }
  
          function changeItemsPerPage() {
              itemsPerPage = parseInt(document.getElementById('perPageSelect').value);
              currentPage = 1;
              renderTable();
          }
  
          function changePage(page) {
              const totalPages = Math.ceil(filteredData.length / itemsPerPage);
              if (page >= 1 && page <= totalPages) {
                  currentPage = page;
                  renderTable();
              }
          }
  
          function renderTable() {
              const startIndex = (currentPage - 1) * itemsPerPage;
              const endIndex = startIndex + itemsPerPage;
              const pageData = filteredData.slice(startIndex, endIndex);
  
              const tbody = document.getElementById('usersTableBody');
              tbody.innerHTML = '';
  
              pageData.forEach(user => {
                  const initials = `${user.firstname.charAt(0)}${user.lastname.charAt(0)}`;
                  
                  const row = document.createElement('tr');
                  row.innerHTML = `
                      <td>
                          <div class="flex items-center gap-3">
                              <div class="user-avatar">${initials}</div>
                              <div>
                                  <div class="font-medium">${user.firstname} ${user.lastname}</div>
                                  <div class="text-xs text-muted-foreground">ID: ${user.id}</div>
                              </div>
                          </div>
                      </td>
                      <td>${user.email}</td>
                      <td>
                          <div class="text-sm ${user.lastLogin ? '' : 'text-muted-foreground italic'}">
                              ${user.lastLogin ? formatDate(user.lastLogin) : 'Jamais'}
                          </div>
                      </td>
                      <td>
                          <span class="badge ${getStatusBadgeClass(user.isActive)}">
                              ${getStatusText(user.isActive)}
                          </span>
                      </td>
                      <td>
                          <div class="text-sm">
                              ${formatDate(user.createdAt)}
                          </div>
                      </td>
                      <td>
                          <div class="flex items-center gap-2">
                              <button class="btn btn-outline btn-sm" onclick="viewUser(${user.id})" title="Voir">
                                  <i data-lucide="eye" class="w-3 h-3"></i>
                              </button>
                              <button class="btn btn-secondary btn-sm" onclick="editUser(${user.id})" title="Modifier">
                                  <i data-lucide="edit" class="w-3 h-3"></i>
                              </button>
                              <button class="btn btn-destructive btn-sm" onclick="deleteUser(${user.id})" title="Supprimer">
                                  <i data-lucide="trash-2" class="w-3 h-3"></i>
                              </button>
                          </div>
                      </td>
                  `;
                  tbody.appendChild(row);
              });
  
              if (typeof lucide !== 'undefined') {
                  lucide.createIcons();
              }
              updatePagination();
          }
  
          function updatePagination() {
              const totalItems = filteredData.length;
              const totalPages = Math.ceil(totalItems / itemsPerPage);
              const startIndex = (currentPage - 1) * itemsPerPage + 1;
              const endIndex = Math.min(startIndex + itemsPerPage - 1, totalItems);
  
              // Update showing text
              document.getElementById('showingFrom').textContent = totalItems > 0 ? startIndex : 0;
              document.getElementById('showingTo').textContent = totalItems > 0 ? endIndex : 0;
              document.getElementById('totalResults').textContent = totalItems;
  
              // Update pagination buttons
              document.getElementById('prevPage').disabled = currentPage === 1;
              document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;
  
              // Generate pagination numbers
              const paginationContainer = document.getElementById('paginationNumbers');
              paginationContainer.innerHTML = '';
  
              if (totalPages <= 7) {
                  for (let i = 1; i <= totalPages; i++) {
                      createPageButton(i, paginationContainer);
                  }
              } else {
                  createPageButton(1, paginationContainer);
  
                  if (currentPage > 4) {
                      const ellipsis = document.createElement('span');
                      ellipsis.className = 'px-2 text-muted-foreground';
                      ellipsis.textContent = '...';
                      paginationContainer.appendChild(ellipsis);
                  }
  
                  const start = Math.max(2, currentPage - 2);
                  const end = Math.min(totalPages - 1, currentPage + 2);
  
                  for (let i = start; i <= end; i++) {
                      createPageButton(i, paginationContainer);
                  }
  
                  if (currentPage < totalPages - 3) {
                      const ellipsis = document.createElement('span');
                      ellipsis.className = 'px-2 text-muted-foreground';
                      ellipsis.textContent = '...';
                      paginationContainer.appendChild(ellipsis);
                  }
  
                  if (totalPages > 1) {
                      createPageButton(totalPages, paginationContainer);
                  }
              }
          }
  
          function createPageButton(pageNumber, container) {
              const button = document.createElement('button');
              button.className = `btn btn-sm ${pageNumber === currentPage ? 'btn-primary' : 'btn-outline'}`;
              button.textContent = pageNumber;
              button.onclick = () => changePage(pageNumber);
              container.appendChild(button);
          }
  
          function openUserModal(userId = null) {
              editingUserId = userId;
              const modal = document.getElementById('userModal');
              const modalTitle = document.getElementById('modalTitle');
              const submitButton = document.getElementById('submitButtonText');
              const submitIcon = document.getElementById('submitIcon');
              const form = document.getElementById('userForm');
              const passwordSection = document.getElementById('passwordSection');
              
              if (userId) {
                  const user = usersData.find(u => u.id === userId);
                  if (user) {
                      modalTitle.textContent = 'Modifier l\'utilisateur';
                      submitButton.textContent = 'Modifier';
                      submitIcon.setAttribute('data-lucide', 'save');
                      
                      // Fill form with user data
                      document.getElementById('firstName').value = user.firstname;
                      document.getElementById('lastName').value = user.lastname;
                      document.getElementById('email').value = user.email;
                      document.getElementById('userStatus').value = user.isActive.toString();
                      
                      // Hide password section for editing
                      passwordSection.style.display = 'none';
                      document.getElementById('password').required = false;
                      document.getElementById('confirmPassword').required = false;
                  }
              } else {
                  modalTitle.textContent = 'Ajouter un utilisateur';
                  submitButton.textContent = 'Ajouter';
                  submitIcon.setAttribute('data-lucide', 'plus');
                  form.reset();
                  document.getElementById('userStatus').value = 'true';
                  
                  // Show password section for new users
                  passwordSection.style.display = 'block';
                  document.getElementById('password').required = true;
                  document.getElementById('confirmPassword').required = true;
              }
              
              modal.classList.add('show');
              if (typeof lucide !== 'undefined') {
                  lucide.createIcons();
              }
          }
  
          function closeUserModal() {
              document.getElementById('userModal').classList.remove('show');
              editingUserId = null;
          }
  
          function viewUser(userId) {
              viewingUserId = userId;
              const user = usersData.find(u => u.id === userId);
              if (user) {
                  const initials = `${user.firstname.charAt(0)}${user.lastname.charAt(0)}`;
                  
                  document.getElementById('viewUserAvatar').textContent = initials;
                  document.getElementById('viewUserName').textContent = `${user.firstname} ${user.lastname}`;
                  document.getElementById('viewUserEmail').textContent = user.email;
                  document.getElementById('viewUserId').textContent = user.id;
                  document.getElementById('viewUserLastLogin').textContent = user.lastLogin ? formatDate(user.lastLogin) : 'Jamais';
                  document.getElementById('viewUserCreatedAt').textContent = formatDate(user.createdAt);
                  document.getElementById('viewUserUpdatedAt').textContent = formatDate(user.updatedAt);
                  
                  const statusElement = document.getElementById('viewUserStatus');
                  statusElement.innerHTML = `<span class="badge ${getStatusBadgeClass(user.isActive)}">${getStatusText(user.isActive)}</span>`;
                  
                  document.getElementById('viewUserModal').classList.add('show');
              }
          }
  
          function closeViewUserModal() {
              document.getElementById('viewUserModal').classList.remove('show');
              viewingUserId = null;
          }
  
          function editUserFromView() {
              closeViewUserModal();
              openUserModal(viewingUserId);
          }
  
          function deleteUser(userId) {
              deletingUserId = userId;
              const user = usersData.find(u => u.id === userId);
              if (user) {
                  document.getElementById('deleteUserName').textContent = `${user.firstname} ${user.lastname}`;
                  document.getElementById('deleteModal').classList.add('show');
              }
          }
  
          function closeDeleteModal() {
              document.getElementById('deleteModal').classList.remove('show');
              deletingUserId = null;
          }
  
          async function confirmDelete() {
              if (!deletingUserId) return;
              
              const deleteButton = document.getElementById('deleteButton');
              const originalContent = deleteButton.innerHTML;
              
              // Set loading state
              deleteButton.disabled = true;
              deleteButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Suppression...';
              
              try {
                  await userService.deleteUser(deletingUserId);
                  
                  // Remove from local data
                  const userIndex = usersData.findIndex(u => u.id === deletingUserId);
                  if (userIndex !== -1) {
                      usersData[userIndex].isActive = false;
                      usersData[userIndex].updatedAt = new Date().toISOString();
                  }
                  
                  showToast('Utilisateur supprimé avec succès', 'success');
                  updateStats();
                  filterData();
                  closeDeleteModal();
                  
              } catch (error) {
                  console.error('Erreur lors de la suppression:', error);
                  showToast('Erreur lors de la suppression de l\'utilisateur', 'error');
              } finally {
                  deleteButton.disabled = false;
                  deleteButton.innerHTML = originalContent;
                  if (typeof lucide !== 'undefined') {
                      lucide.createIcons();
                  }
              }
          }
  
          function closeAllModals() {
              closeUserModal();
              closeViewUserModal();
              closeDeleteModal();
          }
  
          function togglePasswordVisibility(fieldId) {
              const field = document.getElementById(fieldId);
              const toggleIcon = field.nextElementSibling.querySelector('i');
              
              if (field.type === 'password') {
                  field.type = 'text';
                  toggleIcon.setAttribute('data-lucide', 'eye-off');
              } else {
                  field.type = 'password';
                  toggleIcon.setAttribute('data-lucide', 'eye');
              }
              
              if (typeof lucide !== 'undefined') {
                  lucide.createIcons();
              }
          }
  
          async function handleFormSubmit(event) {
              event.preventDefault();
              
              const submitButton = document.getElementById('submitButton');
              const originalContent = submitButton.innerHTML;
              
              const firstName = document.getElementById('firstName').value;
              const lastName = document.getElementById('lastName').value;
              const email = document.getElementById('email').value;
              const status = document.getElementById('userStatus').value === 'true';
              const password = document.getElementById('password').value;
              const confirmPassword = document.getElementById('confirmPassword').value;
              
              // Validate email format
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              if (!emailRegex.test(email)) {
                  showToast('Veuillez entrer une adresse email valide', 'error');
                  return;
              }
              
              // Check if email already exists (excluding current user if editing)
              const existingUser = usersData.find(u => 
                  u.email.toLowerCase() === email.toLowerCase() && 
                  u.id !== editingUserId
              );
              
              if (existingUser) {
                  showToast('Un utilisateur avec cet email existe déjà', 'error');
                  return;
              }
              
              // Validate password for new users
              if (!editingUserId) {
                  if (password.length < 8) {
                      showToast('Le mot de passe doit contenir au moins 8 caractères', 'error');
                      return;
                  }
                  
                  if (password !== confirmPassword) {
                      showToast('Les mots de passe ne correspondent pas', 'error');
                      return;
                  }
                  
                  // Check password strength
                  const strengthBar = document.getElementById('passwordStrength');
                  if (strengthBar && strengthBar.style.width !== '100%') {
                      showToast('Veuillez créer un mot de passe plus fort', 'error');
                      return;
                  }
              }
              
              // Set loading state
              submitButton.disabled = true;
              submitButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Traitement...';
              
              try {
                  if (editingUserId) {
                      // Update existing user
                      const userData = {
                          firstname: firstName,
                          lastname: lastName,
                          email: email,
                          isActive: status
                      };
                      
                      await userService.updateUser(editingUserId, userData);
                      
                      // Update local data
                      const userIndex = usersData.findIndex(u => u.id === editingUserId);
                      if (userIndex !== -1) {
                          usersData[userIndex] = {
                              ...usersData[userIndex],
                              ...userData,
                              updatedAt: new Date().toISOString()
                          };
                      }
                      
                      showToast('Utilisateur modifié avec succès', 'success');
                      
                  } else {
                      // Create new user with password hashing
                      
                      // First, get salt and proof of work challenge
                      const signupResponse = await userService.signup(email);
                      const { salt, pow } = signupResponse;
                      
                      // Calculate proof of work
                      const proof = calculateProofOfWork(pow.challenge, pow.difficulty);
                      
                      // Hash password with salt
                      const hashPassword = CryptoJS.SHA256(password + salt).toString(CryptoJS.enc.Hex);
                      
                      // Create user
                      const userData = {
                          email: email,
                          firstname: firstName,
                          lastname: lastName,
                          hashPassword: hashPassword,
                          challenge: pow.challenge,
                          signature: pow.signature,
                          proof: proof
                      };
                      
                      const newUser = await userService.signupValidate(userData);
                      
                      // Add to local data
                      const userToAdd = {
                          id: newUser.id || Math.max(...usersData.map(u => u.id)) + 1,
                          firstname: firstName,
                          lastname: lastName,
                          email: email,
                          isActive: status,
                          lastLogin: null,
                          createdAt: new Date().toISOString(),
                          updatedAt: new Date().toISOString()
                      };
                      
                      usersData.push(userToAdd);
                      showToast('Utilisateur ajouté avec succès', 'success');
                  }
                  
                  updateStats();
                  filterData();
                  closeUserModal();
                  
              } catch (error) {
                  console.error('Erreur lors de l\'opération:', error);
                  showToast(error.message || 'Erreur lors de l\'opération', 'error');
              } finally {
                  submitButton.disabled = false;
                  submitButton.innerHTML = originalContent;
                  if (typeof lucide !== 'undefined') {
                      lucide.createIcons();
                  }
              }
          }
  
          function updateStats() {
              document.getElementById('totalUsers').textContent = usersData.length;
              document.getElementById('activeUsers').textContent = usersData.filter(u => u.isActive).length;
              document.getElementById('inactiveUsers').textContent = usersData.filter(u => !u.isActive).length;
              document.getElementById('recentLogins').textContent = usersData.filter(u => 
                  u.lastLogin && new Date(u.lastLogin) > new Date(Date.now() - 7*24*60*60*1000)
              ).length;
          }
  
          function editUser(userId) {
              openUserModal(userId);
          }
      </script>
  </body>
  </html>