<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Stocks - StoreManager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script> -->
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        border: "hsl(214.3 31.8% 91.4%)",
                        input: "hsl(214.3 31.8% 91.4%)",
                        ring: "hsl(222.2 84% 4.9%)",
                        background: "hsl(0 0% 100%)",
                        foreground: "hsl(222.2 84% 4.9%)",
                        primary: {
                            DEFAULT: "hsl(222.2 47.4% 11.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        secondary: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84.2% 60.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        muted: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(215.4 16.3% 46.9%)",
                        },
                        accent: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        success: {
                            DEFAULT: "hsl(142 76% 36%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        warning: {
                            DEFAULT: "hsl(45 93% 47%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        info: {
                            DEFAULT: "hsl(204 94% 49%)",
                            foreground: "hsl(210 40% 98%)",
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        
        .card {
            border-radius: 0.5rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            color: hsl(222.2 84% 4.9%);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        
        .card-header {
            display: flex;
            flex-direction: column;
            space-y: 1.5rem;
            padding: 1.5rem;
        }
        
        .card-content {
            padding: 1.5rem;
            padding-top: 0;
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
            padding: 0.5rem 1rem;
            height: 2.5rem;
            border: none;
        }
        
        .btn-primary {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-primary:hover {
            background: hsl(222.2 47.4% 11.2% / 0.9);
        }
        
        .btn-secondary {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .btn-secondary:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .btn-outline {
            background: transparent;
            color: hsl(222.2 84% 4.9%);
            border: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        .btn-outline:hover {
            background: hsl(210 40% 96%);
        }
        
        .btn-destructive {
            background: hsl(0 84.2% 60.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-destructive:hover {
            background: hsl(0 84.2% 60.2% / 0.9);
        }
        
        .btn-sm {
            height: 2rem;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
        }
        
        .input {
            display: flex;
            height: 2.5rem;
            width: 100%;
            border-radius: 0.375rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            transition: all 0.2s;
        }
        
        .input:focus {
            outline: none;
            border-color: hsl(222.2 84% 4.9%);
            box-shadow: 0 0 0 2px hsl(222.2 84% 4.9% / 0.2);
        }
        
        .textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            color: hsl(215.4 16.3% 46.9%);
            transition: all 0.2s;
            cursor: pointer;
            text-decoration: none;
        }
        
        .sidebar-item:hover {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .sidebar-item.active {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .badge {
            display: inline-flex;
            align-items: center;
            border-radius: 9999px;
            padding: 0.25rem 0.625rem;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-success {
            background: hsl(142 76% 36% / 0.1);
            color: hsl(142 76% 36%);
        }
        
        .badge-warning {
            background: hsl(45 93% 47% / 0.1);
            color: hsl(45 93% 47%);
        }
        
        .badge-destructive {
            background: hsl(0 84.2% 60.2% / 0.1);
            color: hsl(0 84.2% 60.2%);
        }
        
        .badge-info {
            background: hsl(204 94% 49% / 0.1);
            color: hsl(204 94% 49%);
        }
        
        .badge-secondary {
            background: hsl(210 40% 96%);
            color: hsl(215.4 16.3% 46.9%);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        th {
            background: hsl(210 40% 96%);
            font-weight: 600;
            font-size: 0.875rem;
            color: hsl(222.2 84% 4.9%);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        tbody tr:hover {
            background: hsl(210 40% 96% / 0.5);
        }
        
        .sortable {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
        }
        
        .modal-content {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            width: 100%;
            max-width: 600px;
            margin: 1rem;
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .low-stock {
            background-color: hsl(45 93% 47% / 0.1);
        }
        
        .critical-stock {
            background-color: hsl(0 84.2% 60.2% / 0.1);
        }
        
        .transfer-pending {
            background-color: hsl(45 93% 47% / 0.1);
        }
        
        .transfer-completed {
            background-color: hsl(142 76% 36% / 0.1);
        }
        
        .transfer-cancelled {
            background-color: hsl(0 84.2% 60.2% / 0.1);
        }
        
        .product-thumb {
            width: 50px;
            height: 50px;
            border-radius: 0.375rem;
            background-color: hsl(210 40% 96%);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        
        .product-thumb img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body class="bg-muted/30">
    <!-- Sidebar -->
    <aside class="fixed left-0 top-0 h-full w-64 bg-background border-r border-border sidebar-transition z-50">
        <!-- Logo -->
        <div class="flex items-center px-6 py-4 border-b border-border">
            <div class="flex items-center justify-center w-8 h-8 bg-primary rounded-md mr-3">
                <i data-lucide="store" class="w-4 h-4 text-primary-foreground"></i>
            </div>
            <span class="text-xl font-bold text-foreground">StoreManager</span>
        </div>
        
        <!-- User Profile -->
        <div class="px-6 py-4 border-b border-border">
            <div class="flex items-center space-x-3">
                <div class="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
                    <i data-lucide="user" class="w-5 h-5 text-primary"></i>
                </div>
                <div>
                    <p class="font-medium text-foreground">Admin User</p>
                    <p class="text-sm text-muted-foreground">admin@store.com</p>
                </div>
            </div>
        </div>
        
        <!-- Navigation -->
        <nav class="px-4 py-4">
            <div class="space-y-2">
                <a href="#" class="sidebar-item" data-page="dashboard">
                    <i data-lucide="layout-dashboard" class="w-4 h-4 mr-3"></i>
                    Dashboard
                </a>
                
                <a href="#" class="sidebar-item" data-page="stores">
                    <i data-lucide="store" class="w-4 h-4 mr-3"></i>
                    Magasins
                </a>
                
                <a href="#" class="sidebar-item" data-page="products">
                    <i data-lucide="package" class="w-4 h-4 mr-3"></i>
                    Produits
                </a>
                
                <a href="#" class="sidebar-item" data-page="categories">
                    <i data-lucide="tag" class="w-4 h-4 mr-3"></i>
                    Catégories
                </a>
                
                <a href="#" class="sidebar-item active" data-page="inventory">
                    <i data-lucide="warehouse" class="w-4 h-4 mr-3"></i>
                    Stocks
                </a>
                
                <a href="#" class="sidebar-item" data-page="transfers">
                    <i data-lucide="truck" class="w-4 h-4 mr-3"></i>
                    Transferts
                </a>
                
                <a href="#" class="sidebar-item" data-page="users">
                    <i data-lucide="users" class="w-4 h-4 mr-3"></i>
                    Utilisateurs
                </a>
            </div>
            
            <div class="mt-8 pt-4 border-t border-border">
                <a href="#" class="sidebar-item text-destructive hover:bg-destructive/10 hover:text-destructive">
                    <i data-lucide="log-out" class="w-4 h-4 mr-3"></i>
                    Se déconnecter
                </a>
            </div>
        </nav>
    </aside>

    <!-- Main Content -->
    <main class="ml-64 min-h-screen">
        <!-- Header -->
        <header class="bg-background border-b border-border px-6 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-foreground">Gestion des Stocks</h1>
                    <p class="text-muted-foreground">Suivez et gérez vos stocks en temps réel</p>
                </div>
                
                <div class="flex items-center space-x-4">
                    <button class="btn btn-primary" onclick="openTransferModal()">
                        <i data-lucide="truck" class="w-4 h-4 mr-2"></i>
                        Nouveau transfert
                    </button>
                    
                    <div class="relative">
                        <button class="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                            <i data-lucide="bell" class="w-4 h-4 text-muted-foreground"></i>
                        </button>
                        <span class="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full"></span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Inventory Management Content -->
        <div class="p-6">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Total Produits</p>
                                <p class="text-2xl font-bold" id="totalProducts">0</p>
                            </div>
                            <div class="w-12 h-12 bg-info/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="package" class="w-6 h-6 text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Stock Total</p>
                                <p class="text-2xl font-bold" id="totalStock">0</p>
                            </div>
                            <div class="w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="warehouse" class="w-6 h-6 text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Produits Faibles Stocks</p>
                                <p class="text-2xl font-bold" id="lowStockProducts">0</p>
                            </div>
                            <div class="w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="alert-triangle" class="w-6 h-6 text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Transferts en Cours</p>
                                <p class="text-2xl font-bold" id="activeTransfers">0</p>
                            </div>
                            <div class="w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="truck" class="w-6 h-6 text-destructive"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Filters and Search -->
            <div class="card mb-6">
                <div class="card-content" style="padding: 1.5rem;">
                    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
                        <div class="flex flex-col sm:flex-row gap-4 flex-1">
                            <!-- Search -->
                            <div class="relative flex-1 max-w-md">
                                <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground"></i>
                                <input type="text" class="input pl-10" placeholder="Rechercher un produit..." id="searchInput">
                            </div>
                            
                            <!-- Store Filter -->
                            <select class="input select w-48" id="storeFilter">
                                <option value="">Tous les magasins</option>
                            </select>
                            
                            <!-- Category Filter -->
                            <select class="input select w-48" id="categoryFilter">
                                <option value="">Toutes les catégories</option>
                            </select>
                        </div>
                        
                        <div class="flex items-center gap-4">
                            <!-- Results per page -->
                            <div class="flex items-center gap-2">
                                <span class="text-sm text-muted-foreground">Afficher:</span>
                                <select class="input select w-20" id="perPageSelect">
                                    <option value="5">5</option>
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            
                            <!-- Export -->
                            <button class="btn btn-outline">
                                <i data-lucide="download" class="w-4 h-4 mr-2"></i>
                                Exporter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Inventory Table -->
            <div class="card">
                <div class="overflow-x-auto">
                    <table id="inventoryTable">
                        <thead>
                            <tr>
                                <th>Produit</th>
                                <th>Catégorie</th>
                                <th>Magasin</th>
                                <th class="sortable" data-sort="quantity">
                                    <div class="flex items-center gap-2">
                                        Quantité
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th class="sortable" data-sort="lastUpdate">
                                    <div class="flex items-center gap-2">
                                        Dernière mise à jour
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Statut Stock</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="inventoryTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="flex items-center justify-between p-4 border-t border-border">
                    <div class="text-sm text-muted-foreground">
                        Affichage de <span id="showingFrom">1</span> à <span id="showingTo">10</span> sur <span id="totalResults">0</span> résultats
                    </div>
                    
                    <div class="flex items-center gap-2">
                        <button class="btn btn-outline btn-sm" id="prevPage" disabled>
                            <i data-lucide="chevron-left" class="w-4 h-4"></i>
                        </button>
                        
                        <div class="flex items-center gap-1" id="paginationNumbers">
                            <!-- Pagination numbers will be generated by JavaScript -->
                        </div>
                        
                        <button class="btn btn-outline btn-sm" id="nextPage">
                            <i data-lucide="chevron-right" class="w-4 h-4"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Transfer Modal -->
    <div class="modal-overlay" id="transferModal" style="display: none;">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground" id="modalTitle">Nouveau transfert de stock</h2>
                <button class="btn btn-outline btn-sm" onclick="closeTransferModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <form id="transferForm">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Produit à transférer</label>
                        <select class="input select" id="transferProduct" required>
                            <option value="">Sélectionner un produit</option>
                        </select>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Magasin source</label>
                            <select class="input select" id="sourceStore" required>
                                <option value="">Sélectionner un magasin</option>
                            </select>
                            <div class="mt-2 text-sm" id="sourceStockInfo"></div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Magasin destination</label>
                            <select class="input select" id="destinationStore" required>
                                <option value="">Sélectionner un magasin</option>
                            </select>
                            <div class="mt-2 text-sm" id="destinationStockInfo"></div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Quantité à transférer</label>
                        <input type="number" class="input" id="transferQuantity" min="1" value="1" required>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Notes (optionnel)</label>
                        <textarea class="input textarea" id="transferNotes" rows="2" placeholder="Raison du transfert, détails supplémentaires..."></textarea>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" class="btn btn-outline" onclick="closeTransferModal()">Annuler</button>
                    <button type="submit" class="btn btn-primary">
                        <i data-lucide="truck" class="w-4 h-4 mr-2"></i>
                        Confirmer le transfert
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Sample stores data
        const storesData = [
            { id: 1, name: "Paris Centre", address: "12 Rue de Rivoli, 75001 Paris", status: "active" },
            { id: 2, name: "Lyon Part-Dieu", address: "45 Rue de la République, 69002 Lyon", status: "active" },
            { id: 3, name: "Marseille Vieux-Port", address: "34 Quai du Port, 13002 Marseille", status: "active" },
            { id: 4, name: "Bordeaux Centre", address: "18 Place de la Comédie, 33000 Bordeaux", status: "active" },
            { id: 5, name: "Entrepôt National", address: "Zone Industrielle Nord, 93200 Saint-Denis", status: "active" }
        ];

        // Sample categories data
        const categoriesData = [
            { id: 1, name: "Électronique" },
            { id: 2, name: "Vêtements" },
            { id: 3, name: "Maison & Jardin" },
            { id: 4, name: "Sport & Loisirs" },
            { id: 5, name: "Alimentation" }
        ];

        // Sample products data
        const productsData = [
            { id: 1, name: "iPhone 15 Pro", categoryId: 1, sku: "APP-IP15P-256", minStock: 5 },
            { id: 2, name: "T-shirt Nike", categoryId: 2, sku: "NK-TS-BL-M", minStock: 10 },
            { id: 3, name: "Aspirateur Dyson", categoryId: 3, sku: "DYS-V11", minStock: 3 },
            { id: 4, name: "Raquette Tennis", categoryId: 4, sku: "WIL-BLADE", minStock: 4 },
            { id: 5, name: "Café Bio 250g", categoryId: 5, sku: "CAF-BIO-250", minStock: 8 },
            { id: 6, name: "MacBook Air M2", categoryId: 1, sku: "APP-MBA-M2", minStock: 4 },
            { id: 7, name: "Jean Levis 501", categoryId: 2, sku: "LV-J501-B32", minStock: 6 },
            { id: 8, name: "Tondeuse Bosch", categoryId: 3, sku: "BOS-ROT-380", minStock: 2 }
        ];

        // Sample inventory data
        const inventoryData = [
            { id: 1, productId: 1, storeId: 1, quantity: 12, lastUpdate: "2024-07-01" },
            { id: 2, productId: 1, storeId: 2, quantity: 8, lastUpdate: "2024-07-02" },
            { id: 3, productId: 1, storeId: 3, quantity: 5, lastUpdate: "2024-06-30" },
            { id: 4, productId: 2, storeId: 1, quantity: 24, lastUpdate: "2024-07-03" },
            { id: 5, productId: 2, storeId: 2, quantity: 15, lastUpdate: "2024-07-01" },
            { id: 6, productId: 3, storeId: 4, quantity: 6, lastUpdate: "2024-06-28" },
            { id: 7, productId: 3, storeId: 5, quantity: 12, lastUpdate: "2024-07-02" },
            { id: 8, productId: 4, storeId: 3, quantity: 3, lastUpdate: "2024-07-04" },
            { id: 9, productId: 4, storeId: 4, quantity: 7, lastUpdate: "2024-06-29" },
            { id: 10, productId: 5, storeId: 1, quantity: 18, lastUpdate: "2024-07-03" },
            { id: 11, productId: 5, storeId: 3, quantity: 9, lastUpdate: "2024-07-01" },
            { id: 12, productId: 6, storeId: 2, quantity: 4, lastUpdate: "2024-07-04" },
            { id: 13, productId: 6, storeId: 5, quantity: 8, lastUpdate: "2024-06-30" },
            { id: 14, productId: 7, storeId: 1, quantity: 11, lastUpdate: "2024-07-02" },
            { id: 15, productId: 7, storeId: 4, quantity: 5, lastUpdate: "2024-07-01" },
            { id: 16, productId: 8, storeId: 5, quantity: 3, lastUpdate: "2024-07-03" }
        ];

        // Sample transfers data
        const transfersData = [
            { id: 1, productId: 1, sourceStoreId: 5, destinationStoreId: 1, quantity: 5, date: "2024-07-05", status: "completed", notes: "Réapprovisionnement" },
            { id: 2, productId: 3, sourceStoreId: 4, destinationStoreId: 2, quantity: 2, date: "2024-07-04", status: "pending", notes: "Demande magasin Lyon" },
            { id: 3, productId: 5, sourceStoreId: 1, destinationStoreId: 3, quantity: 4, date: "2024-07-03", status: "completed", notes: "Rééquilibrage stock" },
            { id: 4, productId: 7, sourceStoreId: 5, destinationStoreId: 4, quantity: 3, date: "2024-07-02", status: "cancelled", notes: "Commande annulée" }
        ];

        let currentPage = 1;
        let itemsPerPage = 10;
        let sortField = null;
        let sortDirection = 'asc';
        let filteredData = [...inventoryData];
        let currentTransfer = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing inventory page...');
            
            // Initialize Lucide icons
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
                console.log('Lucide icons initialized');
            }

            // Populate filters
            populateStoreFilter();
            populateCategoryFilter();
            updateStats();
            renderTable();
            setupEventListeners();
            console.log('Inventory page initialized successfully');
        });

        function populateStoreFilter() {
            const storeFilter = document.getElementById('storeFilter');
            storesData.forEach(store => {
                const option = document.createElement('option');
                option.value = store.id;
                option.textContent = store.name;
                storeFilter.appendChild(option);
            });
        }

        function populateCategoryFilter() {
            const categoryFilter = document.getElementById('categoryFilter');
            categoriesData.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                categoryFilter.appendChild(option);
            });
        }

        function updateStats() {
            const totalProducts = productsData.length;
            const totalStock = inventoryData.reduce((sum, item) => sum + item.quantity, 0);
            
            // Calculate low stock products
            const lowStockProducts = inventoryData.filter(item => {
                const product = productsData.find(p => p.id === item.productId);
                return product && item.quantity <= product.minStock;
            }).length;
            
            // Active transfers
            const activeTransfers = transfersData.filter(t => t.status === 'pending').length;

            document.getElementById('totalProducts').textContent = totalProducts;
            document.getElementById('totalStock').textContent = totalStock;
            document.getElementById('lowStockProducts').textContent = lowStockProducts;
            document.getElementById('activeTransfers').textContent = activeTransfers;
        }

        function getProductName(productId) {
            const product = productsData.find(p => p.id === productId);
            return product ? product.name : 'Produit inconnu';
        }

        function getCategoryName(categoryId) {
            const category = categoriesData.find(c => c.id === categoryId);
            return category ? category.name : 'Catégorie inconnue';
        }

        function getStoreName(storeId) {
            const store = storesData.find(s => s.id === storeId);
            return store ? store.name : 'Magasin inconnu';
        }

        function getStockStatus(productId, quantity) {
            const product = productsData.find(p => p.id === productId);
            if (!product) return { text: 'Inconnu', class: 'badge-secondary' };
            
            if (quantity === 0) {
                return { text: 'Rupture', class: 'badge-destructive' };
            } else if (quantity <= product.minStock) {
                return { text: 'Stock faible', class: 'badge-warning' };
            } else if (quantity <= product.minStock * 1.5) {
                return { text: 'Stock moyen', class: 'badge-info' };
            } else {
                return { text: 'Stock suffisant', class: 'badge-success' };
            }
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('fr-FR');
        }

        function setupEventListeners() {
            console.log('Setting up event listeners...');
            
            // Search
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(filterData, 300));
                console.log('Search listener added');
            }
            
            // Filters
            const storeFilter = document.getElementById('storeFilter');
            if (storeFilter) {
                storeFilter.addEventListener('change', filterData);
                console.log('Store filter listener added');
            }
            
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter) {
                categoryFilter.addEventListener('change', filterData);
                console.log('Category filter listener added');
            }
            
            const perPageSelect = document.getElementById('perPageSelect');
            if (perPageSelect) {
                perPageSelect.addEventListener('change', changeItemsPerPage);
                console.log('Per page selector listener added');
            }
            
            // Sorting
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', () => sortTable(header.dataset.sort));
            });
            console.log('Sort listeners added');
            
            // Pagination
            const prevPage = document.getElementById('prevPage');
            if (prevPage) {
                prevPage.addEventListener('click', () => changePage(currentPage - 1));
            }
            
            const nextPage = document.getElementById('nextPage');
            if (nextPage) {
                nextPage.addEventListener('click', () => changePage(currentPage + 1));
            }
            console.log('Pagination listeners added');
            
            // Form submission
            const transferForm = document.getElementById('transferForm');
            if (transferForm) {
                transferForm.addEventListener('submit', handleTransferSubmit);
                console.log('Transfer form listener added');
            }
            
            // Product selection in transfer form
            const transferProduct = document.getElementById('transferProduct');
            if (transferProduct) {
                transferProduct.addEventListener('change', updateStoresForTransfer);
            }
            
            // Source store selection
            const sourceStore = document.getElementById('sourceStore');
            if (sourceStore) {
                sourceStore.addEventListener('change', updateSourceStockInfo);
            }
            
            // Destination store selection
            const destinationStore = document.getElementById('destinationStore');
            if (destinationStore) {
                destinationStore.addEventListener('change', updateDestinationStockInfo);
            }
            
            // Sidebar navigation
            document.querySelectorAll('.sidebar-item').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Close modal when clicking outside
            const transferModal = document.getElementById('transferModal');
            if (transferModal) {
                transferModal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeTransferModal();
                    }
                });
            }

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeTransferModal();
                }
            });
            
            console.log('All event listeners set up successfully');
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function filterData() {
            console.log('Filtering inventory data...');
            
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const storeFilter = document.getElementById('storeFilter').value;
            const categoryFilter = document.getElementById('categoryFilter').value;

            console.log('Search term:', searchTerm);
            console.log('Store filter:', storeFilter);
            console.log('Category filter:', categoryFilter);

            filteredData = inventoryData.filter(item => {
                const product = productsData.find(p => p.id === item.productId);
                const matchesSearch = !searchTerm || 
                    (product && product.name.toLowerCase().includes(searchTerm));
                
                const matchesStore = !storeFilter || item.storeId === parseInt(storeFilter);
                
                const matchesCategory = !categoryFilter || 
                    (product && product.categoryId === parseInt(categoryFilter));

                return matchesSearch && matchesStore && matchesCategory;
            });

            console.log('Filtered inventory data length:', filteredData.length);
            currentPage = 1;
            renderTable();
        }

        function sortTable(field) {
            console.log('Sorting inventory by:', field);
            
            if (sortField === field) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortField = field;
                sortDirection = 'asc';
            }

            filteredData.sort((a, b) => {
                let aValue, bValue;
                
                if (field === 'quantity') {
                    aValue = a.quantity;
                    bValue = b.quantity;
                } else if (field === 'lastUpdate') {
                    aValue = new Date(a.lastUpdate);
                    bValue = new Date(b.lastUpdate);
                } else {
                    // For other fields, sort by product name
                    const aProduct = productsData.find(p => p.id === a.productId);
                    const bProduct = productsData.find(p => p.id === b.productId);
                    aValue = aProduct ? aProduct.name.toLowerCase() : '';
                    bValue = bProduct ? bProduct.name.toLowerCase() : '';
                }

                if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
                if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            renderTable();
            updateSortIcons();
        }

        function updateSortIcons() {
            document.querySelectorAll('.sortable i').forEach(icon => {
                icon.setAttribute('data-lucide', 'arrow-up-down');
            });

            if (sortField) {
                const activeHeader = document.querySelector(`[data-sort="${sortField}"] i`);
                if (activeHeader) {
                    activeHeader.setAttribute('data-lucide', sortDirection === 'asc' ? 'arrow-up' : 'arrow-down');
                }
            }

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function changeItemsPerPage() {
            console.log('Changing items per page...');
            itemsPerPage = parseInt(document.getElementById('perPageSelect').value);
            console.log('New items per page:', itemsPerPage);
            currentPage = 1;
            renderTable();
        }

        function changePage(page) {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (page >= 1 && page <= totalPages) {
                currentPage = page;
                renderTable();
            }
        }

        function renderTable() {
            console.log('Rendering inventory table...');
            console.log('Current page:', currentPage);
            console.log('Items per page:', itemsPerPage);
            console.log('Filtered data length:', filteredData.length);
            
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);

            console.log('Page data length:', pageData.length);

            const tbody = document.getElementById('inventoryTableBody');
            tbody.innerHTML = '';

            pageData.forEach(item => {
                const product = productsData.find(p => p.id === item.productId);
                const category = product ? categoriesData.find(c => c.id === product.categoryId) : null;
                const store = storesData.find(s => s.id === item.storeId);
                const stockStatus = getStockStatus(item.productId, item.quantity);
                
                const row = document.createElement('tr');
                if (stockStatus.class.includes('warning')) {
                    row.classList.add('low-stock');
                } else if (stockStatus.class.includes('destructive')) {
                    row.classList.add('critical-stock');
                }
                
                row.innerHTML = `
                    <td>
                        <div class="flex items-center gap-3">
                            <div class="product-thumb">
                                <i data-lucide="package" class="w-5 h-5 text-muted-foreground"></i>
                            </div>
                            <div>
                                <div class="font-medium">${product ? product.name : 'Produit inconnu'}</div>
                                <div class="text-sm text-muted-foreground">${product ? product.sku : 'SKU inconnu'}</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="text-sm ${category ? '' : 'text-muted-foreground italic'}">
                            ${category ? category.name : 'Catégorie inconnue'}
                        </div>
                    </td>
                    <td>
                        <div class="text-sm">
                            ${store ? store.name : 'Magasin inconnu'}
                        </div>
                        <div class="text-xs text-muted-foreground">${store ? store.address : ''}</div>
                    </td>
                    <td>
                        <div class="flex items-center gap-2">
                            <span class="font-mono font-medium">${item.quantity}</span>
                            <span class="text-xs text-muted-foreground">Min: ${product ? product.minStock : '?'}</span>
                        </div>
                    </td>
                    <td>${formatDate(item.lastUpdate)}</td>
                    <td>
                        <span class="badge ${stockStatus.class}">
                            ${stockStatus.text}
                        </span>
                    </td>
                    <td>
                        <div class="flex items-center gap-2">
                            <button class="btn btn-secondary btn-sm" onclick="transferStock(${item.id})" title="Transférer">
                                <i data-lucide="truck" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-outline btn-sm" onclick="viewStock(${item.id})" title="Détails">
                                <i data-lucide="eye" class="w-3 h-3"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
            updatePagination();
        }

        function updatePagination() {
            const totalItems = filteredData.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage + 1;
            const endIndex = Math.min(startIndex + itemsPerPage - 1, totalItems);

            // Update showing text
            document.getElementById('showingFrom').textContent = totalItems > 0 ? startIndex : 0;
            document.getElementById('showingTo').textContent = totalItems > 0 ? endIndex : 0;
            document.getElementById('totalResults').textContent = totalItems;

            // Update pagination buttons
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;

            // Generate pagination numbers
            const paginationContainer = document.getElementById('paginationNumbers');
            paginationContainer.innerHTML = '';

            if (totalPages <= 7) {
                // Show all pages if 7 or fewer
                for (let i = 1; i <= totalPages; i++) {
                    createPageButton(i, paginationContainer);
                }
            } else {
                // Show first page
                createPageButton(1, paginationContainer);

                if (currentPage > 4) {
                    // Show ellipsis
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                // Show pages around current page
                const start = Math.max(2, currentPage - 2);
                const end = Math.min(totalPages - 1, currentPage + 2);

                for (let i = start; i <= end; i++) {
                    createPageButton(i, paginationContainer);
                }

                if (currentPage < totalPages - 3) {
                    // Show ellipsis
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                // Show last page
                if (totalPages > 1) {
                    createPageButton(totalPages, paginationContainer);
                }
            }
        }

        function createPageButton(pageNumber, container) {
            const button = document.createElement('button');
            button.className = `btn btn-sm ${pageNumber === currentPage ? 'btn-primary' : 'btn-outline'}`;
            button.textContent = pageNumber;
            button.onclick = () => changePage(pageNumber);
            container.appendChild(button);
        }

        function openTransferModal(itemId = null) {
            const modal = document.getElementById('transferModal');
            const transferProduct = document.getElementById('transferProduct');
            
            // Reset form
            document.getElementById('transferForm').reset();
            document.getElementById('sourceStockInfo').textContent = '';
            document.getElementById('destinationStockInfo').textContent = '';
            
            // Populate product dropdown
            transferProduct.innerHTML = '<option value="">Sélectionner un produit</option>';
            productsData.forEach(product => {
                const option = document.createElement('option');
                option.value = product.id;
                option.textContent = product.name;
                transferProduct.appendChild(option);
            });
            
            // Populate stores dropdowns
            const sourceStore = document.getElementById('sourceStore');
            const destinationStore = document.getElementById('destinationStore');
            
            sourceStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
            destinationStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
            
            storesData.forEach(store => {
                const sourceOption = document.createElement('option');
                sourceOption.value = store.id;
                sourceOption.textContent = store.name;
                sourceStore.appendChild(sourceOption);
                
                const destOption = document.createElement('option');
                destOption.value = store.id;
                destOption.textContent = store.name;
                destinationStore.appendChild(destOption);
            });
            
            // If we're transferring from a specific item
            if (itemId) {
                const item = inventoryData.find(i => i.id === itemId);
                if (item) {
                    transferProduct.value = item.productId;
                    sourceStore.value = item.storeId;
                    updateStoresForTransfer();
                    updateSourceStockInfo();
                }
            }
            
            modal.style.display = 'flex';
        }

        function closeTransferModal() {
            document.getElementById('transferModal').style.display = 'none';
        }

        function updateStoresForTransfer() {
            const productId = parseInt(document.getElementById('transferProduct').value);
            const sourceStore = document.getElementById('sourceStore');
            const destinationStore = document.getElementById('destinationStore');
            
            if (!productId) {
                // Reset stores if no product selected
                sourceStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
                destinationStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
                storesData.forEach(store => {
                    const sourceOption = document.createElement('option');
                    sourceOption.value = store.id;
                    sourceOption.textContent = store.name;
                    sourceStore.appendChild(sourceOption);
                    
                    const destOption = document.createElement('option');
                    destOption.value = store.id;
                    destOption.textContent = store.name;
                    destinationStore.appendChild(destOption);
                });
                return;
            }
            
            // Get stores that have this product in stock
            const storesWithProduct = inventoryData
                .filter(item => item.productId === productId && item.quantity > 0)
                .map(item => item.storeId);
            
            // Filter unique stores
            const uniqueStoreIds = [...new Set(storesWithProduct)];
            
            // Update source store dropdown
            sourceStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
            storesData.forEach(store => {
                if (uniqueStoreIds.includes(store.id)) {
                    const option = document.createElement('option');
                    option.value = store.id;
                    option.textContent = store.name;
                    sourceStore.appendChild(option);
                }
            });
            
            // Update destination store dropdown
            destinationStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
            storesData.forEach(store => {
                if (store.id !== parseInt(sourceStore.value)) {
                    const option = document.createElement('option');
                    option.value = store.id;
                    option.textContent = store.name;
                    destinationStore.appendChild(option);
                }
            });
            
            updateSourceStockInfo();
        }

        function updateSourceStockInfo() {
            const productId = parseInt(document.getElementById('transferProduct').value);
            const storeId = parseInt(document.getElementById('sourceStore').value);
            const infoElement = document.getElementById('sourceStockInfo');
            
            if (!productId || !storeId) {
                infoElement.textContent = '';
                return;
            }
            
            const inventoryItem = inventoryData.find(item => 
                item.productId === productId && item.storeId === storeId
            );
            
            if (inventoryItem) {
                const product = productsData.find(p => p.id === productId);
                infoElement.innerHTML = `Stock disponible: <span class="font-semibold">${inventoryItem.quantity}</span> (Min: ${product ? product.minStock : '?'})`;
            } else {
                infoElement.textContent = 'Aucun stock disponible pour ce produit dans ce magasin';
            }
        }

        function updateDestinationStockInfo() {
            const productId = parseInt(document.getElementById('transferProduct').value);
            const storeId = parseInt(document.getElementById('destinationStore').value);
            const infoElement = document.getElementById('destinationStockInfo');
            
            if (!productId || !storeId) {
                infoElement.textContent = '';
                return;
            }
            
            const inventoryItem = inventoryData.find(item => 
                item.productId === productId && item.storeId === storeId
            );
            
            if (inventoryItem) {
                const product = productsData.find(p => p.id === productId);
                infoElement.innerHTML = `Stock actuel: <span class="font-semibold">${inventoryItem.quantity}</span> (Min: ${product ? product.minStock : '?'})`;
            } else {
                infoElement.textContent = 'Aucun stock actuellement dans ce magasin';
            }
        }

        function handleTransferSubmit(event) {
            event.preventDefault();
            
            const productId = parseInt(document.getElementById('transferProduct').value);
            const sourceStoreId = parseInt(document.getElementById('sourceStore').value);
            const destinationStoreId = parseInt(document.getElementById('destinationStore').value);
            const quantity = parseInt(document.getElementById('transferQuantity').value);
            const notes = document.getElementById('transferNotes').value;
            
            // Validation
            if (!productId || !sourceStoreId || !destinationStoreId || !quantity) {
                showNotification('Veuillez remplir tous les champs obligatoires', 'error');
                return;
            }
            
            if (sourceStoreId === destinationStoreId) {
                showNotification('Les magasins source et destination doivent être différents', 'error');
                return;
            }
            
            // Check source stock
            const sourceItem = inventoryData.find(item => 
                item.productId === productId && item.storeId === sourceStoreId
            );
            
            if (!sourceItem || sourceItem.quantity < quantity) {
                showNotification('Stock insuffisant dans le magasin source', 'error');
                return;
            }
            
            // Create transfer
            const newTransfer = {
                id: transfersData.length > 0 ? Math.max(...transfersData.map(t => t.id)) + 1 : 1,
                productId,
                sourceStoreId,
                destinationStoreId,
                quantity,
                date: new Date().toISOString().split('T')[0],
                status: 'pending',
                notes
            };
            
            transfersData.push(newTransfer);
            
            // Update UI
            showNotification('Transfert créé avec succès!', 'success');
            closeTransferModal();
            updateStats();
        }

        function transferStock(itemId) {
            openTransferModal(itemId);
        }

        function viewStock(itemId) {
            const item = inventoryData.find(i => i.id === itemId);
            if (!item) return;
            
            const product = productsData.find(p => p.id === item.productId);
            const store = storesData.find(s => s.id === item.storeId);
            const category = product ? categoriesData.find(c => c.id === product.categoryId) : null;
            
            const stockStatus = getStockStatus(item.productId, item.quantity);
            
            // Get recent transfers for this product/store
            const recentTransfers = transfersData
                .filter(t => t.productId === item.productId && 
                            (t.sourceStoreId === item.storeId || t.destinationStoreId === item.storeId))
                .slice(0, 3); // Last 3 transfers
            
            let transferDetails = 'Aucun transfert récent';
            if (recentTransfers.length > 0) {
                transferDetails = recentTransfers.map(t => {
                    const statusText = t.status === 'completed' ? 'Complété' : 
                                     t.status === 'pending' ? 'En cours' : 'Annulé';
                    return `• ${formatDate(t.date)}: ${t.quantity} unités ${t.sourceStoreId === item.storeId ? 'sorties' : 'entrées'} (${statusText})`;
                }).join('\n');
            }
            
            alert(`Détails du stock:\n\nProduit: ${product ? product.name : 'Inconnu'}\nMagasin: ${store ? store.name : 'Inconnu'}\nQuantité: ${item.quantity} (Min: ${product ? product.minStock : '?'})\nStatut: ${stockStatus.text}\nDernière mise à jour: ${formatDate(item.lastUpdate)}\n\nTransferts récents:\n${transferDetails}`);
        }

        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-full`;
            
            switch (type) {
                case 'success':
                    notification.className += ' bg-success text-success-foreground';
                    break;
                case 'error':
                    notification.className += ' bg-destructive text-destructive-foreground';
                    break;
                default:
                    notification.className += ' bg-info text-info-foreground';
            }

            notification.innerHTML = `
                <div class="flex items-center gap-2">
                    <i data-lucide="${type === 'success' ? 'check-circle' : type === 'error' ? 'x-circle' : 'info'}" class="w-4 h-4"></i>
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2">
                        <i data-lucide="x" class="w-4 h-4"></i>
                    </button>
                </div>
            `;

            document.body.appendChild(notification);
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);

            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 300);
            }, 5000);
        }
    </script>
</body>
</html>