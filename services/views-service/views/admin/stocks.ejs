<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Stocks - AmaZup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        border: "hsl(214.3 31.8% 91.4%)",
                        input: "hsl(214.3 31.8% 91.4%)",
                        ring: "hsl(222.2 84% 4.9%)",
                        background: "hsl(0 0% 100%)",
                        foreground: "hsl(222.2 84% 4.9%)",
                        primary: {
                            DEFAULT: "hsl(222.2 47.4% 11.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        secondary: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84.2% 60.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        muted: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(215.4 16.3% 46.9%)",
                        },
                        accent: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        success: {
                            DEFAULT: "hsl(142 76% 36%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        warning: {
                            DEFAULT: "hsl(45 93% 47%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        info: {
                            DEFAULT: "hsl(204 94% 49%)",
                            foreground: "hsl(210 40% 98%)",
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .sidebar-transition {
            transition: all 0.3s ease;
        }
        
        .card {
            border-radius: 0.5rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            color: hsl(222.2 84% 4.9%);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }
        
        .card-header {
            display: flex;
            flex-direction: column;
            space-y: 1.5rem;
            padding: 1.5rem;
        }
        
        .card-content {
            padding: 1.5rem;
            padding-top: 0;
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
            padding: 0.5rem 1rem;
            height: 2.5rem;
            border: none;
        }
        
        .btn-primary {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-primary:hover {
            background: hsl(222.2 47.4% 11.2% / 0.9);
        }
        
        .btn-secondary {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .btn-secondary:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .btn-outline {
            background: transparent;
            color: hsl(222.2 84% 4.9%);
            border: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        .btn-outline:hover {
            background: hsl(210 40% 96%);
        }
        
        .btn-destructive {
            background: hsl(0 84.2% 60.2%);
            color: hsl(210 40% 98%);
        }
        
        .btn-destructive:hover {
            background: hsl(0 84.2% 60.2% / 0.9);
        }
        
        .btn-sm {
            height: 2rem;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
        }
        
        .input {
            display: flex;
            height: 2.5rem;
            width: 100%;
            border-radius: 0.375rem;
            border: 1px solid hsl(214.3 31.8% 91.4%);
            background: hsl(0 0% 100%);
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            transition: all 0.2s;
        }
        
        .input:focus {
            outline: none;
            border-color: hsl(222.2 84% 4.9%);
            box-shadow: 0 0 0 2px hsl(222.2 84% 4.9% / 0.2);
        }
        
        .textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            color: hsl(215.4 16.3% 46.9%);
            transition: all 0.2s;
            cursor: pointer;
            text-decoration: none;
        }
        
        .sidebar-item:hover {
            background: hsl(210 40% 96%);
            color: hsl(222.2 84% 4.9%);
        }
        
        .sidebar-item.active {
            background: hsl(222.2 47.4% 11.2%);
            color: hsl(210 40% 98%);
        }
        
        .badge {
            display: inline-flex;
            align-items: center;
            border-radius: 9999px;
            padding: 0.25rem 0.625rem;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-success {
            background: hsl(142 76% 36% / 0.1);
            color: hsl(142 76% 36%);
        }
        
        .badge-warning {
            background: hsl(45 93% 47% / 0.1);
            color: hsl(45 93% 47%);
        }
        
        .badge-destructive {
            background: hsl(0 84.2% 60.2% / 0.1);
            color: hsl(0 84.2% 60.2%);
        }
        
        .badge-info {
            background: hsl(204 94% 49% / 0.1);
            color: hsl(204 94% 49%);
        }
        
        .badge-secondary {
            background: hsl(210 40% 96%);
            color: hsl(215.4 16.3% 46.9%);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid hsl(214.3 31.8% 91.4%);
        }
        
        th {
            background: hsl(210 40% 96%);
            font-weight: 600;
            font-size: 0.875rem;
            color: hsl(222.2 84% 4.9%);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        tbody tr:hover {
            background: hsl(210 40% 96% / 0.5);
        }
        
        .sortable {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable:hover {
            background: hsl(210 40% 96% / 0.8);
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 100;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            width: 100%;
            max-width: 600px;
            margin: 1rem;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9) translateY(-20px);
            transition: transform 0.3s ease;
        }
        
        .modal-overlay.show .modal-content {
            transform: scale(1) translateY(0);
        }
        
        .low-stock {
            background-color: hsl(45 93% 47% / 0.1);
        }
        
        .critical-stock {
            background-color: hsl(0 84.2% 60.2% / 0.1);
        }
        
        .product-thumb {
            width: 50px;
            height: 50px;
            border-radius: 0.375rem;
            background-color: hsl(210 40% 96%);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        
        .product-thumb img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body class="bg-muted/30">
    <!-- Sidebar -->
    <aside class="fixed left-0 top-0 h-full w-64 bg-background border-r border-border sidebar-transition z-50">
      <!-- Logo -->
      <div class="flex items-center px-6 py-4 border-b border-border">
          <div class="flex items-center justify-center w-8 h-8 bg-primary rounded-md mr-3">
              <i data-lucide="store" class="w-4 h-4 text-primary-foreground"></i>
          </div>
          <span class="text-xl font-bold text-foreground">AmaZup</span>
      </div>
      
      <!-- User Profile -->
      <div class="px-6 py-4 border-b border-border">
          <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
                  <i data-lucide="user" class="w-5 h-5 text-primary"></i>
              </div>
              <div>
                  <p class="font-medium text-foreground">Admin</p>
                  <p class="text-sm text-muted-foreground">admin@amazup.shop</p>
              </div>
          </div>
      </div>
      
      <!-- Navigation -->
      <nav class="px-4 py-4">
          <div class="space-y-2">
              <a href="/admin" class="sidebar-item" data-page="dashboard">
                  <i data-lucide="layout-dashboard" class="w-4 h-4 mr-3"></i>
                  Tableau de bord
              </a>
              
              <a href="/admin/stores" class="sidebar-item" data-page="stores">
                  <i data-lucide="store" class="w-4 h-4 mr-3"></i>
                  Magasins
              </a>
              
              <a href="/admin/products" class="sidebar-item" data-page="products">
                  <i data-lucide="package" class="w-4 h-4 mr-3"></i>
                  Produits
              </a>
              
              <a href="/admin/categories" class="sidebar-item" data-page="categories">
                  <i data-lucide="tag" class="w-4 h-4 mr-3"></i>
                  Catégories
              </a>
              
              <a href="#" class="sidebar-item active" data-page="inventory">
                  <i data-lucide="warehouse" class="w-4 h-4 mr-3"></i>
                  Stocks
              </a>
              
              <a href="/admin/transfers" class="sidebar-item" data-page="transfers">
                  <i data-lucide="truck" class="w-4 h-4 mr-3"></i>
                  Transferts
              </a>
              
              <a href="/admin/users" class="sidebar-item" data-page="users">
                  <i data-lucide="users" class="w-4 h-4 mr-3"></i>
                  Utilisateurs
              </a>
          </div>
          
          <div class="mt-8 pt-4 border-t border-border">
              <a href="/logout" class="sidebar-item text-destructive hover:bg-destructive/10 hover:text-destructive">
                  <i data-lucide="log-out" class="w-4 h-4 mr-3"></i>
                  Se déconnecter
              </a>
          </div>
      </nav>
  </aside>

    <!-- Main Content -->
    <main class="ml-64 min-h-screen">
        <!-- Header -->
        <header class="bg-background border-b border-border px-6 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-foreground">Gestion des Stocks</h1>
                    <p class="text-muted-foreground">Suivez et gérez vos stocks en temps réel</p>
                </div>
                
                <div class="flex items-center space-x-4">
                    <button class="btn btn-primary" onclick="openStockModal()">
                        <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                        Ajouter un stock
                    </button>
                    
                    <button class="btn btn-secondary" onclick="openTransferModal()">
                        <i data-lucide="truck" class="w-4 h-4 mr-2"></i>
                        Nouveau transfert
                    </button>
                    
                    <div class="relative">
                        <button class="w-8 h-8 bg-muted rounded-full flex items-center justify-center">
                            <i data-lucide="bell" class="w-4 h-4 text-muted-foreground"></i>
                        </button>
                        <span class="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full"></span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Inventory Management Content -->
        <div class="p-6">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Total Produits</p>
                                <p class="text-2xl font-bold" id="totalProducts"><%= productsCount %></p>
                            </div>
                            <div class="w-12 h-12 bg-info/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="package" class="w-6 h-6 text-info"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Total Magasins</p>
                                <p class="text-2xl font-bold" id="totalStores"><%= storesCount %></p>
                            </div>
                            <div class="w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="store" class="w-6 h-6 text-success"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Stock Total</p>
                                <p class="text-2xl font-bold" id="totalStock">
                                    <% 
                                    const totalStock = aggregatedStocks.reduce((sum, s) => sum + s.quantityAvailable, 0);
                                    %>
                                    <%= totalStock %>
                                </p>
                            </div>
                            <div class="w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="warehouse" class="w-6 h-6 text-warning"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-content p-6">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-sm font-medium text-muted-foreground">Stocks Critiques</p>
                                <p class="text-2xl font-bold" id="criticalStocks">
                                    <% 
                                    const criticalStocks = aggregatedStocks.filter(s => s.quantityAvailable <= s.criticalThreshold).length;
                                    %>
                                    <%= criticalStocks %>
                                </p>
                            </div>
                            <div class="w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center">
                                <i data-lucide="alert-triangle" class="w-6 h-6 text-destructive"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Filters and Search -->
            <div class="card mb-6">
                <div class="card-content" style="padding: 1.5rem;">
                    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
                        <div class="flex flex-col sm:flex-row gap-4 flex-1">
                            <!-- Search -->
                            <div class="relative flex-1 max-w-md">
                                <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground"></i>
                                <input type="text" class="input pl-10" placeholder="Rechercher un produit..." id="searchInput">
                            </div>
                            
                            <!-- Store Filter -->
                            <select class="input select w-48" id="storeFilter">
                                <option value="">Tous les magasins</option>
                                <!-- Stores will be populated by JavaScript -->
                            </select>
                            
                            <!-- Category Filter -->
                            <select class="input select w-48" id="categoryFilter">
                                <option value="">Toutes les catégories</option>
                                <!-- Categories will be populated by JavaScript -->
                            </select>
                        </div>
                        
                        <div class="flex items-center gap-4">
                            <!-- Results per page -->
                            <div class="flex items-center gap-2">
                                <span class="text-sm text-muted-foreground">Afficher:</span>
                                <select class="input select w-20" id="perPageSelect">
                                    <option value="5">5</option>
                                    <option value="10" selected>10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                            
                            <!-- Export -->
                            <button class="btn btn-outline">
                                <i data-lucide="download" class="w-4 h-4 mr-2"></i>
                                Exporter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Inventory Table -->
            <div class="card">
                <div class="overflow-x-auto">
                    <table id="inventoryTable">
                        <thead>
                            <tr>
                                <th>Produit</th>
                                <th>Catégorie</th>
                                <th>Magasin</th>
                                <th class="sortable" data-sort="quantityAvailable">
                                    <div class="flex items-center gap-2">
                                        Quantité
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Seuil Critique</th>
                                <th class="sortable" data-sort="updatedAt">
                                    <div class="flex items-center gap-2">
                                        Dernière MAJ
                                        <i data-lucide="arrow-up-down" class="w-4 h-4"></i>
                                    </div>
                                </th>
                                <th>Statut Stock</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="inventoryTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div class="flex items-center justify-between p-4 border-t border-border">
                    <div class="text-sm text-muted-foreground">
                        Affichage de <span id="showingFrom">1</span> à <span id="showingTo">10</span> sur <span id="totalResults">0</span> résultats
                    </div>
                    
                    <div class="flex items-center gap-2">
                        <button class="btn btn-outline btn-sm" id="prevPage" disabled>
                            <i data-lucide="chevron-left" class="w-4 h-4"></i>
                        </button>
                        
                        <div class="flex items-center gap-1" id="paginationNumbers">
                            <!-- Pagination numbers will be generated by JavaScript -->
                        </div>
                        
                        <button class="btn btn-outline btn-sm" id="nextPage">
                            <i data-lucide="chevron-right" class="w-4 h-4"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Stock Modal (Add/Edit) -->
    <div class="modal-overlay" id="stockModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground" id="stockModalTitle">Ajouter un stock</h2>
                <button class="btn btn-outline btn-sm" onclick="closeStockModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <form id="stockForm">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Produit</label>
                        <select class="input select" id="stockProduct" required>
                            <option value="">Sélectionner un produit</option>
                            <!-- Products will be populated by JavaScript -->
                        </select>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Magasin</label>
                        <select class="input select" id="stockStore" required>
                            <option value="">Sélectionner un magasin</option>
                            <!-- Stores will be populated by JavaScript -->
                        </select>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Quantité disponible</label>
                            <input type="number" class="input" id="stockQuantity" min="0" value="0" required>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Seuil critique</label>
                            <input type="number" class="input" id="stockThreshold" min="0" value="5" required>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" class="btn btn-outline" onclick="closeStockModal()">Annuler</button>
                    <button type="submit" class="btn btn-primary" id="stockSubmitButton">
                        <i data-lucide="plus" class="w-4 h-4 mr-2" id="stockSubmitIcon"></i>
                        <span id="stockSubmitButtonText">Ajouter</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Transfer Modal -->
    <div class="modal-overlay" id="transferModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground">Nouveau transfert de stock</h2>
                <button class="btn btn-outline btn-sm" onclick="closeTransferModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <form id="transferForm">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Produit à transférer</label>
                        <select class="input select" id="transferProduct" required>
                            <option value="">Sélectionner un produit</option>
                            <!-- Products will be populated by JavaScript -->
                        </select>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Magasin source</label>
                            <select class="input select" id="sourceStore" required>
                                <option value="">Sélectionner un magasin</option>
                                <!-- Stores will be populated by JavaScript -->
                            </select>
                            <div class="mt-2 text-sm" id="sourceStockInfo"></div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-foreground mb-2">Magasin destination</label>
                            <select class="input select" id="destinationStore" required>
                                <option value="">Sélectionner un magasin</option>
                                <!-- Stores will be populated by JavaScript -->
                            </select>
                            <div class="mt-2 text-sm" id="destinationStockInfo"></div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Quantité à transférer</label>
                        <input type="number" class="input" id="transferQuantity" min="1" value="1" required>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Notes (optionnel)</label>
                        <textarea class="input textarea" id="transferNotes" rows="2" placeholder="Raison du transfert, détails supplémentaires..."></textarea>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" class="btn btn-outline" onclick="closeTransferModal()">Annuler</button>
                    <button type="submit" class="btn btn-primary">
                        <i data-lucide="truck" class="w-4 h-4 mr-2"></i>
                        Confirmer le transfert
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- View Stock Modal -->
    <div class="modal-overlay" id="viewStockModal">
        <div class="modal-content">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-bold text-foreground">Détails du stock</h2>
                <button class="btn btn-outline btn-sm" onclick="closeViewStockModal()">
                    <i data-lucide="x" class="w-4 h-4"></i>
                </button>
            </div>
            
            <div class="space-y-6">
                <div class="flex items-center gap-4">
                    <div class="product-thumb">
                        <i data-lucide="package" class="w-6 h-6 text-muted-foreground"></i>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold" id="viewStockProductName"></h3>
                        <p class="text-muted-foreground" id="viewStockStoreName"></p>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Quantité disponible</label>
                        <p class="text-lg font-bold text-success" id="viewStockQuantity"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Seuil critique</label>
                        <p class="text-lg font-bold text-warning" id="viewStockThreshold"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Catégorie</label>
                        <p class="text-sm" id="viewStockCategory"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Prix unitaire</label>
                        <p class="text-sm font-mono" id="viewStockPrice"></p>
                    </div>
                    
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Description</label>
                        <p class="text-sm" id="viewStockDescription"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Créé le</label>
                        <p class="text-sm" id="viewStockCreated"></p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-muted-foreground mb-1">Dernière mise à jour</label>
                        <p class="text-sm" id="viewStockUpdated"></p>
                    </div>
                </div>
                
                <div class="flex justify-end gap-3">
                    <button type="button" class="btn btn-outline" onclick="closeViewStockModal()">Fermer</button>
                    <button type="button" class="btn btn-secondary" onclick="editStockFromView()">
                        <i data-lucide="edit" class="w-4 h-4 mr-2"></i>
                        Modifier
                    </button>
                    <button type="button" class="btn btn-info" onclick="transferStockFromView()">
                        <i data-lucide="truck" class="w-4 h-4 mr-2"></i>
                        Transférer
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal-overlay" id="deleteModal">
        <div class="modal-content max-w-md">
            <div class="flex items-center gap-3 mb-4">
                <div class="w-12 h-12 bg-destructive/10 rounded-full flex items-center justify-center">
                    <i data-lucide="alert-triangle" class="w-6 h-6 text-destructive"></i>
                </div>
                <div>
                    <h2 class="text-lg font-bold text-foreground">Confirmer la suppression</h2>
                    <p class="text-sm text-muted-foreground">Cette action est irréversible</p>
                </div>
            </div>
            
            <div class="mb-6">
                <p class="text-sm text-foreground">
                    Êtes-vous sûr de vouloir supprimer ce stock pour <span class="font-semibold" id="deleteStockName"></span> dans <span class="font-semibold" id="deleteStoreName"></span> ?
                </p>
                <p class="text-sm text-muted-foreground mt-2">
                    Toutes les données associées à ce stock seront définitivement supprimées.
                </p>
            </div>
            
            <div class="flex justify-end gap-3">
                <button type="button" class="btn btn-outline" onclick="closeDeleteModal()">Annuler</button>
                <button type="button" class="btn btn-destructive" onclick="confirmDelete()" id="deleteButton">
                    <i data-lucide="trash-2" class="w-4 h-4 mr-2"></i>
                    Supprimer
                </button>
            </div>
        </div>
    </div>

    <!-- Include Toast Partials -->
    <%- include('../partials/toasts') %>

    <script>
        // Configuration de l'API
        const API_BASE_URL = '/api/v1';
        
        // Données stocks provenant du serveur
        const stocksData = <%- JSON.stringify(aggregatedStocks) %>;
        const allProducts = <%- JSON.stringify(allProducts) %>;
        
        // Extraire les données uniques
        const productsData = {};
        const storesData = {};
        const categoriesData = {};
        const allProductsData = {};

        allProducts.forEach(product => {
            allProductsData[product.id] = product;
            // Ajouter les catégories depuis allProducts EN PREMIER
            if (product.category && !categoriesData[product.category.id]) {
                categoriesData[product.category.id] = product.category;
            }
        });
        
        stocksData.forEach(stock => {
            // Extraire les produits
            if (stock.product && !productsData[stock.product.id]) {
                productsData[stock.product.id] = stock.product;
            }
            
            // Extraire les magasins
            if (stock.store && !storesData[stock.store.id]) {
                storesData[stock.store.id] = stock.store;
            }
            
            // Extraire les catégories
            if (stock.product && stock.product.category && !categoriesData[stock.product.category.id]) {
                categoriesData[stock.product.category.id] = stock.product.category;
            }
        });

        let currentPage = 1;
        let itemsPerPage = 10;
        let sortField = null;
        let sortDirection = 'asc';
        let filteredData = [...stocksData];
        let editingStockId = null;
        let deletingStockId = null;
        let viewingStockId = null;

        // Service Stock
        class StockService {
            constructor() {
                this.baseUrl = API_BASE_URL;
            }
            
            async createStock(data) {
                try {
                    const response = await fetch(`${this.baseUrl}/stocks`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la création');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async updateStock(stockId, data) {
                try {
                    const response = await fetch(`${this.baseUrl}/stocks/${stockId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la modification');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async deleteStock(stockId) {
                try {
                    const response = await fetch(`${this.baseUrl}/stocks/${stockId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors de la suppression');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async createTransfer(data) {
                try {
                    const response = await fetch(`${this.baseUrl}/transfers`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors du transfert');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }

            async updateTransfer(transferId, data) {
              try {
                    const response = await fetch(`${this.baseUrl}/transfers/${transferId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Erreur lors du transfert');
                    }
                    
                    return await response.json();
                } catch (error) {
                    throw error;
                }
            }
        }

        const stockService = new StockService();

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing stocks page...');
            
            // Initialize Lucide icons
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
                console.log('Lucide icons initialized');
            }

            populateSelectOptions();
            renderTable();
            setupEventListeners();
            console.log('Stocks page initialized successfully');
        });

        function populateSelectOptions() {
            // Populate store filters and selects
            const storeFilter = document.getElementById('storeFilter');
            const stockStore = document.getElementById('stockStore');
            const sourceStore = document.getElementById('sourceStore');
            const destinationStore = document.getElementById('destinationStore');
            
            Object.values(storesData).forEach(store => {
                // Store filter
                const filterOption = document.createElement('option');
                filterOption.value = store.id;
                filterOption.textContent = store.name;
                storeFilter.appendChild(filterOption);
                
                // Stock store select
                const stockOption = document.createElement('option');
                stockOption.value = store.id;
                stockOption.textContent = store.name;
                stockStore.appendChild(stockOption);
                
                // Source store select
                const sourceOption = document.createElement('option');
                sourceOption.value = store.id;
                sourceOption.textContent = store.name;
                sourceStore.appendChild(sourceOption);
                
                // Destination store select
                const destOption = document.createElement('option');
                destOption.value = store.id;
                destOption.textContent = store.name;
                destinationStore.appendChild(destOption);
            });
            
            // Populate category filter
            const categoryFilter = document.getElementById('categoryFilter');
            Object.values(categoriesData).forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                categoryFilter.appendChild(option);
            });
            
            // Populate product selects
            const stockProduct = document.getElementById('stockProduct');
            const transferProduct = document.getElementById('transferProduct');

            // Pour ajouter du stock: utiliser TOUS les produits disponibles
            Object.values(allProductsData).forEach(product => {
                const stockOption = document.createElement('option');
                stockOption.value = product.id;
                // Vérification plus robuste de la catégorie
                const categoryName = (product.category && product.category.name) ? product.category.name : 'Sans catégorie';
                stockOption.textContent = `${product.name} - ${categoryName}`;
                stockProduct.appendChild(stockOption);
            });

            // Pour les transferts: utiliser seulement les produits qui ont du stock
            Object.values(productsData).forEach(product => {
                const transferOption = document.createElement('option');
                transferOption.value = product.id;
                // Vérification plus robuste de la catégorie
                const categoryName = (product.category && product.category.name) ? product.category.name : 'Sans catégorie';
                transferOption.textContent = `${product.name} - ${categoryName}`;
                transferProduct.appendChild(transferOption);
            });
        }

        function formatPrice(price) {
            return new Intl.NumberFormat('fr-FR', {
                style: 'currency',
                currency: 'EUR'
            }).format(price);
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function getStockStatus(quantityAvailable, criticalThreshold) {
            if (quantityAvailable === 0) {
                return { text: 'Rupture', class: 'badge-destructive' };
            } else if (quantityAvailable <= criticalThreshold) {
                return { text: 'Stock critique', class: 'badge-destructive' };
            } else if (quantityAvailable <= criticalThreshold * 1.5) {
                return { text: 'Stock faible', class: 'badge-warning' };
            } else {
                return { text: 'Stock suffisant', class: 'badge-success' };
            }
        }

        function setupEventListeners() {
            // Search
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(filterData, 300));
            }
            
            // Filters
            const storeFilter = document.getElementById('storeFilter');
            if (storeFilter) {
                storeFilter.addEventListener('change', filterData);
            }
            
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter) {
                categoryFilter.addEventListener('change', filterData);
            }
            
            const perPageSelect = document.getElementById('perPageSelect');
            if (perPageSelect) {
                perPageSelect.addEventListener('change', changeItemsPerPage);
            }
            
            // Sorting
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', () => sortTable(header.dataset.sort));
            });
            
            // Pagination
            const prevPage = document.getElementById('prevPage');
            if (prevPage) {
                prevPage.addEventListener('click', () => changePage(currentPage - 1));
            }
            
            const nextPage = document.getElementById('nextPage');
            if (nextPage) {
                nextPage.addEventListener('click', () => changePage(currentPage + 1));
            }
            
            // Form submissions
            const stockForm = document.getElementById('stockForm');
            if (stockForm) {
                stockForm.addEventListener('submit', handleStockSubmit);
            }
            
            const transferForm = document.getElementById('transferForm');
            if (transferForm) {
                transferForm.addEventListener('submit', handleTransferSubmit);
            }
            
            // Transfer form dependencies
            const transferProduct = document.getElementById('transferProduct');
            if (transferProduct) {
                transferProduct.addEventListener('change', updateStoresForTransfer);
            }
            
            const sourceStore = document.getElementById('sourceStore');
            if (sourceStore) {
                sourceStore.addEventListener('change', updateSourceStockInfo);
            }
            
            const destinationStore = document.getElementById('destinationStore');
            if (destinationStore) {
                destinationStore.addEventListener('change', updateDestinationStockInfo);
            }
            
            // Sidebar navigation
            document.querySelectorAll('.sidebar-item').forEach(item => {
                if (!item.getAttribute('href') || item.getAttribute('href') === '#') {
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        document.querySelectorAll('.sidebar-item').forEach(i => i.classList.remove('active'));
                        this.classList.add('active');
                    });
                }
            });

            // Close modals when clicking outside
            document.querySelectorAll('.modal-overlay').forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeAllModals();
                    }
                });
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeAllModals();
                }
                if (e.ctrlKey && e.key === 'n') {
                    e.preventDefault();
                    openStockModal();
                }
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function filterData() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const storeFilter = document.getElementById('storeFilter').value;
            const categoryFilter = document.getElementById('categoryFilter').value;

            filteredData = stocksData.filter(stock => {
                const product = stock.product;
                const store = stock.store;
                const category = product ? product.category : null;
                
                const matchesSearch = !searchTerm || 
                    (product && product.name.toLowerCase().includes(searchTerm)) ||
                    (store && store.name.toLowerCase().includes(searchTerm));
                
                const matchesStore = !storeFilter || store.id.toString() === storeFilter;
                const matchesCategory = !categoryFilter || 
                    (category && category.id.toString() === categoryFilter);

                return matchesSearch && matchesStore && matchesCategory;
            });

            currentPage = 1;
            renderTable();
        }

        function sortTable(field) {
            if (sortField === field) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortField = field;
                sortDirection = 'asc';
            }

            filteredData.sort((a, b) => {
                let aValue = a[field];
                let bValue = b[field];

                if (field === 'quantityAvailable') {
                    aValue = parseInt(aValue) || 0;
                    bValue = parseInt(bValue) || 0;
                } else if (field === 'updatedAt') {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                } else {
                    aValue = aValue ? aValue.toString().toLowerCase() : '';
                    bValue = bValue ? bValue.toString().toLowerCase() : '';
                }

                if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
                if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            renderTable();
            updateSortIcons();
        }

        function updateSortIcons() {
            document.querySelectorAll('.sortable i').forEach(icon => {
                icon.setAttribute('data-lucide', 'arrow-up-down');
            });

            if (sortField) {
                const activeHeader = document.querySelector(`[data-sort="${sortField}"] i`);
                if (activeHeader) {
                    activeHeader.setAttribute('data-lucide', sortDirection === 'asc' ? 'arrow-up' : 'arrow-down');
                }
            }

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function changeItemsPerPage() {
            itemsPerPage = parseInt(document.getElementById('perPageSelect').value);
            currentPage = 1;
            renderTable();
        }

        function changePage(page) {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (page >= 1 && page <= totalPages) {
                currentPage = page;
                renderTable();
            }
        }

        function renderTable() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);

            const tbody = document.getElementById('inventoryTableBody');
            tbody.innerHTML = '';

            pageData.forEach(stock => {
                const product = stock.product;
                const store = stock.store;
                const category = product ? product.category : null;
                const stockStatus = getStockStatus(stock.quantityAvailable, stock.criticalThreshold);
                
                const row = document.createElement('tr');
                if (stockStatus.class.includes('warning')) {
                    row.classList.add('low-stock');
                } else if (stockStatus.class.includes('destructive')) {
                    row.classList.add('critical-stock');
                }
                
                row.innerHTML = `
                    <td>
                        <div class="flex items-center gap-3">
                            <div class="product-thumb">
                                <i data-lucide="package" class="w-5 h-5 text-muted-foreground"></i>
                            </div>
                            <div>
                                <div class="font-medium">${product ? product.name : 'Produit inconnu'}</div>
                                <div class="text-sm text-muted-foreground">${product ? product.description || 'Aucune description' : ''}</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <span class="badge badge-info">
                            ${category ? category.name : 'Sans catégorie'}
                        </span>
                    </td>
                    <td>
                        <div class="text-sm font-medium">${store ? store.name : 'Magasin inconnu'}</div>
                        <div class="text-xs text-muted-foreground">${store ? store.description || '' : ''}</div>
                    </td>
                    <td>
                        <div class="flex items-center gap-2">
                            <span class="font-mono font-bold text-lg">${stock.quantityAvailable}</span>
                        </div>
                    </td>
                    <td>
                        <span class="font-mono text-sm text-muted-foreground">${stock.criticalThreshold}</span>
                    </td>
                    <td>${formatDate(stock.updatedAt)}</td>
                    <td>
                        <span class="badge ${stockStatus.class}">
                            ${stockStatus.text}
                        </span>
                    </td>
                    <td>
                        <div class="flex items-center gap-2">
                            <button class="btn btn-outline btn-sm" onclick="viewStock(${stock.id})" title="Voir">
                                <i data-lucide="eye" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-secondary btn-sm" onclick="editStock(${stock.id})" title="Modifier">
                                <i data-lucide="edit" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-info btn-sm" onclick="transferStock(${stock.id})" title="Transférer">
                                <i data-lucide="truck" class="w-3 h-3"></i>
                            </button>
                            <button class="btn btn-destructive btn-sm" onclick="deleteStock(${stock.id})" title="Supprimer">
                                <i data-lucide="trash-2" class="w-3 h-3"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
            updatePagination();
        }

        function updatePagination() {
            const totalItems = filteredData.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage + 1;
            const endIndex = Math.min(startIndex + itemsPerPage - 1, totalItems);

            // Update showing text
            document.getElementById('showingFrom').textContent = totalItems > 0 ? startIndex : 0;
            document.getElementById('showingTo').textContent = totalItems > 0 ? endIndex : 0;
            document.getElementById('totalResults').textContent = totalItems;

            // Update pagination buttons
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;

            // Generate pagination numbers
            const paginationContainer = document.getElementById('paginationNumbers');
            paginationContainer.innerHTML = '';

            if (totalPages <= 7) {
                for (let i = 1; i <= totalPages; i++) {
                    createPageButton(i, paginationContainer);
                }
            } else {
                createPageButton(1, paginationContainer);

                if (currentPage > 4) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                const start = Math.max(2, currentPage - 2);
                const end = Math.min(totalPages - 1, currentPage + 2);

                for (let i = start; i <= end; i++) {
                    createPageButton(i, paginationContainer);
                }

                if (currentPage < totalPages - 3) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-2 text-muted-foreground';
                    ellipsis.textContent = '...';
                    paginationContainer.appendChild(ellipsis);
                }

                if (totalPages > 1) {
                    createPageButton(totalPages, paginationContainer);
                }
            }
        }

        function createPageButton(pageNumber, container) {
            const button = document.createElement('button');
            button.className = `btn btn-sm ${pageNumber === currentPage ? 'btn-primary' : 'btn-outline'}`;
            button.textContent = pageNumber;
            button.onclick = () => changePage(pageNumber);
            container.appendChild(button);
        }

        // Modal functions
        function openStockModal(stockId = null) {
            editingStockId = stockId;
            const modal = document.getElementById('stockModal');
            const modalTitle = document.getElementById('stockModalTitle');
            const submitButton = document.getElementById('stockSubmitButtonText');
            const submitIcon = document.getElementById('stockSubmitIcon');
            const form = document.getElementById('stockForm');

            if (stockId) {
                const stock = stocksData.find(s => s.id === stockId);
                if (stock) {
                    modalTitle.textContent = 'Modifier le stock';
                    submitButton.textContent = 'Modifier';
                    submitIcon.setAttribute('data-lucide', 'save');
                    
                    // Fill form with stock data
                    document.getElementById('stockProduct').value = stock.productId;
                    document.getElementById('stockStore').value = stock.storeId;
                    document.getElementById('stockQuantity').value = stock.quantityAvailable;
                    document.getElementById('stockThreshold').value = stock.criticalThreshold;
                }
            } else {
                modalTitle.textContent = 'Ajouter un stock';
                submitButton.textContent = 'Ajouter';
                submitIcon.setAttribute('data-lucide', 'plus');
                form.reset();
            }

            modal.classList.add('show');
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function closeStockModal() {
            document.getElementById('stockModal').classList.remove('show');
            editingStockId = null;
        }

        function openTransferModal(stockId = null) {
            const modal = document.getElementById('transferModal');
            const form = document.getElementById('transferForm');
            
            // Reset form
            form.reset();
            document.getElementById('sourceStockInfo').textContent = '';
            document.getElementById('destinationStockInfo').textContent = '';
            
            // If we're transferring from a specific stock
            if (stockId) {
                const stock = stocksData.find(s => s.id === stockId);
                if (stock) {
                    document.getElementById('transferProduct').value = stock.productId;
                    document.getElementById('sourceStore').value = stock.storeId;
                    updateStoresForTransfer();
                    updateSourceStockInfo();
                }
            }
            
            modal.classList.add('show');
        }

        function closeTransferModal() {
            document.getElementById('transferModal').classList.remove('show');
        }

        function viewStock(stockId) {
            viewingStockId = stockId;
            const stock = stocksData.find(s => s.id === stockId);
            if (stock) {
                const product = stock.product;
                const store = stock.store;
                const category = product ? product.category : null;
                
                document.getElementById('viewStockProductName').textContent = product ? product.name : 'Produit inconnu';
                document.getElementById('viewStockStoreName').textContent = store ? store.name : 'Magasin inconnu';
                document.getElementById('viewStockQuantity').textContent = stock.quantityAvailable;
                document.getElementById('viewStockThreshold').textContent = stock.criticalThreshold;
                document.getElementById('viewStockCategory').textContent = category ? category.name : 'Sans catégorie';
                document.getElementById('viewStockPrice').textContent = product ? formatPrice(product.price) : '-';
                document.getElementById('viewStockDescription').textContent = product ? (product.description || 'Aucune description') : '-';
                document.getElementById('viewStockCreated').textContent = formatDate(stock.createdAt);
                document.getElementById('viewStockUpdated').textContent = formatDate(stock.updatedAt);
                
                document.getElementById('viewStockModal').classList.add('show');
            }
        }

        function closeViewStockModal() {
            document.getElementById('viewStockModal').classList.remove('show');
            viewingStockId = null;
        }

        function editStockFromView() {
            closeViewStockModal();
            openStockModal(viewingStockId);
        }

        function transferStockFromView() {
            closeViewStockModal();
            openTransferModal(viewingStockId);
        }

        function editStock(stockId) {
            openStockModal(stockId);
        }

        function transferStock(stockId) {
            openTransferModal(stockId);
        }

        function deleteStock(stockId) {
            deletingStockId = stockId;
            const stock = stocksData.find(s => s.id === stockId);
            if (stock) {
                const product = stock.product;
                const store = stock.store;
                document.getElementById('deleteStockName').textContent = product ? product.name : 'Produit inconnu';
                document.getElementById('deleteStoreName').textContent = store ? store.name : 'Magasin inconnu';
                document.getElementById('deleteModal').classList.add('show');
            }
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.remove('show');
            deletingStockId = null;
        }

        function closeAllModals() {
            closeStockModal();
            closeTransferModal();
            closeViewStockModal();
            closeDeleteModal();
        }

        // Transfer helper functions
        function updateStoresForTransfer() {
            const productId = parseInt(document.getElementById('transferProduct').value);
            const sourceStore = document.getElementById('sourceStore');
            const destinationStore = document.getElementById('destinationStore');
            
            if (!productId) {
                return;
            }
            
            // Get stores that have this product in stock (for source)
            const storesWithProduct = stocksData
                .filter(stock => stock.productId === productId && stock.quantityAvailable > 0)
                .map(stock => stock.storeId);
            
            // Get stores that have this product (even with 0 stock) for destination
            const storesWithProductEntry = stocksData
                .filter(stock => stock.productId === productId)
                .map(stock => stock.storeId);
            
            // Update source store dropdown
            const currentSourceValue = sourceStore.value;
            sourceStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
            Object.values(storesData).forEach(store => {
                if (storesWithProduct.includes(store.id)) {
                    const option = document.createElement('option');
                    option.value = store.id;
                    option.textContent = store.name;
                    if (store.id.toString() === currentSourceValue) {
                        option.selected = true;
                    }
                    sourceStore.appendChild(option);
                }
            });
            
            // Update destination store dropdown - only stores that have this product entry
            const currentDestValue = destinationStore.value;
            destinationStore.innerHTML = '<option value="">Sélectionner un magasin</option>';
            Object.values(storesData).forEach(store => {
                // Store must have product entry AND be different from source
                if (storesWithProductEntry.includes(store.id) && store.id.toString() !== sourceStore.value) {
                    const option = document.createElement('option');
                    option.value = store.id;
                    option.textContent = store.name;
                    if (store.id.toString() === currentDestValue) {
                        option.selected = true;
                    }
                    destinationStore.appendChild(option);
                }
            });
            
            updateSourceStockInfo();
            updateDestinationStockInfo();
        }

        function updateSourceStockInfo() {
            const productId = parseInt(document.getElementById('transferProduct').value);
            const storeId = parseInt(document.getElementById('sourceStore').value);
            const infoElement = document.getElementById('sourceStockInfo');
            
            if (!productId || !storeId) {
                infoElement.textContent = '';
                return;
            }
            
            const stock = stocksData.find(s => 
                s.productId === productId && s.storeId === storeId
            );
            
            if (stock) {
                infoElement.innerHTML = `<span class="text-success">Stock disponible: <strong>${stock.quantityAvailable}</strong></span> (Seuil: ${stock.criticalThreshold})`;
                
                // Update max quantity for transfer
                const transferQuantity = document.getElementById('transferQuantity');
                transferQuantity.max = stock.quantityAvailable;
                if (parseInt(transferQuantity.value) > stock.quantityAvailable) {
                    transferQuantity.value = stock.quantityAvailable;
                }
            } else {
                infoElement.innerHTML = '<span class="text-muted-foreground">Aucun stock disponible</span>';
            }
        }

        function updateDestinationStockInfo() {
            const productId = parseInt(document.getElementById('transferProduct').value);
            const storeId = parseInt(document.getElementById('destinationStore').value);
            const infoElement = document.getElementById('destinationStockInfo');
            
            if (!productId || !storeId) {
                infoElement.textContent = '';
                return;
            }
            
            const stock = stocksData.find(s => 
                s.productId === productId && s.storeId === storeId
            );
            
            if (stock) {
                infoElement.innerHTML = `<span class="text-info">Stock actuel: <strong>${stock.quantityAvailable}</strong></span> (Seuil: ${stock.criticalThreshold})`;
            } else {
                infoElement.innerHTML = '<span class="text-muted-foreground">Aucun stock actuellement</span>';
            }
        }

        // Form submission handlers
        async function handleStockSubmit(event) {
            event.preventDefault();
            
            const submitButton = document.getElementById('stockSubmitButton');
            const originalContent = submitButton.innerHTML;
            
            const productId = parseInt(document.getElementById('stockProduct').value);
            const storeId = parseInt(document.getElementById('stockStore').value);
            const quantityAvailable = parseInt(document.getElementById('stockQuantity').value);
            const criticalThreshold = parseInt(document.getElementById('stockThreshold').value);
            
            // Validation
            if (quantityAvailable < 0) {
                showToast('La quantité ne peut pas être négative', 'error');
                return;
            }
            
            if (criticalThreshold < 0) {
                showToast('Le seuil critique ne peut pas être négatif', 'error');
                return;
            }
            
            // Check if this product-store combination already exists (for creation)
            if (!editingStockId) {
                const existingStock = stocksData.find(s => s.productId === productId && s.storeId === storeId);
                if (existingStock) {
                    showToast('Ce produit existe déjà dans ce magasin', 'error');
                    return;
                }
            }
            
            // Set loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Traitement...';
            
            try {
                if (editingStockId) {
                    // Update existing stock
                    const stockData = {
                        productId: productId,
                        storeId: storeId,
                        quantityAvailable: quantityAvailable,
                        criticalThreshold: criticalThreshold
                    };
                    
                    await stockService.updateStock(editingStockId, stockData);
                    
                    // Update local data
                    const stockIndex = stocksData.findIndex(s => s.id === editingStockId);
                    if (stockIndex !== -1) {
                        stocksData[stockIndex] = {
                            ...stocksData[stockIndex],
                            ...stockData,
                            updatedAt: new Date().toISOString()
                        };
                    }
                    
                    showToast('Stock modifié avec succès', 'success');
                    
                } else {
                    // Create new stock
                    const stockData = {
                        productId: productId,
                        storeId: storeId,
                        quantityAvailable: quantityAvailable,
                        criticalThreshold: criticalThreshold
                    };
                    
                    const newStock = await stockService.createStock(stockData);
                    
                    // Add to local data
                    const stockToAdd = {
                        id: newStock.id,
                        productId: productId,
                        storeId: storeId,
                        quantityAvailable: quantityAvailable,
                        criticalThreshold: criticalThreshold,
                        product: allProductsData[productId], // MODIFICATION ICI
                        store: storesData[storeId],
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    };
                    
                    stocksData.push(stockToAdd);

                    // Ajouter le produit aux produits en stock pour les transferts futurs
                    if (!productsData[productId]) {
                        productsData[productId] = allProductsData[productId];
                        // Repeupler les options de transfert
                        const transferProduct = document.getElementById('transferProduct');
                        const transferOption = document.createElement('option');
                        transferOption.value = productId;
                        transferOption.textContent = `${allProductsData[productId].name} - ${allProductsData[productId].category ? allProductsData[productId].category.name : 'Sans catégorie'}`;
                        transferProduct.appendChild(transferOption);
                    }

                    showToast('Stock ajouté avec succès', 'success');
                }
                
                updateStats();
                filterData();
                closeStockModal();
                
            } catch (error) {
                console.error('Erreur lors de l\'opération:', error);
                showToast(error.message || 'Erreur lors de l\'opération', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalContent;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        }

        async function handleTransferSubmit(event) {
            event.preventDefault();
            
            const submitButton = event.target.querySelector('button[type="submit"]');
            const originalContent = submitButton.innerHTML;
            
            const productId = parseInt(document.getElementById('transferProduct').value);
            const sourceStoreId = parseInt(document.getElementById('sourceStore').value);
            const destinationStoreId = parseInt(document.getElementById('destinationStore').value);
            const quantity = parseInt(document.getElementById('transferQuantity').value);
            const notes = document.getElementById('transferNotes').value;
            
            // Validation
            if (!productId || !sourceStoreId || !destinationStoreId || !quantity) {
                showToast('Veuillez remplir tous les champs obligatoires', 'error');
                return;
            }
            
            if (sourceStoreId === destinationStoreId) {
                showToast('Les magasins source et destination doivent être différents', 'error');
                return;
            }
            
            // Check source stock
            const sourceStock = stocksData.find(s => 
                s.productId === productId && s.storeId === sourceStoreId
            );
            
            if (!sourceStock || sourceStock.quantityAvailable < quantity) {
                showToast('Stock insuffisant dans le magasin source', 'error');
                return;
            }
            
            // Check destination stock exists
            const destinationStock = stocksData.find(s => 
                s.productId === productId && s.storeId === destinationStoreId
            );
            
            if (!destinationStock) {
                showToast('Le produit n\'existe pas dans le magasin de destination', 'error');
                return;
            }
            
            // Set loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Transfert en cours...';
            
            try {
                // 1. Create transfer record
                const transferData = {
                    productId,
                    sourceStoreId,
                    destinationStoreId,
                    quantity,
                    status: 'pending',
                    comment: notes
                };
                
                const newTransfer = await stockService.createTransfer(transferData);
                
                // 2. Update source stock (decrease)
                const newSourceQuantity = sourceStock.quantityAvailable - quantity;
                await stockService.updateStock(sourceStock.id, {
                    productId: sourceStock.productId,
                    storeId: sourceStock.storeId,
                    quantityAvailable: newSourceQuantity,
                    criticalThreshold: sourceStock.criticalThreshold
                });
                
                // 3. Update destination stock (increase)
                const newDestinationQuantity = destinationStock.quantityAvailable + quantity;
                await stockService.updateStock(destinationStock.id, {
                    productId: destinationStock.productId,
                    storeId: destinationStock.storeId,
                    quantityAvailable: newDestinationQuantity,
                    criticalThreshold: destinationStock.criticalThreshold
                });

                // 3.5 Mettre a jour le transfert
                const transferId = await stockService.updateTransfer(newTransfer.data.id, {
                    status: 'completed',
                });
                
                // 4. Update local data after successful backend updates
                sourceStock.quantityAvailable = newSourceQuantity;
                sourceStock.updatedAt = new Date().toISOString();
                
                destinationStock.quantityAvailable = newDestinationQuantity;
                destinationStock.updatedAt = new Date().toISOString();
                
                showToast(`Transfert effectué avec succès : ${quantity} unités de ${allProductsData[productId]?.name || 'produit'} transférées`, 'success');
                updateStats();
                filterData();
                closeTransferModal();
                
            } catch (error) {
                console.error('Erreur lors du transfert:', error);
                showToast(error.message || 'Erreur lors du transfert', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalContent;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        }

        async function confirmDelete() {
            if (!deletingStockId) return;
            
            const deleteButton = document.getElementById('deleteButton');
            const originalContent = deleteButton.innerHTML;
            
            // Set loading state
            deleteButton.disabled = true;
            deleteButton.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-2 animate-spin"></i>Suppression...';
            
            try {
                await stockService.deleteStock(deletingStockId);
                
                // Remove from local data
                const index = stocksData.findIndex(s => s.id === deletingStockId);
                if (index !== -1) {
                    stocksData.splice(index, 1);
                }
                
                showToast('Stock supprimé avec succès', 'success');
                updateStats();
                filterData();
                closeDeleteModal();
                
            } catch (error) {
                console.error('Erreur lors de la suppression:', error);
                showToast('Erreur lors de la suppression du stock', 'error');
            } finally {
                deleteButton.disabled = false;
                deleteButton.innerHTML = originalContent;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        }

        function updateStats() {
            // Update total products count
            const uniqueProducts = new Set(stocksData.map(s => s.productId));
            // Update total products count - utiliser allProducts au lieu des stocks
            document.getElementById('totalProducts').textContent = Object.keys(allProductsData).length;
            
            // Update total stores count
            const uniqueStores = new Set(stocksData.map(s => s.storeId));
            document.getElementById('totalStores').textContent = uniqueStores.size;
            
            // Update total stock
            const totalStock = stocksData.reduce((sum, s) => sum + s.quantityAvailable, 0);
            document.getElementById('totalStock').textContent = totalStock;
            
            // Update critical stocks
            const criticalStocks = stocksData.filter(s => s.quantityAvailable <= s.criticalThreshold).length;
            document.getElementById('criticalStocks').textContent = criticalStocks;
        }

        function showToast(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-full`;
            
            switch (type) {
                case 'success':
                    notification.className += ' bg-success text-success-foreground';
                    break;
                case 'error':
                    notification.className += ' bg-destructive text-destructive-foreground';
                    break;
                default:
                    notification.className += ' bg-info text-info-foreground';
            }

            notification.innerHTML = `
                <div class="flex items-center gap-2">
                    <i data-lucide="${type === 'success' ? 'check-circle' : type === 'error' ? 'x-circle' : 'info'}" class="w-4 h-4"></i>
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2">
                        <i data-lucide="x" class="w-4 h-4"></i>
                    </button>
                </div>
            `;

            document.body.appendChild(notification);
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);

            // Auto remove after 5 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 300);
            }, 5000);
        }
    </script>
</body>
</html>