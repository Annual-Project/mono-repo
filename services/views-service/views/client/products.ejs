<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= storeName %> - Produits - StoreManager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        border: "hsl(214.3 31.8% 91.4%)",
                        input: "hsl(214.3 31.8% 91.4%)",
                        ring: "hsl(222.2 84% 4.9%)",
                        background: "hsl(0 0% 100%)",
                        foreground: "hsl(222.2 84% 4.9%)",
                        primary: {
                            DEFAULT: "hsl(222.2 47.4% 11.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        secondary: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84.2% 60.2%)",
                            foreground: "hsl(210 40% 98%)",
                        },
                        muted: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(215.4 16.3% 46.9%)",
                        },
                        accent: {
                            DEFAULT: "hsl(210 40% 96%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        popover: {
                            DEFAULT: "hsl(0 0% 100%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                        card: {
                            DEFAULT: "hsl(0 0% 100%)",
                            foreground: "hsl(222.2 84% 4.9%)",
                        },
                    },
                    borderRadius: {
                        lg: "var(--radius)",
                        md: "calc(--radius - 2px)",
                        sm: "calc(--radius - 4px)",
                    },
                }
            }
        }
    </script>
    <style>
        :root {
            --radius: 0.5rem;
        }
        
        .btn {
            @apply inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50;
        }
        
        .btn-primary {
            @apply bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2;
        }
        
        .btn-secondary {
            @apply bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2;
        }
        
        .btn-outline {
            @apply border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2;
        }
        
        .card {
            @apply rounded-lg border bg-card text-card-foreground shadow-sm;
        }
        
        .card-header {
            @apply flex flex-col space-y-1.5 p-6;
        }
        
        .card-content {
            @apply p-6 pt-0;
        }
        
        .input {
            @apply flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50;
        }
        
        .badge {
            @apply inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
        }
        
        .badge-default {
            @apply border-transparent bg-primary text-primary-foreground hover:bg-primary/80;
        }
        
        .badge-secondary {
            @apply border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80;
        }
        
        .glass-effect {
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.9);
        }
        
        /* Search Bar */
        .search-container {
            position: relative;
            max-width: 650px;
            margin: 0 auto;
        }
        
        .search-input {
            height: 60px;
            font-size: 18px;
            padding-left: 60px;
            padding-right: 24px;
            border-radius: 16px;
            border: 2px solid #e5e7eb;
            background: white;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            width: 100%;
        }
        
        .search-input:focus {
            outline: none;
            border-color: #1f2937;
            box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.15), 0 0 0 4px rgba(31, 41, 55, 0.1);
            transform: translateY(-2px);
        }
        
        .search-input::placeholder {
            color: #9ca3af;
            font-weight: 500;
        }
        
        .search-icon {
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
            z-index: 10;
            transition: all 0.3s ease;
        }
        
        .search-container:focus-within .search-icon {
            color: #1f2937;
            transform: translateY(-50%) scale(1.1);
        }
        
        /* Product Cards */
        .product-card {
            @apply rounded-xl border bg-white text-card-foreground shadow-md cursor-pointer;
            border: 2px solid hsl(214.3 31.8% 91.4%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
        }
        
        .product-card:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
            border-color: hsl(222.2 47.4% 11.2%);
        }
        
        .product-image {
            @apply w-full h-48 object-cover rounded-t-lg bg-gray-100;
        }
        
        /* Dropdown Styles */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s;
            cursor: pointer;
        }
        
        .btn-outline {
            border: 1px solid #d1d5db;
            background: white;
            color: #374151;
            padding: 8px 16px;
            height: 48px;
        }
        
        .btn-outline:hover {
            background: #f9fafb;
            border-color: #9ca3af;
        }
        
        .dropdown-menu {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            margin-top: 8px;
            width: 320px;
            background: white;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            z-index: 50;
        }
        
        .dropdown-menu.show {
            display: block;
        }
        
        .chevron {
            transition: transform 0.3s ease;
            margin-left: 8px;
        }
        
        .chevron.rotated {
            transform: rotate(180deg);
        }
        
        .checkbox-item {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            cursor: pointer;
            border-radius: 6px;
        }
        
        .checkbox-item:hover {
            background: #f3f4f6;
        }
        
        .checkbox-item input {
            margin-right: 12px;
        }
        
        /* Active Filter Tags */
        .filter-tag {
            display: inline-flex;
            align-items: center;
            background: #1f2937;
            color: white;
            padding: 4px 12px;
            border-radius: 9999px;
            font-size: 14px;
            font-weight: 500;
            margin: 4px;
        }
        
        .filter-tag button {
            margin-left: 8px;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .filter-tag button:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        /* Stock Badges */
        .stock-available {
            @apply bg-green-100 text-green-800 border border-green-200;
        }
        
        .stock-low {
            @apply bg-orange-100 text-orange-800 border border-orange-200;
        }
        
        .stock-out {
            @apply bg-red-100 text-red-800 border border-red-200;
        }
        
        /* Modal */
        .modal-overlay {
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            right: 0 !important;
            bottom: 0 !important;
            width: 100vw !important;
            height: 100vh !important;
            background: rgba(0, 0, 0, 0.6) !important;
            backdrop-filter: blur(8px) !important;
            z-index: 999999 !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            padding: 2rem !important;
            animation: fadeIn 0.3s ease;
        }
        
        .modal-overlay.hidden {
            display: none !important;
        }
        
        .modal-content {
            position: relative !important;
            background: white !important;
            border-radius: 1rem !important;
            max-width: 42rem !important;
            width: 100% !important;
            max-height: calc(100vh - 4rem) !important;
            overflow-y: auto !important;
            z-index: 1000000 !important;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25) !important;
            animation: slideUp 0.3s ease;
            margin: auto !important;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .store-header-gradient {
            background: linear-gradient(135deg, hsl(222.2 47.4% 11.2%) 0%, hsl(222.2 47.4% 20%) 100%);
        }

        /* Styles de pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .pagination-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 2.5rem;
            height: 2.5rem;
            padding: 0.5rem;
            border: 2px solid hsl(214.3 31.8% 91.4%);
            background: white;
            color: hsl(222.2 84% 4.9%);
            font-size: 0.875rem;
            font-weight: 500;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            text-decoration: none;
        }

        .pagination-btn:hover {
            border-color: hsl(222.2 47.4% 11.2%);
            background: hsl(210 40% 96%);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .pagination-btn.active {
            background: hsl(222.2 47.4% 11.2%);
            color: white;
            border-color: hsl(222.2 47.4% 11.2%);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(31, 41, 55, 0.2);
        }

        .pagination-btn.active:hover {
            background: hsl(222.2 47.4% 20%);
            border-color: hsl(222.2 47.4% 20%);
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            pointer-events: none;
        }

        .pagination-btn.nav-btn {
            min-width: 3rem;
            font-weight: 600;
        }

        .pagination-ellipsis {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 2.5rem;
            height: 2.5rem;
            color: hsl(215.4 16.3% 46.9%);
            font-weight: 500;
        }

        .pagination-info {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 1rem;
            margin-bottom: 2rem;
            color: hsl(215.4 16.3% 46.9%);
            font-size: 0.875rem;
        }

        /* Responsive design */
        @media (max-width: 640px) {
            .pagination {
                gap: 0.25rem;
            }
            
            .pagination-btn {
                min-width: 2rem;
                height: 2rem;
                font-size: 0.75rem;
            }
            
            .pagination-btn.nav-btn {
                min-width: 2.5rem;
            }
            
            .pagination-ellipsis {
                min-width: 2rem;
                height: 2rem;
            }
            
            /* Masquer certains numéros sur mobile */
            .pagination-btn.hide-mobile {
                display: none;
            }
        }

        /* Style pour les cartes masquées */
        .product-card.hidden-by-pagination {
            display: none !important;
        }
    </style>
</head>
<body class="min-h-screen bg-background font-sans antialiased">
    <!-- Header -->
    <%- include('../partials/header') %>

    <!-- Page Header -->
    <section class="store-header-gradient py-16">
        <div class="container mx-auto px-4">
            <!-- Breadcrumb -->
            <div class="mb-6">
                <nav class="flex items-center space-x-2 text-gray-300">
                    <a href="/stores" class="hover:text-white transition-colors">Magasins</a>
                    <i data-lucide="chevron-right" class="w-4 h-4"></i>
                    <span class="text-white font-medium"><%= storeName %></span>
                </nav>
            </div>
            
            <div class="text-center mb-12">
                <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">
                    <%= storeName %>
                </h1>
                <% 
                // Génération d'adresse aléatoire
                const addresses = [
                    '123 Avenue des Champs-Élysées, 75008 Paris',
                    '45 Place Bellecour, 69002 Lyon',
                    '78 Quai du Port, 13002 Marseille',
                    '12 Place du Capitole, 31000 Toulouse',
                    '34 Promenade des Anglais, 06000 Nice',
                    '56 Rue Crébillon, 44000 Nantes',
                    '45 Place Kléber, 67000 Strasbourg',
                    '23 Cours de l\'Intendance, 33000 Bordeaux',
                    '67 Rue Nationale, 59000 Lille',
                    '12 Place de la Comédie, 34000 Montpellier'
                ];
                const randomAddress = addresses[Math.floor(Math.random() * addresses.length)];
                %>
                <div class="flex items-center justify-center text-gray-200 mb-6">
                    <i data-lucide="map-pin" class="w-5 h-5 mr-2"></i>
                    <span><%= randomAddress %></span>
                </div>
                <p class="text-xl text-gray-200 max-w-2xl mx-auto">
                    Découvrez notre sélection de <%= productsCount %> produits répartis en <%= categoriesCount %> catégories
                </p>
            </div>
            
            <!-- Search Bar -->
            <div class="search-container">
                <div class="search-icon">
                    <i data-lucide="search" class="h-6 w-6"></i>
                </div>
                <input 
                    type="text" 
                    id="searchInput"
                    class="search-input" 
                    placeholder="Rechercher un produit..."
                    autocomplete="off">
            </div>
        </div>
    </section>

    <!-- Filters Section -->
    <section class="py-8 bg-muted/30 border-b border-border/40">
        <div class="container mx-auto px-4">
            <div class="flex flex-wrap items-center gap-6">
                <h3 class="text-lg font-semibold text-foreground">Filtrer par catégorie :</h3>
                
                <!-- Category Dropdown -->
                <div class="relative">
                    <button type="button" id="categoryDropdownBtn" class="btn btn-outline" style="min-width: 200px; justify-content: space-between;">
                        <span id="buttonText">Sélectionner des catégories</span>
                        <svg class="chevron" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    
                    <div id="categoryDropdown" class="dropdown-menu">
                        <div style="padding: 16px; border-bottom: 1px solid #e5e7eb;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <span style="font-weight: 500; color: #111827;">Catégories</span>
                                <button type="button" id="clearFilters" style="font-size: 14px; color: #6b7280; background: none; border: none; cursor: pointer;">
                                    Tout désélectionner
                                </button>
                            </div>
                        </div>
                        <div style="padding: 8px; max-height: 256px; overflow-y: auto;">
                            <% uniqueCategories.forEach((category, index) => { %>
                                <% const categoryCount = products.filter(p => p.product.category.name === category).length; %>
                                <label class="checkbox-item">
                                    <input type="checkbox" value="<%= category.toLowerCase().replace(/\s+/g, '_') %>" class="category-checkbox">
                                    <span style="flex: 1;"><%= category %></span>
                                    <span style="font-size: 14px; color: #6b7280;"><%= categoryCount %></span>
                                </label>
                            <% }); %>
                        </div>
                    </div>
                </div>
                
                <!-- Active Filters Display -->
                <div id="activeFilters" class="flex flex-wrap gap-2"></div>
            </div>
        </div>
    </section>

    <!-- Products Grid -->
    <section class="py-16">
        <div class="container mx-auto px-4">
            <div class="flex justify-between items-center mb-8">
                <div class="flex items-center space-x-4">
                    <h2 class="text-2xl font-bold text-foreground">Nos Produits</h2>
                    <span class="text-muted-foreground" id="productCount"><%= productsCount %> produits</span>
                </div>
                <select class="input w-auto" id="sortSelect">
                    <option value="name">Trier par nom</option>
                    <option value="price-asc">Prix croissant</option>
                    <option value="price-desc">Prix décroissant</option>
                    <option value="stock">Stock disponible</option>
                </select>
            </div>
            
            <div class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8" id="productsGrid">
                <%
                // Images aléatoires selon la catégorie
                const categoryImages = {
                    'electronics': [
                        'https://images.unsplash.com/photo-1592750475338-74b7b21085ab?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1517336714731-489689fd1ca8?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1583394838336-acd977736f90?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400&h=300&fit=crop'
                    ],
                    'books': [
                        'https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=300&fit=crop'
                    ],
                    'clothing': [
                        'https://images.unsplash.com/photo-1542272604-787c3835535d?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=400&h=300&fit=crop'
                    ],
                    'default': [
                        'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1545241047-6083a3684587?w=400&h=300&fit=crop',
                        'https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=400&h=300&fit=crop'
                    ]
                };

                // Caractéristiques aléatoires selon la catégorie
                const categoryFeatures = {
                    'electronics': [
                        ['Garantie 2 ans', 'Bluetooth 5.0', 'Livraison gratuite', 'Service client 24/7'],
                        ['Écran HD', 'Batterie longue durée', 'Étanche IP67', 'Compatible iOS/Android'],
                        ['Processeur rapide', '5G compatible', 'Appareil photo haute résolution', 'Stockage extensible']
                    ],
                    'books': [
                        ['Format papier', 'Couverture souple', 'Livraison rapide', 'Édition française'],
                        ['Broché', 'Illustrations incluses', 'Auteur reconnu', 'Prix littéraire'],
                        ['Reliure de qualité', 'Papier recyclé', 'Nouvelle édition', 'Résumé disponible']
                    ],
                    'clothing': [
                        ['100% coton', 'Lavable machine', 'Tailles disponibles', 'Coupe moderne'],
                        ['Matière respirante', 'Anti-odeur', 'Séchage rapide', 'Coupe ajustée'],
                        ['Tissu stretch', 'Résistant', 'Coloris variés', 'Coupe classique']
                    ],
                    'default': [
                        ['Qualité premium', 'Livraison gratuite', 'Garantie incluse', 'Service client'],
                        ['Matériaux durables', 'Facile d\'entretien', 'Design moderne', 'Prix compétitif'],
                        ['Excellent rapport qualité-prix', 'Livraison rapide', 'Satisfaction garantie', 'Support technique']
                    ]
                };

                function getRandomImage(category, index) {
                    const categoryKey = category.toLowerCase().includes('electronic') ? 'electronics' :
                                      category.toLowerCase().includes('book') ? 'books' :
                                      category.toLowerCase().includes('clothing') || category.toLowerCase().includes('vetement') ? 'clothing' : 'default';
                    const images = categoryImages[categoryKey];
                    return images[index % images.length];
                }

                function getRandomFeatures(category, index) {
                    const categoryKey = category.toLowerCase().includes('electronic') ? 'electronics' :
                                      category.toLowerCase().includes('book') ? 'books' :
                                      category.toLowerCase().includes('clothing') || category.toLowerCase().includes('vetement') ? 'clothing' : 'default';
                    const features = categoryFeatures[categoryKey];
                    return features[index % features.length];
                }
                %>
                
                <% products.forEach((productStock, index) => { %>
                    <% 
                    const product = productStock.product;
                    const category = product.category;
                    const randomImage = getRandomImage(category.name, index);
                    const randomFeatures = getRandomFeatures(category.name, index);
                    const categorySlug = category.name.toLowerCase().replace(/\s+/g, '_');
                    %>
                    
                    <div class="product-card" 
                         onclick="openProductModal('<%= product.id %>')" 
                         data-category="<%= categorySlug %>"
                         data-product-name="<%= product.name.toLowerCase() %>"
                         data-product-description="<%= product.description.toLowerCase() %>"
                         data-product-price="<%= product.price %>"
                         data-product-stock="<%= productStock.quantityAvailable %>">
                        <div class="relative">
                            <img src="<%= randomImage %>" alt="<%= product.name %>" class="product-image">
                            <div class="absolute top-3 right-3">
                                <% if (productStock.quantityAvailable === 0) { %>
                                    <span class="badge stock-out">Épuisé</span>
                                <% } else if (productStock.quantityAvailable <= productStock.criticalThreshold) { %>
                                    <span class="badge stock-low">Stock limité</span>
                                <% } else { %>
                                    <span class="badge stock-available">Disponible</span>
                                <% } %>
                            </div>
                        </div>
                        <div class="p-6">
                            <h3 class="text-xl font-bold text-foreground mb-2"><%= product.name %></h3>
                            <p class="text-muted-foreground mb-4 line-clamp-2"><%= product.description %></p>
                            
                            <div class="flex items-center justify-between">
                                <div class="text-2xl font-bold text-primary"><%= product.price %>€</div>
                                <div class="text-sm text-muted-foreground">
                                    Stock: <%= productStock.quantityAvailable > 0 ? productStock.quantityAvailable : 'Épuisé' %>
                                </div>
                            </div>
                            
                            <button class="btn btn-primary w-full mt-4 h-12" <%= productStock.quantityAvailable === 0 ? 'disabled' : '' %>>
                                <i data-lucide="eye" class="w-4 h-4 mr-2"></i>
                                Voir le détail
                            </button>
                        </div>
                        
                        <!-- Données cachées pour le modal -->
                        <script type="application/json" class="product-data"><%- JSON.stringify({
                            id: product.id,
                            name: product.name,
                            description: product.description,
                            price: product.price,
                            stock: productStock.quantityAvailable,
                            category: category.name,
                            image: randomImage,
                            features: randomFeatures
                        }) %></script>
                    </div>
                <% }); %>
            </div>
            
            <!-- No Results Message -->
            <div id="noResults" class="text-center py-16 hidden">
                <div class="w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                    <i data-lucide="search-x" class="w-12 h-12 text-muted-foreground"></i>
                </div>
                <h3 class="text-xl font-semibold text-foreground mb-2">Aucun produit trouvé</h3>
                <p class="text-muted-foreground">Essayez de modifier vos critères de recherche ou de filtrage</p>
            </div>
        </div>
    </section>

    <!-- Product Modal -->
    <div id="productModal" class="modal-overlay hidden" onclick="closeModal(event)">
        <div class="modal-content" onclick="event.stopPropagation()">
            <div class="relative">
                <button onclick="closeModal()" class="absolute top-4 right-4 z-10 bg-white/80 hover:bg-white rounded-full p-2 transition-colors">
                    <i data-lucide="x" class="w-5 h-5"></i>
                </button>
                
                <div id="modalContent">
                    <!-- Modal content will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <%- include('../partials/footer') %>

    <script>
        // Système de pagination pour les cartes de produits existantes
        class ProductsPaginationSystem {
            constructor(itemsPerPage = 8) {
                this.itemsPerPage = itemsPerPage;
                this.currentPage = 1;
                this.allProductCards = [];
                this.filteredProductCards = [];
                this.totalPages = 0;
                
                // Récupérer toutes les cartes de produits
                this.allProductCards = Array.from(document.querySelectorAll('.product-card'));
                this.filteredProductCards = [...this.allProductCards];
                
                // Créer le conteneur de pagination
                this.createPaginationContainer();
                this.updatePagination();
                this.renderCurrentPage();
            }
            
            createPaginationContainer() {
                const productsSection = document.querySelector('#productsGrid').closest('section');
                const paginationHTML = `
                    <div class="pagination" id="paginationControls">
                        <!-- Les boutons seront générés dynamiquement -->
                    </div>
                    <div class="pagination-info" id="paginationInfo">
                        <!-- Les infos seront générées dynamiquement -->
                    </div>
                `;
                
                productsSection.insertAdjacentHTML('afterend', paginationHTML);
                this.paginationControls = document.getElementById('paginationControls');
                this.paginationInfo = document.getElementById('paginationInfo');
            }
            
            updatePagination() {
                this.totalPages = Math.ceil(this.filteredProductCards.length / this.itemsPerPage);
                
                if (this.currentPage > this.totalPages) {
                    this.currentPage = Math.max(1, this.totalPages);
                }
                
                this.renderPaginationControls();
                this.renderPaginationInfo();
                this.updateProductCount();
            }
            
            updateProductCount() {
                const productCount = document.getElementById('productCount');
                if (productCount) {
                    productCount.textContent = `${this.filteredProductCards.length} produit${this.filteredProductCards.length > 1 ? 's' : ''}`;
                }
            }
            
            renderPaginationControls() {
                if (this.totalPages <= 1) {
                    this.paginationControls.style.display = 'none';
                    return;
                }
                
                this.paginationControls.style.display = 'flex';
                
                let buttonsHTML = '';
                
                // Bouton Précédent
                const prevDisabled = this.currentPage === 1 ? 'disabled' : '';
                buttonsHTML += `
                    <button class="pagination-btn nav-btn" ${prevDisabled} onclick="productsPagination.goToPage(${this.currentPage - 1})">
                        <i data-lucide="chevron-left" style="width: 1rem; height: 1rem;"></i>
                        Précédent
                    </button>
                `;
                
                // Boutons de numéro de page
                for (let i = 1; i <= this.totalPages; i++) {
                    const activeClass = i === this.currentPage ? 'active' : '';
                    const hideMobileClass = this.shouldHideOnMobile(i) ? 'hide-mobile' : '';
                    
                    buttonsHTML += `
                        <button class="pagination-btn ${activeClass} ${hideMobileClass}" 
                                onclick="productsPagination.goToPage(${i})">
                            ${i}
                        </button>
                    `;
                }
                
                // Bouton Suivant
                const nextDisabled = this.currentPage === this.totalPages ? 'disabled' : '';
                buttonsHTML += `
                    <button class="pagination-btn nav-btn" ${nextDisabled} onclick="productsPagination.goToPage(${this.currentPage + 1})">
                        Suivant
                        <i data-lucide="chevron-right" style="width: 1rem; height: 1rem; margin-left: 0.25rem;"></i>
                    </button>
                `;
                
                this.paginationControls.innerHTML = buttonsHTML;
                
                // Réinitialiser les icônes Lucide
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
            
            shouldHideOnMobile(pageNumber) {
                const range = 1;
                return Math.abs(pageNumber - this.currentPage) > range && 
                       pageNumber !== 1 && 
                       pageNumber !== this.totalPages;
            }
            
            renderPaginationInfo() {
                if (this.filteredProductCards.length === 0) {
                    this.paginationInfo.innerHTML = 'Aucun produit trouvé';
                    return;
                }
                
                const startItem = (this.currentPage - 1) * this.itemsPerPage + 1;
                const endItem = Math.min(this.currentPage * this.itemsPerPage, this.filteredProductCards.length);
                
                this.paginationInfo.innerHTML = `
                    Affichage de ${startItem} à ${endItem} sur ${this.filteredProductCards.length} produit${this.filteredProductCards.length > 1 ? 's' : ''}
                `;
            }
            
            goToPage(page) {
                if (page < 1 || page > this.totalPages || page === this.currentPage) {
                    return;
                }
                
                this.currentPage = page;
                this.updatePagination();
                this.renderCurrentPage();
                
                // Scroll vers le haut de la grille
                const productsSection = document.querySelector('#productsGrid').closest('section');
                productsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
            
            renderCurrentPage() {
                // Masquer toutes les cartes
                this.allProductCards.forEach(card => {
                    card.classList.add('hidden-by-pagination');
                });
                
                // Afficher seulement les cartes de la page courante
                const startIndex = (this.currentPage - 1) * this.itemsPerPage;
                const endIndex = startIndex + this.itemsPerPage;
                const cardsToShow = this.filteredProductCards.slice(startIndex, endIndex);
                
                cardsToShow.forEach(card => {
                    card.classList.remove('hidden-by-pagination');
                });
                
                // Gérer l'affichage du message "aucun résultat"
                const noResults = document.getElementById('noResults');
                if (cardsToShow.length === 0) {
                    if (noResults) noResults.classList.remove('hidden');
                } else {
                    if (noResults) noResults.classList.add('hidden');
                }
            }
            
            updateWithFilteredCards(filteredCards) {
                this.filteredProductCards = filteredCards;
                this.currentPage = 1;
                this.updatePagination();
                this.renderCurrentPage();
            }
        }

        // Variables globales
        let productsPagination;
        let selectedCategories = [];
        
        // Mapping des noms de catégories pour l'affichage
        const categoryNames = {};
        <% uniqueCategories.forEach(category => { %>
            categoryNames['<%= category.toLowerCase().replace(/\s+/g, '_') %>'] = '<%= category %>';
        <% }); %>

        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, initializing...');
            
            // Initialize Lucide icons safely
            try {
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                    console.log('Lucide icons initialized');
                } else {
                    console.log('Lucide not available');
                }
            } catch (error) {
                console.log('Lucide initialization failed, continuing without it');
            }
            
            // Initialiser le système de pagination
            productsPagination = new ProductsPaginationSystem(8); // 8 produits par page
            
            // Système de recherche
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(handleSearch, 300));
            }
            
            // Système de dropdown pour les catégories
            initializeDropdown();
            
            // Système de tri
            const sortSelect = document.getElementById('sortSelect');
            if (sortSelect) {
                sortSelect.addEventListener('change', handleSort);
            }
            
            console.log('Système de pagination des produits initialisé');
        });
        
        function initializeDropdown() {
            const dropdownBtn = document.getElementById('categoryDropdownBtn');
            const dropdown = document.getElementById('categoryDropdown');
            const chevron = dropdownBtn ? dropdownBtn.querySelector('.chevron') : null;
            const buttonText = document.getElementById('buttonText');
            const activeFiltersContainer = document.getElementById('activeFilters');
            
            if (dropdownBtn && dropdown && chevron && buttonText) {
                // Toggle dropdown
                dropdownBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const isVisible = dropdown.classList.contains('show');
                    
                    if (isVisible) {
                        dropdown.classList.remove('show');
                        chevron.classList.remove('rotated');
                    } else {
                        dropdown.classList.add('show');
                        chevron.classList.add('rotated');
                    }
                });
                
                // Close dropdown when clicking outside
                document.addEventListener('click', function(e) {
                    if (!dropdown.contains(e.target) && !dropdownBtn.contains(e.target)) {
                        dropdown.classList.remove('show');
                        chevron.classList.remove('rotated');
                    }
                });
                
                // Handle checkbox changes
                const checkboxes = document.querySelectorAll('.category-checkbox');
                
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', function() {
                        const category = this.value;
                        
                        if (this.checked) {
                            if (!selectedCategories.includes(category)) {
                                selectedCategories.push(category);
                            }
                        } else {
                            selectedCategories = selectedCategories.filter(cat => cat !== category);
                        }
                        
                        updateUI();
                        applyFilters();
                    });
                });
                
                // Clear all filters
                const clearButton = document.getElementById('clearFilters');
                if (clearButton) {
                    clearButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        selectedCategories = [];
                        checkboxes.forEach(checkbox => {
                            checkbox.checked = false;
                        });
                        
                        updateUI();
                        applyFilters();
                    });
                }
                
                function updateUI() {
                    // Update button text
                    if (selectedCategories.length === 0) {
                        buttonText.textContent = 'Sélectionner des catégories';
                    } else if (selectedCategories.length === 1) {
                        buttonText.textContent = categoryNames[selectedCategories[0]];
                    } else {
                        buttonText.textContent = `${selectedCategories.length} catégories sélectionnées`;
                    }
                    
                    // Update active filters display
                    if (activeFiltersContainer) {
                        activeFiltersContainer.innerHTML = selectedCategories.map(category => `
                            <span class="filter-tag">
                                ${categoryNames[category]}
                                <button onclick="removeFilter('${category}')">
                                    <svg width="12" height="12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </span>
                        `).join('');
                    }
                }
            }
        }
        
        function removeFilter(category) {
            const checkbox = document.querySelector(`input[value="${category}"]`);
            if (checkbox) {
                checkbox.checked = false;
                checkbox.dispatchEvent(new Event('change'));
            }
        }

        function handleSearch(event) {
            const searchTerm = event.target.value.toLowerCase();
            applyFilters(searchTerm);
        }

        function applyFilters(searchTerm = '') {
            const currentSearchTerm = searchTerm || document.getElementById('searchInput').value.toLowerCase();
            
            const filteredCards = productsPagination.allProductCards.filter(card => {
                const productName = card.dataset.productName || '';
                const productDescription = card.dataset.productDescription || '';
                const productCategory = card.dataset.category || '';
                
                const matchesSearch = currentSearchTerm === '' || 
                                    productName.includes(currentSearchTerm) ||
                                    productDescription.includes(currentSearchTerm);
                
                const matchesCategory = selectedCategories.length === 0 || 
                                      selectedCategories.includes(productCategory);
                
                return matchesSearch && matchesCategory;
            });
            
            // Mettre à jour la pagination
            if (productsPagination) {
                productsPagination.updateWithFilteredCards(filteredCards);
            }
        }

        function handleSort(event) {
            const sortBy = event.target.value;
            
            // Trier les cartes filtrées
            productsPagination.filteredProductCards.sort((a, b) => {
                switch(sortBy) {
                    case 'name':
                        const nameA = a.dataset.productName || '';
                        const nameB = b.dataset.productName || '';
                        return nameA.localeCompare(nameB);
                    case 'price-asc':
                        const priceA = parseFloat(a.dataset.productPrice) || 0;
                        const priceB = parseFloat(b.dataset.productPrice) || 0;
                        return priceA - priceB;
                    case 'price-desc':
                        const priceC = parseFloat(a.dataset.productPrice) || 0;
                        const priceD = parseFloat(b.dataset.productPrice) || 0;
                        return priceD - priceC;
                    case 'stock':
                        const stockA = parseInt(a.dataset.productStock) || 0;
                        const stockB = parseInt(b.dataset.productStock) || 0;
                        return stockB - stockA;
                    default:
                        return 0;
                }
            });
            
            // Mettre à jour la pagination complètement après le tri
            if (productsPagination) {
                productsPagination.updatePagination();
                productsPagination.renderCurrentPage();
            }
        }

        function openProductModal(productId) {
            // Trouver le produit par son ID
            const productCard = document.querySelector(`[onclick="openProductModal('${productId}')"]`);
            if (!productCard) return;
            
            // Récupérer les données du produit depuis le script JSON
            const productDataScript = productCard.querySelector('.product-data');
            if (!productDataScript) return;
            
            const product = JSON.parse(productDataScript.textContent);
            
            const modalContent = document.getElementById('modalContent');
            modalContent.innerHTML = `
                <div class="relative">
                    <img src="${product.image}" alt="${product.name}" class="w-full h-80 object-cover rounded-t-2xl">
                    <div class="absolute top-4 left-4">
                        ${getStockBadge(product.stock)}
                    </div>
                </div>
                
                <div class="p-8">
                    <div class="mb-6">
                        <h2 class="text-3xl font-bold text-foreground mb-2">${product.name}</h2>
                        <div class="flex items-center justify-between">
                            <span class="text-3xl font-bold text-primary">${product.price}€</span>
                            <span class="text-muted-foreground">Stock: ${product.stock > 0 ? product.stock + ' unités' : 'Épuisé'}</span>
                        </div>
                    </div>
                    
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold mb-3">Description</h3>
                        <p class="text-muted-foreground leading-relaxed">${product.description}</p>
                    </div>
                    
                    <div class="mb-8">
                        <h3 class="text-lg font-semibold mb-3">Caractéristiques</h3>
                        <div class="grid grid-cols-2 gap-2">
                            ${product.features.map(feature => `
                                <div class="flex items-center">
                                    <i data-lucide="check" class="w-4 h-4 text-green-500 mr-2"></i>
                                    <span class="text-sm text-muted-foreground">${feature}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    
                    <div class="flex gap-4">
                        <button onclick="closeModal()" class="btn btn-outline flex-1 h-12">
                            <i data-lucide="x" class="w-4 h-4 mr-2"></i>
                            Fermer
                        </button>
                        <button onclick="orderProduct('${product.id}', '${product.name}')" class="btn btn-primary flex-1 h-12" ${product.stock === 0 ? 'disabled' : ''}>
                            <i data-lucide="shopping-cart" class="w-4 h-4 mr-2"></i>
                            ${product.stock === 0 ? 'Indisponible' : 'Commander'}
                        </button>
                    </div>
                </div>
            `;
            
            document.getElementById('productModal').classList.remove('hidden');
            try {
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            } catch (error) {
                console.log('Lucide createIcons failed in modal, skipping');
            }
        }

        function getStockBadge(stock) {
            if (stock === 0) {
                return '<span class="badge stock-out">Épuisé</span>';
            } else if (stock <= 10) {
                return '<span class="badge stock-low">Stock limité</span>';
            } else {
                return '<span class="badge stock-available">Disponible</span>';
            }
        }

        function closeModal(event) {
            if (event && event.target === event.currentTarget) {
                document.getElementById('productModal').classList.add('hidden');
            } else if (!event) {
                document.getElementById('productModal').classList.add('hidden');
            }
        }

        function orderProduct(productId, productName) {
            // Animation de feedback
            const button = event.target.closest('button');
            const originalText = button.innerHTML;
            
            button.innerHTML = '<i data-lucide="check" class="w-4 h-4 mr-2"></i>Commandé !';
            button.classList.remove('btn-primary');
            button.classList.add('bg-green-500', 'text-white');
            button.disabled = true;
            
            setTimeout(() => {
                closeModal();
                
                // Reset button after modal closes
                setTimeout(() => {
                    if (button) {
                        button.innerHTML = originalText;
                        button.classList.add('btn-primary');
                        button.classList.remove('bg-green-500', 'text-white');
                        button.disabled = false;
                    }
                }, 300);
            }, 1500);
            
            console.log(`Commande passée pour: ${productName} (ID: ${productId})`);
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Close modal on escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeModal();
            }
        });
    </script>
</body>
</html>